<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a10" title="PHPCR API and PHPCR-Utils">
  <file path="phpcr/src/PHPCR/ItemExistsException.php" hash="b87075e4e83c3e7049592fd9ca75376f" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="35" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>ItemExistsException</name>
      <full_name>\PHPCR\ItemExistsException</full_name>
      <docblock line="27">
        <description><![CDATA[An exception thrown when an attempt is made to place an item in a position
where another item already exists.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/RepositoryInterface.php" hash="7e686df1732ac71e3fad13179da510dd" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="46" package="phpcr\interfaces">
      <name>RepositoryInterface</name>
      <full_name>\PHPCR\RepositoryInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The entry point into the content repository.]]></description>
        <long-description><![CDATA[<p>The Repository object is usually acquired through an implementation of the
RepositoryFactoryInterface.</p>

<p><strong>PHPCR Note:</strong> This interface has been simplified compared to
JCR:</p>

<ul>
<li>getDescriptor returns array on multivalue, single variable otherwise</li>
<li>removed isSingleValueDescriptor</li>
<li>removed getDescriptorValue and getDescriptorValues as ValueInterface has
 been dropped. Use getDescriptor to get the variable value.</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="60" package="phpcr\interfaces">
        <name>SPEC_VERSION_DESC</name>
        <full_name>SPEC_VERSION_DESC</full_name>
        <value><![CDATA["jcr.specification.version"]]></value>
        <docblock line="52">
          <description><![CDATA[The descriptor key for the version of the specification this repository
implements.]]></description>
          <long-description><![CDATA[<p>For JCR 2.0 the value of this descriptor is the string "2.0".</p>]]></long-description>
          <tag line="52" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="71" package="phpcr\interfaces">
        <name>SPEC_NAME_DESC</name>
        <full_name>SPEC_NAME_DESC</full_name>
        <value><![CDATA["jcr.specification.name"]]></value>
        <docblock line="62">
          <description><![CDATA[The descriptor key for the name of the specification this repository
implements.]]></description>
          <long-description><![CDATA[<p>For JCR 2.0 the value of this descriptor is the string "Content
Repository for Java Technology API".</p>]]></long-description>
          <tag line="62" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="80" package="phpcr\interfaces">
        <name>REP_VENDOR_DESC</name>
        <full_name>REP_VENDOR_DESC</full_name>
        <value><![CDATA["jcr.repository.vendor"]]></value>
        <docblock line="73">
          <description><![CDATA[The descriptor key for the name of the repository vendor.]]></description>
          <long-description><![CDATA[<p>The descriptor returned for this key is a String.</p>]]></long-description>
          <tag line="73" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="89" package="phpcr\interfaces">
        <name>REP_VENDOR_URL_DESC</name>
        <full_name>REP_VENDOR_URL_DESC</full_name>
        <value><![CDATA["jcr.repository.vendor.url"]]></value>
        <docblock line="82">
          <description><![CDATA[The descriptor key for the URL of the repository vendor.]]></description>
          <long-description><![CDATA[<p>The descriptor returned for this key is a String.</p>]]></long-description>
          <tag line="82" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="98" package="phpcr\interfaces">
        <name>REP_NAME_DESC</name>
        <full_name>REP_NAME_DESC</full_name>
        <value><![CDATA["jcr.repository.name"]]></value>
        <docblock line="91">
          <description><![CDATA[The descriptor key for the name of this repository implementation.]]></description>
          <long-description><![CDATA[<p>The descriptor returned for this key is a String.</p>]]></long-description>
          <tag line="91" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="107" package="phpcr\interfaces">
        <name>REP_VERSION_DESC</name>
        <full_name>REP_VERSION_DESC</full_name>
        <value><![CDATA["jcr.repository.version"]]></value>
        <docblock line="100">
          <description><![CDATA[The descriptor key for the version of this repository implementation.]]></description>
          <long-description><![CDATA[<p>The descriptor returned for this key is a String.</p>]]></long-description>
          <tag line="100" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="116" package="phpcr\interfaces">
        <name>WRITE_SUPPORTED</name>
        <full_name>WRITE_SUPPORTED</full_name>
        <value><![CDATA["write.supported"]]></value>
        <docblock line="109">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if repository
content can be updated through the JCR API (as opposed to having
read-only access).</p>]]></long-description>
          <tag line="109" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="133" package="phpcr\interfaces">
        <name>IDENTIFIER_STABILITY</name>
        <full_name>IDENTIFIER_STABILITY</full_name>
        <value><![CDATA["identifier.stability"]]></value>
        <docblock line="118">
          <description><![CDATA[Key to a String descriptor.]]></description>
          <long-description><![CDATA[<p>Returns one of the following
RepositoryInterface constants indicating the stability of identifiers:</p>

<ul>
<li>IDENTIFIER_STABILITY_METHOD_DURATION - Identifiers may change between
 method calls.</li>
<li>IDENTIFIER_STABILITY_SAVE_DURATION - Identifers are guaranteed stable
 within a single save/refresh cycle.</li>
<li>IDENTIFIER_STABILITY_SESSION_DURATION - Identifiers are guaranteed
 stable within a single session.</li>
<li>IDENTIFIER_STABILITY_INDEFINITE_DURATION - Identifers are guaranteed
 to be stable forever.</li>
</ul>]]></long-description>
          <tag line="118" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="141" package="phpcr\interfaces">
        <name>IDENTIFIER_STABILITY_METHOD_DURATION</name>
        <full_name>IDENTIFIER_STABILITY_METHOD_DURATION</full_name>
        <value><![CDATA["identifier.stability.method.duration"]]></value>
        <docblock line="135">
          <description><![CDATA[One of four possible values for the descriptor IDENTIFIER_STABILITY.]]></description>
          <long-description><![CDATA[<p>Indicates that identifiers may change between method calls.</p>]]></long-description>
          <tag line="135" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="150" package="phpcr\interfaces">
        <name>IDENTIFIER_STABILITY_SAVE_DURATION</name>
        <full_name>IDENTIFIER_STABILITY_SAVE_DURATION</full_name>
        <value><![CDATA["identifier.stability.save.duration"]]></value>
        <docblock line="143">
          <description><![CDATA[One of four possible values for the descriptor IDENTIFIER_STABILITY.]]></description>
          <long-description><![CDATA[<p>Indicates that identifiers are guaranteed stable within a single
save/refresh cycle.</p>]]></long-description>
          <tag line="143" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="159" package="phpcr\interfaces">
        <name>IDENTIFIER_STABILITY_SESSION_DURATION</name>
        <full_name>IDENTIFIER_STABILITY_SESSION_DURATION</full_name>
        <value><![CDATA["identifier.stability.session.duration"]]></value>
        <docblock line="152">
          <description><![CDATA[One of four possible values for the descriptor IDENTIFIER_STABILITY.]]></description>
          <long-description><![CDATA[<p>Indicates that identifiers are guaranteed stable within a single
session.</p>]]></long-description>
          <tag line="152" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="167" package="phpcr\interfaces">
        <name>IDENTIFIER_STABILITY_INDEFINITE_DURATION</name>
        <full_name>IDENTIFIER_STABILITY_INDEFINITE_DURATION</full_name>
        <value><![CDATA["identifier.stability.indefinite.duration"]]></value>
        <docblock line="161">
          <description><![CDATA[One of four possible values for the descriptor IDENTIFIER_STABILITY.]]></description>
          <long-description><![CDATA[<p>Indicates that identifiers are guaranteed to be stable forever.</p>]]></long-description>
          <tag line="161" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="175" package="phpcr\interfaces">
        <name>OPTION_XML_EXPORT_SUPPORTED</name>
        <full_name>OPTION_XML_EXPORT_SUPPORTED</full_name>
        <value><![CDATA["option.xml.export.supported"]]></value>
        <docblock line="169">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if XML export is
supported.</p>]]></long-description>
          <tag line="169" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="183" package="phpcr\interfaces">
        <name>OPTION_XML_IMPORT_SUPPORTED</name>
        <full_name>OPTION_XML_IMPORT_SUPPORTED</full_name>
        <value><![CDATA["option.xml.import.supported"]]></value>
        <docblock line="177">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if XML import is
supported.</p>]]></long-description>
          <tag line="177" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="191" package="phpcr\interfaces">
        <name>OPTION_UNFILED_CONTENT_SUPPORTED</name>
        <full_name>OPTION_UNFILED_CONTENT_SUPPORTED</full_name>
        <value><![CDATA["option.unfiled.content.supported"]]></value>
        <docblock line="185">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if unfiled content
is supported.</p>]]></long-description>
          <tag line="185" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="199" package="phpcr\interfaces">
        <name>OPTION_VERSIONING_SUPPORTED</name>
        <full_name>OPTION_VERSIONING_SUPPORTED</full_name>
        <value><![CDATA["option.versioning.supported"]]></value>
        <docblock line="193">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if full versioning
is supported.</p>]]></long-description>
          <tag line="193" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="207" package="phpcr\interfaces">
        <name>OPTION_SIMPLE_VERSIONING_SUPPORTED</name>
        <full_name>OPTION_SIMPLE_VERSIONING_SUPPORTED</full_name>
        <value><![CDATA["option.simple.versioning.supported"]]></value>
        <docblock line="201">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if simple
versioning is supported.</p>]]></long-description>
          <tag line="201" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="215" package="phpcr\interfaces">
        <name>OPTION_ACTIVITIES_SUPPORTED</name>
        <full_name>OPTION_ACTIVITIES_SUPPORTED</full_name>
        <value><![CDATA["option.activities.supported"]]></value>
        <docblock line="209">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if activities are
supported.</p>]]></long-description>
          <tag line="209" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="223" package="phpcr\interfaces">
        <name>OPTION_BASELINES_SUPPORTED</name>
        <full_name>OPTION_BASELINES_SUPPORTED</full_name>
        <value><![CDATA["option.baselines.supported"]]></value>
        <docblock line="217">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if configurations
and baselines are supported.</p>]]></long-description>
          <tag line="217" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="231" package="phpcr\interfaces">
        <name>OPTION_ACCESS_CONTROL_SUPPORTED</name>
        <full_name>OPTION_ACCESS_CONTROL_SUPPORTED</full_name>
        <value><![CDATA["option.access.control.supported"]]></value>
        <docblock line="225">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if access control
is supported.</p>]]></long-description>
          <tag line="225" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="239" package="phpcr\interfaces">
        <name>OPTION_LOCKING_SUPPORTED</name>
        <full_name>OPTION_LOCKING_SUPPORTED</full_name>
        <value><![CDATA["option.locking.supported"]]></value>
        <docblock line="233">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if locking is
supported.</p>]]></long-description>
          <tag line="233" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="247" package="phpcr\interfaces">
        <name>OPTION_OBSERVATION_SUPPORTED</name>
        <full_name>OPTION_OBSERVATION_SUPPORTED</full_name>
        <value><![CDATA["option.observation.supported"]]></value>
        <docblock line="241">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if asynchronous
observation is supported.</p>]]></long-description>
          <tag line="241" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="255" package="phpcr\interfaces">
        <name>OPTION_JOURNALED_OBSERVATION_SUPPORTED</name>
        <full_name>OPTION_JOURNALED_OBSERVATION_SUPPORTED</full_name>
        <value><![CDATA["option.journaled.observation.supported"]]></value>
        <docblock line="249">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if journaled
observation is supported.</p>]]></long-description>
          <tag line="249" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="263" package="phpcr\interfaces">
        <name>OPTION_RETENTION_SUPPORTED</name>
        <full_name>OPTION_RETENTION_SUPPORTED</full_name>
        <value><![CDATA["option.retention.supported"]]></value>
        <docblock line="257">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if retention and
hold are supported.</p>]]></long-description>
          <tag line="257" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="271" package="phpcr\interfaces">
        <name>OPTION_LIFECYCLE_SUPPORTED</name>
        <full_name>OPTION_LIFECYCLE_SUPPORTED</full_name>
        <value><![CDATA["option.lifecycle.supported"]]></value>
        <docblock line="265">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if lifecycles are
supported.</p>]]></long-description>
          <tag line="265" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="279" package="phpcr\interfaces">
        <name>OPTION_TRANSACTIONS_SUPPORTED</name>
        <full_name>OPTION_TRANSACTIONS_SUPPORTED</full_name>
        <value><![CDATA["option.transactions.supported"]]></value>
        <docblock line="273">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if transactions
are supported.</p>]]></long-description>
          <tag line="273" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="287" package="phpcr\interfaces">
        <name>OPTION_WORKSPACE_MANAGEMENT_SUPPORTED</name>
        <full_name>OPTION_WORKSPACE_MANAGEMENT_SUPPORTED</full_name>
        <value><![CDATA["option.workspace.management.supported"]]></value>
        <docblock line="281">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if workspace
management is supported.</p>]]></long-description>
          <tag line="281" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="295" package="phpcr\interfaces">
        <name>OPTION_UPDATE_PRIMARY_NODETYPE_SUPPORTED</name>
        <full_name>OPTION_UPDATE_PRIMARY_NODETYPE_SUPPORTED</full_name>
        <value><![CDATA["option.update.primary.nodetype.supported"]]></value>
        <docblock line="289">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if the primary
node type of an existing node can be updated.</p>]]></long-description>
          <tag line="289" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="303" package="phpcr\interfaces">
        <name>OPTION_UPDATE_MIXIN_NODETYPES_SUPPORTED</name>
        <full_name>OPTION_UPDATE_MIXIN_NODETYPES_SUPPORTED</full_name>
        <value><![CDATA["option.update.mixin.nodetypes.supported"]]></value>
        <docblock line="297">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if the mixin node
types of an existing node can be added and removed.</p>]]></long-description>
          <tag line="297" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="311" package="phpcr\interfaces">
        <name>OPTION_SHAREABLE_NODES_SUPPORTED</name>
        <full_name>OPTION_SHAREABLE_NODES_SUPPORTED</full_name>
        <value><![CDATA["option.shareable.nodes.supported"]]></value>
        <docblock line="305">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if the creation of
shareable nodes is supported.</p>]]></long-description>
          <tag line="305" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="319" package="phpcr\interfaces">
        <name>OPTION_NODE_TYPE_MANAGEMENT_SUPPORTED</name>
        <full_name>OPTION_NODE_TYPE_MANAGEMENT_SUPPORTED</full_name>
        <value><![CDATA["option.node.type.management.supported"]]></value>
        <docblock line="313">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if node type
management is supported.</p>]]></long-description>
          <tag line="313" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="327" package="phpcr\interfaces">
        <name>OPTION_NODE_AND_PROPERTY_WITH_SAME_NAME_SUPPORTED</name>
        <full_name>OPTION_NODE_AND_PROPERTY_WITH_SAME_NAME_SUPPORTED</full_name>
        <value><![CDATA["option.node.and.property.with.same.name.supported"]]></value>
        <docblock line="321">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if node and
property with same name is supported.</p>]]></long-description>
          <tag line="321" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="349" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_INHERITANCE</name>
        <full_name>NODE_TYPE_MANAGEMENT_INHERITANCE</full_name>
        <value><![CDATA["node.type.management.inheritance"]]></value>
        <docblock line="329">
          <description><![CDATA[Key to string descriptor.]]></description>
          <long-description><![CDATA[<p>Returns one of the following
RepositoryInterface constants indicating the level of support for node
type inheritance:</p>

<ul>
<li><p>NODE_TYPE_MANAGEMENT_INHERITANCE_MINIMAL Registration of primary node
 types is limited to those which have onlynt:base as supertype.
 Registration of mixin node types is limited to those without any
 supertypes.</p></li>
<li><p>NODE_TYPE_MANAGEMENT_INHERITANCE_SINGLE Registration of primary node
 types is limited to those with exactly one supertype. Registration
 of mixin node types is limited to those with at most one supertype.</p></li>
<li><p>NODE_TYPE_MANAGEMENT_INHERITANCE_MULTIPLE Primary node types can be
 registered with one or more supertypes. Mixin node types can be
 registered with zero or more supertypes.</p></li>
</ul>]]></long-description>
          <tag line="329" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="361" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_INHERITANCE_MINIMAL</name>
        <full_name>NODE_TYPE_MANAGEMENT_INHERITANCE_MINIMAL</full_name>
        <value><![CDATA["node.type.management.inheritance.minimal"]]></value>
        <docblock line="351">
          <description><![CDATA[One of three possible values for the descriptor
NODE_TYPE_MANAGEMENT_INHERITANCE.]]></description>
          <long-description><![CDATA[<p>Indicates that registration of primary node types is limited to those
which have only nt:base as supertype. Registration of mixin node types
is limited to those without any supertypes.</p>]]></long-description>
          <tag line="351" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="373" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_INHERITANCE_SINGLE</name>
        <full_name>NODE_TYPE_MANAGEMENT_INHERITANCE_SINGLE</full_name>
        <value><![CDATA["node.type.management.inheritance.single"]]></value>
        <docblock line="363">
          <description><![CDATA[One of three possible values for the descriptor
NODE_TYPE_MANAGEMENT_INHERITANCE.]]></description>
          <long-description><![CDATA[<p>Indicates that registration of primary node types is limited to those
with exactly one supertype. Registration of mixin node types is limited
to those with at most one supertype.</p>]]></long-description>
          <tag line="363" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="385" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_INHERITANCE_MULTIPLE</name>
        <full_name>NODE_TYPE_MANAGEMENT_INHERITANCE_MULTIPLE</full_name>
        <value><![CDATA["node.type.management.inheritance.multiple"]]></value>
        <docblock line="375">
          <description><![CDATA[One of three possible values for the descriptor
NODE_TYPE_MANAGEMENT_INHERITANCE.]]></description>
          <long-description><![CDATA[<p>Indicates that primary node types can be registered with one or more
supertypes. Mixin node types can be registered with zero or more
supertypes.</p>]]></long-description>
          <tag line="375" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="393" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_OVERRIDES_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_OVERRIDES_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.overrides.supported"]]></value>
        <docblock line="387">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if override of
inherited property or child node definitions is supported.</p>]]></long-description>
          <tag line="387" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="401" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_PRIMARY_ITEM_NAME_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_PRIMARY_ITEM_NAME_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.primary.item.name.supported"]]></value>
        <docblock line="395">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if primary items
are supported.</p>]]></long-description>
          <tag line="395" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="409" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_ORDERABLE_CHILD_NODES_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_ORDERABLE_CHILD_NODES_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.orderable.child.nodes.supported"]]></value>
        <docblock line="403">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if preservation of
child node ordering is supported.</p>]]></long-description>
          <tag line="403" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="417" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_RESIDUAL_DEFINITIONS_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_RESIDUAL_DEFINITIONS_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.residual.definitions.supported"]]></value>
        <docblock line="411">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if residual
property and child node definitions are supported.</p>]]></long-description>
          <tag line="411" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="425" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_AUTOCREATED_DEFINITIONS_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_AUTOCREATED_DEFINITIONS_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.autocreated.definitions.supported"]]></value>
        <docblock line="419">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if autocreated
properties and child nodes are supported.</p>]]></long-description>
          <tag line="419" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="433" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_SAME_NAME_SIBLINGS_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_SAME_NAME_SIBLINGS_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.same.name.siblings.supported"]]></value>
        <docblock line="427">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if same-name
sibling child nodes are supported.</p>]]></long-description>
          <tag line="427" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="444" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_PROPERTY_TYPES</name>
        <full_name>NODE_TYPE_MANAGEMENT_PROPERTY_TYPES</full_name>
        <value><![CDATA["node.type.management.property.types"]]></value>
        <docblock line="435">
          <description><![CDATA[Key to an integer[] descriptor.]]></description>
          <long-description><![CDATA[<p>Returns an array holding the
PropertyType constants for the property types (including
UNDEFINED, if supported) that a registered node type can specify, or a
zero-length array if registered node types cannot specify property
definitions.</p>]]></long-description>
          <tag line="435" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="452" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_MULTIVALUED_PROPERTIES_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_MULTIVALUED_PROPERTIES_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.multivalued.properties.supported"]]></value>
        <docblock line="446">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if multivalue
properties are supported.</p>]]></long-description>
          <tag line="446" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="460" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_MULTIPLE_BINARY_PROPERTIES_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_MULTIPLE_BINARY_PROPERTIES_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.multiple.binary.properties.supported"]]></value>
        <docblock line="454">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if registration of
a node types with more than one BINARY property is permitted.</p>]]></long-description>
          <tag line="454" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="468" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_VALUE_CONSTRAINTS_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_VALUE_CONSTRAINTS_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.value.constraints.supported"]]></value>
        <docblock line="462">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only value-constraints
are supported.</p>]]></long-description>
          <tag line="462" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="478" package="phpcr\interfaces">
        <name>NODE_TYPE_MANAGEMENT_UPDATE_IN_USE_SUPPORTED</name>
        <full_name>NODE_TYPE_MANAGEMENT_UPDATE_IN_USE_SUPPORTED</full_name>
        <value><![CDATA["node.type.management.update.in.use.suported"]]></value>
        <docblock line="470">
          <description><![CDATA[Key to boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Indicates that you can change node definitions
that are in-use by existing nodes</p>

<p>Note the typo of the value is also in JCR. see https://github.com/phpcr/phpcr/pull/43#issuecomment-8727677</p>]]></long-description>
          <tag line="470" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="487" package="phpcr\interfaces">
        <name>QUERY_LANGUAGES</name>
        <full_name>QUERY_LANGUAGES</full_name>
        <value><![CDATA["query.languages"]]></value>
        <docblock line="480">
          <description><![CDATA[Key to a string[] descriptor.]]></description>
          <long-description><![CDATA[<p>Returns an array holding the constants
representing the supported query languages, or a zero-length if query is
not supported.</p>]]></long-description>
          <tag line="480" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="495" package="phpcr\interfaces">
        <name>QUERY_STORED_QUERIES_SUPPORTED</name>
        <full_name>QUERY_STORED_QUERIES_SUPPORTED</full_name>
        <value><![CDATA["query.stored.queries.supported"]]></value>
        <docblock line="489">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if stored queries
are supported.</p>]]></long-description>
          <tag line="489" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="503" package="phpcr\interfaces">
        <name>QUERY_FULL_TEXT_SEARCH_SUPPORTED</name>
        <full_name>QUERY_FULL_TEXT_SEARCH_SUPPORTED</full_name>
        <value><![CDATA["query.full.text.search.supported"]]></value>
        <docblock line="497">
          <description><![CDATA[Key to a boolean descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if and only if full-text
search is supported.</p>]]></long-description>
          <tag line="497" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="517" package="phpcr\interfaces">
        <name>QUERY_JOINS</name>
        <full_name>QUERY_JOINS</full_name>
        <value><![CDATA["query.joins"]]></value>
        <docblock line="505">
          <description><![CDATA[Key to String descriptor.]]></description>
          <long-description><![CDATA[<p>Returns one of the following
RepositoryInterface constants indicating the level of support for joins
in queries:</p>

<ul>
<li>QUERY_JOINS_NONE - Joins are not supported. Queries are limited to a
 single selector.</li>
<li>QUERY_JOINS_INNER - Inner joins are supported.</li>
<li>QUERY_JOINS_INNER_OUTER - Inner and outer joins are supported.</li>
</ul>]]></long-description>
          <tag line="505" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="525" package="phpcr\interfaces">
        <name>QUERY_JOINS_NONE</name>
        <full_name>QUERY_JOINS_NONE</full_name>
        <value><![CDATA["query.joins.none"]]></value>
        <docblock line="519">
          <description><![CDATA[One of three possible values for the descriptor QUERY_JOINS .]]></description>
          <long-description><![CDATA[<p>Indicates
that joins are not supported. Queries are limited to a single selector.</p>]]></long-description>
          <tag line="519" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="533" package="phpcr\interfaces">
        <name>QUERY_JOINS_INNER</name>
        <full_name>QUERY_JOINS_INNER</full_name>
        <value><![CDATA["query.joins.inner"]]></value>
        <docblock line="527">
          <description><![CDATA[One of three possible values for the descriptor QUERY_JOINS .]]></description>
          <long-description><![CDATA[<p>Indicates
that inner joins are supported.</p>]]></long-description>
          <tag line="527" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="541" package="phpcr\interfaces">
        <name>QUERY_JOINS_INNER_OUTER</name>
        <full_name>QUERY_JOINS_INNER_OUTER</full_name>
        <value><![CDATA["query.joins.inner.outer"]]></value>
        <docblock line="535">
          <description><![CDATA[One of three possible values for the descriptor QUERY_JOINS .]]></description>
          <long-description><![CDATA[<p>Indicates
that inner and outer joins are supported.</p>]]></long-description>
          <tag line="535" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="582" package="phpcr\interfaces">
        <name>login</name>
        <full_name>login</full_name>
        <docblock line="543">
          <description><![CDATA[Authenticates the user using the supplied credentials.]]></description>
          <long-description><![CDATA[<p>If workspaceName is recognized as the name of an existing workspace in
the repository and authorization to access that workspace is granted,
then a new Session object is returned. The format of the string
workspaceName depends upon the implementation. If credentials is null,
it is assumed that authentication is handled by a mechanism external to
the repository itself and that the repository implementation exists
within a context (for example, an application server) that allows it to
handle authorization of the request for access to the specified
workspace.</p>

<p>If workspaceName is null, a default workspace is automatically selected
by the repository implementation. This may, for example, be the "home
workspace" of the user whose credentials were passed, though this is
entirely up to the configuration and implementation of the repository.
Alternatively, it may be a "null workspace" that serves only to provide
the method WorkspaceInterface::getAccessibleWorkspaceNames(), allowing
the client to select from among available "real" workspaces.</p>

<p><b>Note:</b> The Java API defines this method with multiple differing
signatures.</p>]]></long-description>
          <tag line="543" name="param" description="The credentials of the user" type="\PHPCR\CredentialsInterface" variable="$credentials">
            <type by_reference="false">\PHPCR\CredentialsInterface</type>
          </tag>
          <tag line="543" name="param" description="the name of a workspace" type="string" variable="$workspaceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="543" name="return" description="a valid session for the user to access&#10;     the repository" type="\PHPCR\SessionInterface">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
          <tag line="543" name="throws" description="if authentication or authorization (for&#10;     the specified workspace) fails" type="\PHPCR\LoginException">
            <type by_reference="false">\PHPCR\LoginException</type>
          </tag>
          <tag line="543" name="throws" description="if the specified workspaceName&#10;     is not recognized" type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="543" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="543" name="api" description=""/>
        </docblock>
        <argument line="582">
          <name>$credentials</name>
          <default><![CDATA[null]]></default>
          <type>\PHPCR\CredentialsInterface</type>
        </argument>
        <argument line="582">
          <name>$workspaceName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="597" package="phpcr\interfaces">
        <name>getDescriptorKeys</name>
        <full_name>getDescriptorKeys</full_name>
        <docblock line="584">
          <description><![CDATA[Returns a string array holding all descriptor keys available for this
implementation.]]></description>
          <long-description><![CDATA[<p>Both, the standard descriptors defined by the string constants in this
interface and any implementation-specific descriptors. Used in
conjunction with getDescriptor($key) to query information about this
repository implementation.</p>]]></long-description>
          <tag line="584" name="return" description="a string array holding all descriptor keys" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="584" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="612" package="phpcr\interfaces">
        <name>isStandardDescriptor</name>
        <full_name>isStandardDescriptor</full_name>
        <docblock line="599">
          <description><![CDATA[Determines if the given identifier is a standard descriptor.]]></description>
          <long-description><![CDATA[<p>Returns true if $key is a standard descriptor defined by the string
constants in this interface and false if it is either a valid
implementation-specific key or not a valid key.</p>]]></long-description>
          <tag line="599" name="param" description="a descriptor key." type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="599" name="return" description="whether $key is a standard descriptor." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="599" name="api" description=""/>
        </docblock>
        <argument line="612">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="627" package="phpcr\interfaces">
        <name>getDescriptor</name>
        <full_name>getDescriptor</full_name>
        <docblock line="614">
          <description><![CDATA[Get the value(s) for this key.]]></description>
          <long-description><![CDATA[<p>If this is documented as a boolean property, this method returns a
boolean, otherwise a string.</p>]]></long-description>
          <tag line="614" name="param" description="a descriptor key." type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="614" name="return" description="a descriptor value in string or boolean form or an array&#10;     of strings or booleans for multivalue descriptors" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="614" name="api" description=""/>
        </docblock>
        <argument line="627">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/ItemNotFoundException.php" hash="2627c35d5b1116f685082d3634bf1c13" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>ItemNotFoundException</name>
      <full_name>\PHPCR\ItemNotFoundException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by methods of Item, Node and Workspace when an item is not found.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/NamespaceException.php" hash="a774c372329491c0c1edbd4019e93d23" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="38" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>NamespaceException</name>
      <full_name>\PHPCR\NamespaceException</full_name>
      <docblock line="27">
        <description><![CDATA[Definition of an Exception to be thrown in case of a namespace issue within
a session.]]></description>
        <long-description><![CDATA[<p>Exception thrown by SessionInterface::setNamespacePrefix()
if the specified uri is not registered in the NamespaceRegistry.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/CredentialsInterface.php" hash="0cf0154a6c5211d9bb79422d9a0428a8" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="38" package="phpcr\interfaces">
      <name>CredentialsInterface</name>
      <full_name>\PHPCR\CredentialsInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Interface for all credentials that may be passed to the Repository::login()
method.]]></description>
        <long-description><![CDATA[<p>Serves as a marker interface that all repositories must implement when
providing a credentials class. See {@link SimpleCredentials} and
{@link GuestCredentials} for examples of such a class.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Version/LabelExistsVersionException.php" hash="3af65510756800f2c0239a26a9846197" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Version" line="36" package="phpcr\exceptions">
      <extends>\PHPCR\Version\VersionException</extends>
      <name>LabelExistsVersionException</name>
      <full_name>\PHPCR\Version\LabelExistsVersionException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by VersionHistoryInterface::addVersionLabel() if moveLabel
is set to false and an attempt is made to add a label that already exists in
the VersionHistory.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Version/VersionInterface.php" hash="9dad6449a173df7bc0cb07d8790c7e18" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Version" line="35" package="phpcr\interfaces">
      <name>VersionInterface</name>
      <full_name>\PHPCR\Version\VersionInterface</full_name>
      <extends>\PHPCR\NodeInterface</extends>
      <docblock line="27">
        <description><![CDATA[A Version object wraps an nt:version node.]]></description>
        <long-description><![CDATA[<p>It provides convenient access to
version information.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="47" package="phpcr\interfaces">
        <name>getContainingHistory</name>
        <full_name>getContainingHistory</full_name>
        <docblock line="37">
          <description><![CDATA[Returns the VersionHistory that contains this Version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="return" description="the VersionHistory that&#10;     contains this Version" type="\PHPCR\Version\VersionHistoryInterface">
            <type by_reference="false">\PHPCR\Version\VersionHistoryInterface</type>
          </tag>
          <tag line="37" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="37" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="60" package="phpcr\interfaces">
        <name>getCreated</name>
        <full_name>getCreated</full_name>
        <docblock line="49">
          <description><![CDATA[Returns the date this version was created.]]></description>
          <long-description><![CDATA[<p>This corresponds to the
value of the jcr:created property in the nt:version node that represents
this version.</p>]]></long-description>
          <tag line="49" name="return" description="the creation date" type="\DateTime">
            <type by_reference="false">\DateTime</type>
          </tag>
          <tag line="49" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="49" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="82" package="phpcr\interfaces">
        <name>getLinearSuccessor</name>
        <full_name>getLinearSuccessor</full_name>
        <docblock line="62">
          <description><![CDATA[Get the next linear successor version of this version.]]></description>
          <long-description><![CDATA[<p>Assuming that this Version object was acquired through a Workspace $w
and is within the VersionHistory $h, this method returns the successor
of this version along the same line of descent as is returned by
$h->getAllLinearVersions() where $h was also acquired through $w.</p>

<p>Note that under simple versioning the behavior of this method is
equivalent to getting the unique successor (if any) of this version.</p>]]></long-description>
          <tag line="62" name="return" description="a Version or null if no linear successor&#10;     exists." type="\PHPCR\VersionInterface">
            <type by_reference="false">\PHPCR\VersionInterface</type>
          </tag>
          <tag line="62" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="62" name="see" description="\PHPCR\Version\VersionHistory::getAllLinearVersions()" refers="\PHPCR\Version\VersionHistory::getAllLinearVersions()"/>
          <tag line="62" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="97" package="phpcr\interfaces">
        <name>getSuccessors</name>
        <full_name>getSuccessors</full_name>
        <docblock line="84">
          <description><![CDATA[Returns the successor versions of this version.]]></description>
          <long-description><![CDATA[<p>This corresponds to returning all the nt:version nodes referenced by the
jcr:successors multi-value property in the nt:version node that
represents this version.</p>]]></long-description>
          <tag line="84" name="return" description="of \PHPCR\Version\VersionInterface" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="84" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="119" package="phpcr\interfaces">
        <name>getLinearPredecessor</name>
        <full_name>getLinearPredecessor</full_name>
        <docblock line="99">
          <description><![CDATA[Get the next linear predecessor version of this version.]]></description>
          <long-description><![CDATA[<p>Assuming that this Version object was acquired through a Workspace $w
and is within the VersionHistory $h, this method returns the predecessor
ofthis version along the same line of descent as is returned by
$h->getAllLinearVersions() where $h was also acquired through $w.</p>

<p>Note that under simple versioning the behavior of this method is
equivalent to getting the unique predecessor (if any) of this version.</p>]]></long-description>
          <tag line="99" name="return" description="a Version or null if no linear&#10;     predecessor exists." type="\PHPCR\Version\VersionInterface">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="99" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="99" name="see" description="\PHPCR\Version\VersionHistory::getAllLinearVersions()" refers="\PHPCR\Version\VersionHistory::getAllLinearVersions()"/>
          <tag line="99" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="135" package="phpcr\interfaces">
        <name>getPredecessors</name>
        <full_name>getPredecessors</full_name>
        <docblock line="121">
          <description><![CDATA[Returns the predecessor versions of this version.]]></description>
          <long-description><![CDATA[<p>In both simple and full versioning repositories, this method returns the
predecessor versions of this version. This corresponds to returning all
the nt:version nodes whose jcr:successors property includes a reference
to the nt:version node that represents this version.</p>]]></long-description>
          <tag line="121" name="return" description="of \PHPCR\Version\VersionInterface" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="121" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="121" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="151" package="phpcr\interfaces">
        <name>getFrozenNode</name>
        <full_name>getFrozenNode</full_name>
        <docblock line="137">
          <description><![CDATA[Returns a snapshot of the node as it was at this version.]]></description>
          <long-description><![CDATA[<p>All properties are at under their original names except for uuid,
primaryType and mixinTypes. The frozen node has his own uuid, and is of
type nt:frozenNode. The original values at the time of the snapshots are
provided as jcr:frozenUuid, jcr:frozenPrimaryType, jcr:frozenMixinTypes</p>]]></long-description>
          <tag line="137" name="return" description="a Node object" type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="137" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="137" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Version/ActivityViolationException.php" hash="d3cd89c15280ccca8244f7986c2b3f00" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Version" line="41" package="phpcr\exceptions">
      <extends>\PHPCR\Version\VersionException</extends>
      <name>ActivityViolationException</name>
      <full_name>\PHPCR\Version\ActivityViolationException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception will be thrown by NodeInterface::checkout() and
NodeInterface::checkpoint() if an activity A is present on the current
session and any of the following conditions is met:]]></description>
        <long-description><![CDATA[<ul>
<li>There already is a node in another workspace that has a checked-out node
for the version history of N whose jcr:activity references A.</li>
<li>There is a version in the version history of N that is not a predecessor
of N but whose jcr:activity references A.</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Version/VersionException.php" hash="9e44f8a9b372bee4b0fe8a5cad7b9647" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Version" line="35" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>VersionException</name>
      <full_name>\PHPCR\Version\VersionException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by VersionInterface::addSuccessor() if an invalid version
graph operation is attempted.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Version/VersionManagerInterface.php" hash="b5818e3f0991c5b8a04bc5970e08570e" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Version" line="44" package="phpcr\interfaces">
      <name>VersionManagerInterface</name>
      <full_name>\PHPCR\Version\VersionManagerInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The VersionManager object is accessed via
WorkspaceInterface::getVersionManager().]]></description>
        <long-description><![CDATA[<p>It provides methods for:</p>

<ul>
<li>Version graph functionality (version history, base version, successors
 predecessors)</li>
<li>Basic version operations (checkin, checkout, checkpoint)</li>
<li>Restore feature</li>
<li>Label feature</li>
<li>Merge feature</li>
<li>Configuration feature</li>
<li>Activity feature</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="92" package="phpcr\interfaces">
        <name>checkin</name>
        <full_name>checkin</full_name>
        <docblock line="46">
          <description><![CDATA[Creates for the versionable node at absPath a new version with a system
generated version name and returns that version (which will be the new
base version of this node).]]></description>
          <long-description><![CDATA[<p>Sets the jcr:checkedOut property to false
thus putting the node into the checked-in state. This means that the node
and its connected non-versionable subgraph become read-only. A node's
connected non-versionable subgraph is the set of non-versionable descendant
nodes reachable from that node through child links without encountering
any versionable nodes. In other words, the read-only status flows down
from the checked-in node along every child link until either a versionable
node is encountered or an item with no children is encountered. In a
system that supports only simple versioning the connected non-versionable
subgraph will be equivalent to the whole subgraph, since simple-versionable
nodes cannot have simple-versionable descendants.</p>

<p>Read-only status means that an item cannot be altered by the client using
standard API methods (addNode, setProperty, etc.). The only exceptions to
this rule are the restore(), restoreByLabel(), merge() and Node::update()
operations; these do not respect read-only status due to check-in. Note
that remove of a read-only node is possible, as long as its parent is not
read-only (since removal is an alteration of the parent node).</p>

<p>If this node is already checked-in, this method has no effect but returns
the current base version of this node.</p>

<p>If checkin succeeds, the change to the jcr:isCheckedOut property is
dispatched immediately.</p>]]></long-description>
          <tag line="46" name="param" description="an absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="return" description="the created version." type="\PHPCR\Version\VersionInterface">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="46" name="throws" description="if jcr:predecessors does not&#10;     contain at least one value or if a child item of the node at&#10;     absPath has an OnParentVersion status of ABORT. This includes the&#10;     case where an unresolved merge failure exists on the node, as&#10;     indicated by the presence of a jcr:mergeFailed property." type="\PHPCR\Verson\VersionException">
            <type by_reference="false">\PHPCR\Verson\VersionException</type>
          </tag>
          <tag line="46" name="throws" description="If the node at&#10;     $absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="46" name="throws" description="If unsaved changes exist on the&#10;     node at $absPath." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="46" name="throws" description="if a lock prevents the operation." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="46" name="throws" description="If another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="46" name="api" description=""/>
        </docblock>
        <argument line="92">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="123" package="phpcr\interfaces">
        <name>checkout</name>
        <full_name>checkout</full_name>
        <docblock line="94">
          <description><![CDATA[Sets the versionable node at $absPath to checked-out status by setting
its jcr:isCheckedOut property to true.]]></description>
          <long-description><![CDATA[<p>Under full versioning it also sets
the jcr:predecessors property to be a reference to the current base
version (the same value as held in jcr:baseVersion).</p>

<p>This method puts the node into the checked-out state, making it and its
connected non-versionable subgraph no longer read-only (see checkin() for
an explanation of the term "connected non-versionable subgraph". Under
simple versioning this will simply be the whole subgraph).</p>

<p>If successful, these changes are persisted immediately, there is no need
to call save.</p>

<p>If this node is already checked-out, this method has no effect.</p>]]></long-description>
          <tag line="94" name="param" description="an absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="94" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="94" name="throws" description="If the node at&#10;     absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="94" name="throws" description="if a lock prevents the checkout." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="94" name="throws" description="If the checkout&#10;     conflicts with the activity present on the current session." type="\PHPCR\Version\ActivityViolationException">
            <type by_reference="false">\PHPCR\Version\ActivityViolationException</type>
          </tag>
          <tag line="94" name="throws" description="If another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="94" name="api" description=""/>
        </docblock>
        <argument line="123">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="148" package="phpcr\interfaces">
        <name>checkpoint</name>
        <full_name>checkpoint</full_name>
        <docblock line="125">
          <description><![CDATA[Performs a checkin() followed by a checkout() on the versionable node at
$absPath.]]></description>
          <long-description><![CDATA[<p>If this node is already checked-in, this method is equivalent to checkout().</p>]]></long-description>
          <tag line="125" name="param" description="an absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="125" name="return" description="the created version." type="\PHPCR\Version\VersionInterface">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="125" name="throws" description="if a child item of the node at&#10;     absPath has an OnParentVersion of ABORT. This includes the case&#10;     where an unresolved merge failure exists on the node, as indicated&#10;     by the presence of the jcr:mergeFailed." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="125" name="throws" description="if the node at&#10;     absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="125" name="throws" description="if there are unsaved changes&#10;     pending on the node at absPath." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="125" name="throws" description="if a lock prevents the operation." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="125" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="125" name="api" description=""/>
        </docblock>
        <argument line="148">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="174" package="phpcr\interfaces">
        <name>isCheckedOut</name>
        <full_name>isCheckedOut</full_name>
        <docblock line="150">
          <description><![CDATA[Check whether the node at path is checked out.]]></description>
          <long-description><![CDATA[<p>Returns true if the node at $absPath is either</p>

<ul>
<li>versionable (full or simple) and currently checked-out,</li>
<li>non-versionable and its nearest versionable ancestor is checked-out or</li>
<li>non-versionable and it has no versionable ancestor.</li>
</ul>

<p>Returns false if the node at $absPath is either</p>

<ul>
<li>versionable (full or simple) and currently checked-in or</li>
<li>non-versionable and its nearest versionable ancestor is checked-in.</li>
</ul>]]></long-description>
          <tag line="150" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="return" description="True, if the node identified by the given path is&#10;     checked out, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="150" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="150" name="api" description=""/>
        </docblock>
        <argument line="174">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="192" package="phpcr\interfaces">
        <name>getVersionHistory</name>
        <full_name>getVersionHistory</full_name>
        <docblock line="176">
          <description><![CDATA[Returns the VersionHistory object of the node at $absPath.]]></description>
          <long-description><![CDATA[<p>This object
provides access to the nt:versionHistory node holding this node's
versions.</p>]]></long-description>
          <tag line="176" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="return" description="a VersionHistory object" type="\PHPCR\Version\VersionHistoryInterface">
            <type by_reference="false">\PHPCR\Version\VersionHistoryInterface</type>
          </tag>
          <tag line="176" name="throws" description="if the node at&#10;     absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="176" name="throws" description="If another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="176" name="api" description=""/>
        </docblock>
        <argument line="192">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="208" package="phpcr\interfaces">
        <name>getBaseVersion</name>
        <full_name>getBaseVersion</full_name>
        <docblock line="194">
          <description><![CDATA[Returns the current base version of the versionable node at absPath.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="194" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="return" description="a Version object." type="\PHPCR\Version\VersionInterface">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="194" name="throws" description="if the node at&#10;     absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="194" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="194" name="api" description=""/>
        </docblock>
        <argument line="208">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="305" package="phpcr\interfaces">
        <name>restore</name>
        <full_name>restore</full_name>
        <docblock line="210">
          <description><![CDATA[Attempt to restore an old version of a node.]]></description>
          <long-description><![CDATA[<p><em>If $absPath is given and $version is a version name:</em>
 Restores the node at $absPath to the state defined by the version with
 the specified version name ($version).
 This method will work regardless of whether the node at absPath is
 checked-in or not.</p>

<p><em>If $absPath is given and $version is a VersionInterface instance:
</em>
 Restores the specified version to $absPath. There must be no existing
 node at $absPath. If one exists, a VersionException is thrown.
 There must be a parent node to the location at $absPath, otherwise a
 PathNotFoundException is thrown.
 If the would-be parent of the location $absPath is actually a property,
 or if a node type restriction would be violated, then a
 ConstraintViolationException is thrown.</p>

<p><em>If $version is VersionInterface instance:</em>
 Restores the node in the current workspace that is the versionable node
 of the specified version to the state reflected in that version.
 This method ignores checked-in status.</p>

<p><em>If $version is an array of VersionInterface instances:</em>
 Restores a set of versions at once. Used in cases where a "chicken and
 egg" problem of mutually referring REFERENCE properties would prevent
 the restore in any serial order.
 The following restrictions apply to the set of versions specified: If S
 is the set of versions being restored simultaneously,
 - For every version V in S that corresponds to a missing node, there
   must also be a parent of V in S.
 - S must contain at least one version that corresponds to an existing
   node in the workspace.
 - No V in S can be a root version (jcr:rootVersion).
 If any of these restrictions does not hold, the restore will fail
 because the system will be unable to determine the path locations to
 which one or more versions are to be restored. In this case a
 VersionException is thrown.
 The versionable nodes in the current workspace that correspond to the
 versions being restored define a set of (one or more) subgraphs.</p>

<p><em>If the restore succeeds the changes made are dispatched immediately;
</em>
there is no need to call save.</p>

<p>If an array of VersionInterface instances is restored, an identifier
collision occurs when the current workspace contains a node outside these
subgraphs that has the same identifier as one of the nodes that would be
introduced by the restore operation into one of these subgraphs.
Else, an identifier collision occurs when a node exists outside the
subgraph rooted at absPath with the same identifier as a node that would
be introduced by the restore operation into the affected subgraph.
The result in such a case is governed by the removeExisting flag. If
$removeExisting is true, then the incoming node takes precedence, and the
existing node (and its subgraph) is removed (if possible; otherwise a
RepositoryException is thrown). If $removeExisting is false, then an
ItemExistsException is thrown and no changes are made. Note that this
applies not only to cases where the restored node itself conflicts with
an existing node but also to cases where a conflict occurs with any node
that would be introduced into the workspace by the restore operation. In
particular, conflicts involving subnodes of the restored node that have
OnParentVersion settings of COPY or VERSION are also governed by the
$removeExisting flag.</p>

<p><b>Note:</b> The Java API defines this with multiple differing
signatures, you need to act accordingly in your implementation.</p>]]></long-description>
          <tag line="210" name="param" description="a boolean flag that governs what happens in case of an identifier collision" type="boolean" variable="$removeExisting">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="210" name="param" description="a version name, an an array of Version objects or a Version object" type="string|array|\PHPCR\Version\VersionInterface" variable="$version">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="210" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="210" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="210" name="throws" description="if the specified version does&#10;     not have a corresponding node in the workspace this VersionManager&#10;     has been created for or if an attempt is made to restore the root&#10;     version (jcr:rootVersion)." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="210" name="throws" description="if $removeExisting is false and an&#10;     identifier collision occurs or a node exists at $absPath." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="210" name="throws" description="if this Session has pending&#10;     unsaved changes." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="210" name="throws" description="if versioning is&#10;     not supported." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="210" name="throws" description="if a lock prevents the restore." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="210" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="210" name="api" description=""/>
        </docblock>
        <argument line="305">
          <name>$removeExisting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="305">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="305">
          <name>$absPath</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="352" package="phpcr\interfaces">
        <name>restoreByLabel</name>
        <full_name>restoreByLabel</full_name>
        <docblock line="307">
          <description><![CDATA[Restores the version of the node at absPath with the specified version
label.]]></description>
          <long-description><![CDATA[<p>If this node is not versionable, an
UnsupportedRepositoryOperationException is thrown. If successful, the
change is persisted immediately and there is no need to call save.</p>

<p>This method will work regardless of whether the node at absPath is
checked-in or not.</p>

<p>An identifier collision occurs when a node exists outside the subgraph
rooted at this node with the same identifier as a node that would be
introduced by the restoreByLabel operation into the subgraph at this node.
The result in such a case is governed by the removeExisting flag. If
removeExisting is true, then the incoming node takes precedence, and the
existing node (and its subgraph) is removed (if possible; otherwise a
RepositoryException is thrown). If removeExisting is false, then a
ItemExistsException is thrown and no changes are made. Note that this
applies not only to cases where the restored node itself conflicts with
an existing node but also to cases where a conflict occurs with any node
that would be introduced into the workspace by the restore operation. In
particular, conflicts involving subnodes of the restored node that have
OnParentVersion settings of COPY or VERSION are also governed by the
removeExisting flag.</p>]]></long-description>
          <tag line="307" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="307" name="param" description="a String" type="string" variable="$versionLabel">
            <type by_reference="false">string</type>
          </tag>
          <tag line="307" name="param" description="a boolean flag that governs what happens in case of an identifier collision." type="boolean" variable="$removeExisting">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="307" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="307" name="throws" description="if the node at&#10;     absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="307" name="throws" description="if the specified versionLabel&#10;     does not exist in this node's version history." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="307" name="throws" description="if removeExisting is false and an&#10;     identifier collision occurs." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="307" name="throws" description="if a lock prevents the restore." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="307" name="throws" description="if this Session (not&#10;     necessarily the Node at absPath) has pending unsaved changes." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="307" name="throws" description="If another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="307" name="api" description=""/>
        </docblock>
        <argument line="352">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="352">
          <name>$versionLabel</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="352">
          <name>$removeExisting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="443" package="phpcr\interfaces">
        <name>merge</name>
        <full_name>merge</full_name>
        <docblock line="354">
          <description><![CDATA[If an nt:activity Node is given:]]></description>
          <long-description><![CDATA[<p>This method merges the changes that were made under the specified
activity into the current workspace.</p>

<p>An activity A will be associated with a set of versions through the
jcr:activity reference of each version node in the set. We call each
such associated version a member of A.</p>

<p>For each version history H that contains one or more members of A, one
such member will be the latest member of A in H. The latest member of A
in H is the version in H that is a member of A and that has no successor
versions (to any degree) that are also members of A.</p>

<p>The set of versions that are the latest members of A in their respective
version histories is called the change set of A. It fully describes the
changes made under the activity A.</p>

<p>This method performs a shallow merge into the current workspace of each
version in the change set of the activity specified by activityNode. If
there is no corresponding node in this workspace for a given member of
the change set, that member is ignored.</p>

<p>If an absolute path is given:</p>

<p>This method can be thought of as a version-sensitive update.</p>

<p>If isShallow is true, it tests the node at absPath against its
corresponding node in srcWorkspace with respect to the relation between
their respective base versions and either updates the node in question
or not, depending on the outcome of the test.</p>

<p>If isShallow is false, this method recursively tests each versionable
node in the subgraph as mentioned above.</p>

<p>If isShallow is true and this node is not versionable, then this method
returns and no changes are made.</p>

<p>A MergeException is thrown if bestEffort is false and a versionable node
is encountered whose corresponding node's base version is on a divergent
branch from the base version of the node at absPath.</p>

<p>This is a worksapce-write method and therefore any changes are dispatched
immediately.</p>

<p>This method returns an iterator over all versionable nodes in the
subgraph that received a merge result of fail. If bestEffort is false,
this iterator will be empty (since if merge returns successfully,
instead of throwing an exception, it will be because no failures were
encountered).
If bestEffort is true, this iterator will contain all nodes that received
a fail during the course of this merge operation.</p>

<p>See the JCR specifications for more details on the behavior of this
method.</p>

<p>Note: The Java API defines this with multiple differing signatures.</p>]]></long-description>
          <tag line="354" name="param" description="an absolute path or an nt:activity node." type="string|\PHPCR\NodeInterface" variable="$source">
            <type by_reference="false">string</type>
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="354" name="param" description="the name of the source workspace (optional if $source is a Node)." type="string" variable="$srcWorkspace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="354" name="param" description="a boolean (optional if $source is a Node)" type="boolean" variable="$bestEffort">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="354" name="param" description="a boolean (optional)" type="boolean" variable="$isShallow">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="354" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Keys are the Node names, values the corresponding&#10;     NodeInterface instances that received a merge result of &quot;fail&quot; in&#10;     the course of this operation." type="\PHPCR\Version\Iterator">
            <type by_reference="false">\PHPCR\Version\Iterator</type>
          </tag>
          <tag line="354" name="throws" description="- if bestEffort is false and a failed&#10;     merge result is encountered." type="\PHPCR\MergeException">
            <type by_reference="false">\PHPCR\MergeException</type>
          </tag>
          <tag line="354" name="throws" description="if this session (not&#10;     necessarily the node at absPath) has pending unsaved changes." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="354" name="throws" description="if srcWorkspace does not exist." type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="354" name="throws" description="if the current session does not&#10;     have sufficient rights to perform the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="354" name="throws" description="if a lock prevents the merge." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="354" name="throws" description="if the specified node is not an&#10;     nt:activity node." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="354" name="throws" description="if this operation&#10;     is not supported by this implementation." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="354" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="354" name="api" description=""/>
        </docblock>
        <argument line="443">
          <name>$source</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="443">
          <name>$srcWorkspace</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="443">
          <name>$bestEffort</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="443">
          <name>$isShallow</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="527" package="phpcr\interfaces">
        <name>doneMerge</name>
        <full_name>doneMerge</full_name>
        <docblock line="445">
          <description><![CDATA[Completes the merge process with respect to the node at absPath and the
specified version.]]></description>
          <long-description><![CDATA[<p>When the merge(string, string, boolean) method is called on a node, every
versionable node in that subgraph is compared with its corresponding node
in the indicated other workspace and a "merge test result" is determined
indicating one of the following:</p>

<ol>
<li>
  This node will be updated to the state of its correspondee (if the
  base version of the correspondee is more recent in terms of version
  history)
</li><li>
  This node will be left alone (if this node's base version is more
  recent in terms of version history).
</li><li>
  This node will be marked as having failed the merge test (if this
  node's base version is on a different branch of the version history
  from the base version of its corresponding node in the other
  workspace, thus preventing an automatic determination of which is more
  recent).
</li>
</ol>

<p>(See merge() for more details)</p>

<p>In the last case the merge of the non-versionable subgraph (the "content")
of this node must be done by the application (for example, by providing a
merge tool for the user).</p>

<p>Additionally, once the content of the nodes has been merged, their version
graph branches must also be merged. The JCR versioning system provides for
this by keeping a record, for each versionable node that fails the merge
test, of the base version of the corresponding node that caused the merge
failure. This record is kept in the jcr:mergeFailed property of this node.
After a merge, this property will contain one or more (if multiple merges
have been performed) REFERENCEs that point to the "offending versions".</p>

<p>To complete the merge process, the client calls doneMerge(Version v)
passing the version object referred to be the jcr:mergeFailed property
that the client wishes to connect to this node in the version graph. This
has the effect of moving the reference to the indicated version from the
jcr:mergeFailed property of this node to the jcr:predecessors.</p>

<p>If the client chooses not to connect this node to a particular version
referenced in the jcr:mergeFailed property, he calls cancelMerge(String,
Version).
This has the effect of removing the reference to the specified version
from jcr:mergeFailed without adding it to jcr:predecessors.</p>

<p>Once the last reference in jcr:mergeFailed has been either moved to
jcr:predecessors (with doneMerge) or just removed from jcr:mergeFailed
(with cancelMerge) the jcr:mergeFailed property is automatically removed,
thus enabling this node to be checked-in, creating a new version (note
that before the jcr:mergeFailed is removed, its OnParentVersion setting of
ABORT prevents checkin). This new version will have a predecessor
connection to each version for which doneMerge was called, thus joining
those branches of the version graph.</p>

<p>If successful, these changes are dispatched immediately, there is no need
to call save.</p>]]></long-description>
          <tag line="445" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="445" name="param" description="a version referred to by the jcr:mergeFailed property of the node at absPath." type="\PHPCR\Version\VersionInterface" variable="$version">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="445" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="445" name="throws" description="if the version specified is not&#10;     among those referenced in this node's jcr:mergeFailed or if the&#10;     node is currently checked-in." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="445" name="throws" description="if there are unsaved changes&#10;     pending on the node at absPath." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="445" name="throws" description="if the node at&#10;     absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="445" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="445" name="api" description=""/>
        </docblock>
        <argument line="527">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="527">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Version\VersionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="557" package="phpcr\interfaces">
        <name>cancelMerge</name>
        <full_name>cancelMerge</full_name>
        <docblock line="529">
          <description><![CDATA[Cancels the merge process with respect to the node at absPath and the
specified version.]]></description>
          <long-description><![CDATA[<p>See doneMerge(string, Version) for a full explanation. Also see
merge(string, string, boolean) for more details.</p>

<p>If successful, these changes are dispatched immediately, there is no
need to call save.</p>]]></long-description>
          <tag line="529" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="529" name="param" description="a version referred to by the jcr:mergeFailed property of the node at absPath." type="\PHPCR\Version\VersionInterface" variable="$version">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="529" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="529" name="throws" description="if the version specified is not&#10;     among those referenced in the jcr:mergeFailed  property of the node&#10;     at absPath  or if the node is currently checked-in." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="529" name="throws" description="there are unsaved changes&#10;     pending on the node at absPath." type="\PHPCR\InvalidItemStateExceptionif">
            <type by_reference="false">\PHPCR\InvalidItemStateExceptionif</type>
          </tag>
          <tag line="529" name="throws" description="the node at&#10;     absPath is not versionable." type="\PHPCR\UnsupportedRepositoryOperationExceptionif">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationExceptionif</type>
          </tag>
          <tag line="529" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="529" name="api" description=""/>
        </docblock>
        <argument line="557">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="557">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Version\VersionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="586" package="phpcr\interfaces">
        <name>createConfiguration</name>
        <full_name>createConfiguration</full_name>
        <docblock line="559">
          <description><![CDATA[Calling createConfiguration on the node N at absPath creates, in the
configuration storage, a new nt:configuration node whose root is N.]]></description>
          <long-description><![CDATA[<p>A
reference to N is recorded in the jcr:root property of the new
configuration, and a reference to the new configuration is recorded in
the jcr:configuration property of N.</p>

<p>If the specified baseline is null, a new version history is created to
store baselines of the new configuration, and the jcr:baseVersion of the
new configuration references the root of the new version history. If the
specified baseline is not null, the jcr:baseVersion of the new
configuration references the specified baseline.</p>

<p>The changes are persisted immediately, a save is not required.</p>]]></long-description>
          <tag line="559" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="559" name="param" description="a Version" type="\PHPCR\Version\VersionInterface" variable="$baseline">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="559" name="return" description="a new nt:configuration node" type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="559" name="throws" description="if N is not&#10;     versionable." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="559" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="559" name="api" description=""/>
        </docblock>
        <argument line="586">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="586">
          <name>$baseline</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Version\VersionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="605" package="phpcr\interfaces">
        <name>setActivity</name>
        <full_name>setActivity</full_name>
        <docblock line="588">
          <description><![CDATA[This method is called by the client to set the current activity on the
session from which this version manager has been obtained.]]></description>
          <long-description><![CDATA[<p>Changing the
current activity is done by calling setActivity again. Cancelling the
current activity (so that the session has no current activity) is done
by calling setActivity(null). The activity Node is returned.</p>]]></long-description>
          <tag line="588" name="param" description="an activity node" type="\PHPCR\NodeInterface" variable="$activity">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="588" name="return" description="the activity node" type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="588" name="throws" description="if the repository&#10;     does not support activities or if activity is not a nt:activity node." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="588" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="588" name="api" description=""/>
        </docblock>
        <argument line="605">
          <name>$activity</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\NodeInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="619" package="phpcr\interfaces">
        <name>getActivity</name>
        <full_name>getActivity</full_name>
        <docblock line="607">
          <description><![CDATA[Returns the node representing the current activity or null if there is no
current activity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="607" name="return" description="An nt:activity node or null." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="607" name="throws" description="if the repository&#10;     does not support activities." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="607" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="607" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="640" package="phpcr\interfaces">
        <name>createActivity</name>
        <full_name>createActivity</full_name>
        <docblock line="621">
          <description><![CDATA[This method creates a new nt:activity at an implementation-determined
location in the /jcr:system/jcr:activities subgraph.]]></description>
          <long-description><![CDATA[<p>The repository may, but is not required to, use the title as a hint for
what to name the new activity node. The new activity Node is returned.</p>

<p>The new node is dispatched immediately and does not require a save.</p>]]></long-description>
          <tag line="621" name="param" description="The tilte of the activity to be created." type="string" variable="$title">
            <type by_reference="false">string</type>
          </tag>
          <tag line="621" name="return" description="the new activity Node." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="621" name="throws" description="if the repository&#10;     does not support activities." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="621" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="621" name="api" description=""/>
        </docblock>
        <argument line="640">
          <name>$title</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="657" package="phpcr\interfaces">
        <name>removeActivity</name>
        <full_name>removeActivity</full_name>
        <docblock line="642">
          <description><![CDATA[This method removes the given $activityNode.]]></description>
          <long-description><![CDATA[<p>The change is dispatched immediately and does not require a save.</p>]]></long-description>
          <tag line="642" name="param" description="an activity Node" type="\PHPCR\NodeInterface" variable="$activityNode">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="642" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="642" name="throws" description="if the repository&#10;     does not support activities." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="642" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="642" name="api" description=""/>
        </docblock>
        <argument line="657">
          <name>$activityNode</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\NodeInterface</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Version/VersionHistoryInterface.php" hash="b7d997227f4c2c652ec38435a64897ee" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Version" line="39" package="phpcr\interfaces">
      <name>VersionHistoryInterface</name>
      <full_name>\PHPCR\Version\VersionHistoryInterface</full_name>
      <extends>\PHPCR\NodeInterface</extends>
      <docblock line="27">
        <description><![CDATA[A VersionHistory object wraps an nt:versionHistory node.]]></description>
        <long-description><![CDATA[<p>It provides
convenient access to version history information.</p>

<p>Note: As this extends NodeInterface, foreach still iterates over the
children and not over versions. If you want to use a foreach, you can use
getAllVersions() to retrieve an iterator over versions.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="52" package="phpcr\interfaces">
        <name>getVersionableIdentifier</name>
        <full_name>getVersionableIdentifier</full_name>
        <docblock line="41">
          <description><![CDATA[Returns the identifier of the versionable node for which this is the
version history.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="return" description="the identifier of the versionable node for which this is&#10;     the version history." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="41" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="41" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="63" package="phpcr\interfaces">
        <name>getRootVersion</name>
        <full_name>getRootVersion</full_name>
        <docblock line="54">
          <description><![CDATA[Returns the root version of this version history.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="return" description="a Version object." type="\PHPCR\Version\VersionInterface">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="54" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="54" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="93" package="phpcr\interfaces">
        <name>getAllLinearVersions</name>
        <full_name>getAllLinearVersions</full_name>
        <docblock line="65">
          <description><![CDATA[This method returns an iterator over all the versions in the line of
descent from the root version to that base version within this history
that is bound to the workspace through which this VersionHistory was
accessed.]]></description>
          <long-description><![CDATA[<p>Within a version history H, B is the base version bound to workspace W
if and only if there exists a versionable node N in W whose version
history is H and B is the base version of N.</p>

<p>The line of descent from version V1 to V2, where V2 is a successor of V1,
is the ordered list of versions starting with V1 and proceeding through
each direct successor to V2.</p>

<p>The versions are returned in order of creation date, from oldest to newest.</p>

<p>Note that in a simple versioning repository the behavior of this method is
equivalent to returning all versions in the version history in order from
oldest to newest.</p>]]></long-description>
          <tag line="65" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Values are the VersionInterface instances. Keys&#10;     are the version names." type="\PHPCR\Version\Iterator">
            <type by_reference="false">\PHPCR\Version\Iterator</type>
          </tag>
          <tag line="65" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="65" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="109" package="phpcr\interfaces">
        <name>getAllVersions</name>
        <full_name>getAllVersions</full_name>
        <docblock line="95">
          <description><![CDATA[Returns an iterator over all the versions within this version history.]]></description>
          <long-description><![CDATA[<p>If the version graph of this history is linear then the versions are
returned in order of creation date, from oldest to newest. Otherwise the
order of the returned versions is implementation-dependent.</p>]]></long-description>
          <tag line="95" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Values are the VersionInterface instances. Keys&#10;     are the version names." type="\PHPCR\Version\Iterator">
            <type by_reference="false">\PHPCR\Version\Iterator</type>
          </tag>
          <tag line="95" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="95" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="123" package="phpcr\interfaces">
        <name>getAllLinearFrozenNodes</name>
        <full_name>getAllLinearFrozenNodes</full_name>
        <docblock line="111">
          <description><![CDATA[This method returns all the frozen nodes of all the versions in this
verison history in the same order as getAllLinearVersions().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Values are the NodeInterface instances. Keys&#10;     are the version names" type="\PHPCR\Version\Iterator">
            <type by_reference="false">\PHPCR\Version\Iterator</type>
          </tag>
          <tag line="111" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="111" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="139" package="phpcr\interfaces">
        <name>getAllFrozenNodes</name>
        <full_name>getAllFrozenNodes</full_name>
        <docblock line="125">
          <description><![CDATA[Returns an iterator over all the frozen nodes of all the versions of
this version history.]]></description>
          <long-description><![CDATA[<p>Under simple versioning the order of the returned
nodes will be the order of their creation. Under full versioning the
order is implementation-dependent.</p>]]></long-description>
          <tag line="125" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Values are the NodeInterface instances. Keys&#10;     are the version names" type="\PHPCR\Version\Iterator">
            <type by_reference="false">\PHPCR\Version\Iterator</type>
          </tag>
          <tag line="125" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="125" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="155" package="phpcr\interfaces">
        <name>getVersion</name>
        <full_name>getVersion</full_name>
        <docblock line="141">
          <description><![CDATA[Retrieves a particular version from this version history by version
name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="141" name="param" description="a version name" type="string" variable="$versionName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="141" name="return" description="a Version object." type="\PHPCR\Version\VersionInterface">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="141" name="throws" description="if the specified version is not&#10;     in this version history." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="141" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="141" name="api" description=""/>
        </docblock>
        <argument line="155">
          <name>$versionName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="171" package="phpcr\interfaces">
        <name>getVersionByLabel</name>
        <full_name>getVersionByLabel</full_name>
        <docblock line="157">
          <description><![CDATA[Retrieves a particular version from this version history by version
label.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="param" description="a version label" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="return" description="a Version object." type="\PHPCR\Version\VersionInterface">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="157" name="throws" description="if the specified label is not in&#10;     this version history." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="157" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="157" name="api" description=""/>
        </docblock>
        <argument line="171">
          <name>$label</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="222" package="phpcr\interfaces">
        <name>addVersionLabel</name>
        <full_name>addVersionLabel</full_name>
        <docblock line="173">
          <description><![CDATA[Adds the specified label to the specified version.]]></description>
          <long-description><![CDATA[<p>The label must be a JCR name in either qualified or extended form
and therefore must conform to the syntax restriction that apply to
such names. In particular a colon (:) should not be used unless
it is intended as a prefix delimiter in a qualified name.</p>

<p>Adding a version label to a version corresponds to
adding a reference property with a name specified by the label parameter
to the jcr:versionLabels sub node of the nt:versionHistory node. The
reference property points to the nt:version node that represents the
specified version.</p>

<p>This is a workspace-write method and therefore the change is made
immediately.</p>

<p>Within a particular version history, a given label may appear a maximum
of once. If the specified label is already assigned to a version in this
history and moveLabel is true then the label is removed from its current
location and added to the version with the specified versionName. If m
oveLabel is false, then an attempt to add a label that already exists
will fail.</p>

<p>A VersionException is thrown if the named version is not in this
VersionHistory or if it is the root version (jcr:rootVersion) or if the
label specified is not a valid JCR NAME.</p>]]></long-description>
          <tag line="173" name="param" description="the name of the version to which the label is to be added." type="string" variable="$versionName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="173" name="param" description="the label to be added, a JCR name in either extended or qualified form." type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
          <tag line="173" name="param" description="if true, then if label is already assigned to a version in this version history, it is moved to the new version specified; if false, then attempting to assign an already used label will throw a LabelExistsVersionException." type="boolean" variable="$moveLabel">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="173" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="173" name="throws" description="if moveLabel is&#10;     false, and an attempt is made to add a label that already exists in&#10;     this version history" type="\PHPCR\Version\LabelExistsVersionException">
            <type by_reference="false">\PHPCR\Version\LabelExistsVersionException</type>
          </tag>
          <tag line="173" name="throws" description="if the specified version does&#10;     not exist in this version history or if the specified version is&#10;     the root version (jcr:rootVersion)." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="173" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="173" name="api" description=""/>
        </docblock>
        <argument line="222">
          <name>$versionName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="222">
          <name>$label</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="222">
          <name>$moveLabel</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="246" package="phpcr\interfaces">
        <name>removeVersionLabel</name>
        <full_name>removeVersionLabel</full_name>
        <docblock line="224">
          <description><![CDATA[Removes the specified label from among the labels of this version
history.]]></description>
          <long-description><![CDATA[<p>The label must be a JCR name in either qualified or extended form.
This corresponds to removing a property from the jcr:versionLabels child
node of the nt:versionHistory node that represents this version history.</p>

<p>This is a workspace-write method and therefore the change is made
immediately.</p>]]></long-description>
          <tag line="224" name="param" description="a version label. A JCR name in either extended or qualified form." type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
          <tag line="224" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="224" name="throws" description="if the name label does not exist&#10;     in this version history." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="224" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="224" name="api" description=""/>
        </docblock>
        <argument line="246">
          <name>$label</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="269" package="phpcr\interfaces">
        <name>hasVersionLabel</name>
        <full_name>hasVersionLabel</full_name>
        <docblock line="248">
          <description><![CDATA[Returns true if the given version has the given label.]]></description>
          <long-description><![CDATA[<p>If no $version is
given returns true if any version in the history has the given label.</p>

<p>The label must be a JCR name in either qualified or extended form.</p>

<p><b>PHPCR Note:</b> The Java API defines this with multiple differing
signatures.</p>]]></long-description>
          <tag line="248" name="param" description="a version label. A JCR name in either extended or qualified form." type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
          <tag line="248" name="param" description="a Version object" type="\PHPCR\Version\VersionInterface" variable="$version">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="248" name="return" description="a boolean." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="248" name="throws" description="if the specified version is not&#10;     of this version history." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="248" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="248" name="api" description=""/>
        </docblock>
        <argument line="269">
          <name>$label</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="269">
          <name>$version</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="291" package="phpcr\interfaces">
        <name>getVersionLabels</name>
        <full_name>getVersionLabels</full_name>
        <docblock line="271">
          <description><![CDATA[Returns all version labels of the given version - empty array if none.]]></description>
          <long-description><![CDATA[<p>If a $version is given returns all version labels of the history or an
empty array if there are none.</p>

<p><b>Note:</b> The Java API defines this with multiple differing
signatures.</p>]]></long-description>
          <tag line="271" name="param" description="a Version object" type="\PHPCR\Version\VersionInterface" variable="$version">
            <type by_reference="false">\PHPCR\Version\VersionInterface</type>
          </tag>
          <tag line="271" name="return" description="a string array containing all the labels of the (given)&#10;     version (history)" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="271" name="throws" description="if the specified version is not&#10;     in this version history." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="271" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="271" name="api" description=""/>
        </docblock>
        <argument line="291">
          <name>$version</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Version" line="331" package="phpcr\interfaces">
        <name>removeVersion</name>
        <full_name>removeVersion</full_name>
        <docblock line="293">
          <description><![CDATA[Removes the named version from this version history and automatically
repairs the version graph.]]></description>
          <long-description><![CDATA[<p>If the version to be removed is V, V's predecessor set is P and V's
successor set is S, then the version graph is repaired s follows:</p>

<ul>
<li>For each member of P, remove the reference to V from its successor
list and add references to each member of S.</li>
<li>For each member of S, remove the reference to V from its predecessor
list and add references to each member of P.</li>
</ul>

<p><b>Note</b> that this change is made immediately; there is no need to
call save. In fact, since the the version storage is read-only with
respect to normal repository methods, save does not even function in
this context.</p>]]></long-description>
          <tag line="293" name="param" description="the name of a version in this version history." type="string" variable="$versionName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="293" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="293" name="throws" description="if the specified version is&#10;     currently the target of a REFERENCE property elsewhere in the&#10;     repository (not necessarily in this workspace) and the current&#10;     Session has read access to that REFERENCE property." type="\PHPCR\ReferentialIntegrityException">
            <type by_reference="false">\PHPCR\ReferentialIntegrityException</type>
          </tag>
          <tag line="293" name="throws" description="if the current Session does not&#10;     have permission to remove the specified version or if the specified&#10;     version is currently the target of a REFERENCE property elsewhere&#10;     in the repository (not just in this workspace) and the current&#10;     Session does not have read access to that REFERENCE property." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="293" name="throws" description="if this operation&#10;     is not supported by the implementation." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="293" name="throws" description="if the named version is not in&#10;     this version history." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="293" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="293" name="api" description=""/>
        </docblock>
        <argument line="331">
          <name>$versionName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Version/OnParentVersionAction.php" hash="19bf64b5f13e119f3fab946430ccf2e7" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="true" abstract="true" namespace="PHPCR\Version" line="50" package="phpcr\interfaces">
      <extends/>
      <name>OnParentVersionAction</name>
      <full_name>\PHPCR\Version\OnParentVersionAction</full_name>
      <docblock line="27">
        <description><![CDATA[The possible actions specified by the onParentVersion attribute in a
property definition within a node type definition.]]></description>
        <long-description><![CDATA[<p>This interface defines the following actions:</p>

<ul>
<li>COPY</li>
<li>VERSION</li>
<li>INITIALIZE</li>
<li>COMPUTE</li>
<li>IGNORE</li>
<li>ABORT</li>
</ul>

<p>Every item (node or property) in the repository has a status indicator that
governs what happens to that item when its parent node is versioned. This
status is defined by the onParentVersion attribute in the PropertyDefinition
or NodeDefinition that applies to the item in question.</p>]]></long-description>
        <tag line="27" name="author" description="Karsten Dambekalns &lt;karsten@typo3.org&gt;"/>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR\Version" line="62" package="phpcr\interfaces">
        <name>COPY</name>
        <full_name>COPY</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="57">
          <description><![CDATA[The COPY action constant.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="69" package="phpcr\interfaces">
        <name>VERSION</name>
        <full_name>VERSION</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="64">
          <description><![CDATA[The VERSION action constant.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="76" package="phpcr\interfaces">
        <name>INITIALIZE</name>
        <full_name>INITIALIZE</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="71">
          <description><![CDATA[The INITIALIZE action constant.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="83" package="phpcr\interfaces">
        <name>COMPUTE</name>
        <full_name>COMPUTE</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="78">
          <description><![CDATA[The COMPUTE action constant.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="90" package="phpcr\interfaces">
        <name>IGNORE</name>
        <full_name>IGNORE</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="85">
          <description><![CDATA[The IGNORE action constant.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="97" package="phpcr\interfaces">
        <name>ABORT</name>
        <full_name>ABORT</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="92">
          <description><![CDATA[The ABORT action constant.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="109" package="phpcr\interfaces">
        <name>ACTIONNAME_COPY</name>
        <full_name>ACTIONNAME_COPY</full_name>
        <value><![CDATA['COPY']]></value>
        <docblock line="104">
          <description><![CDATA[The name of the COPY on-version action, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="116" package="phpcr\interfaces">
        <name>ACTIONNAME_VERSION</name>
        <full_name>ACTIONNAME_VERSION</full_name>
        <value><![CDATA['VERSION']]></value>
        <docblock line="111">
          <description><![CDATA[The name of the VERSION on-version action, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="123" package="phpcr\interfaces">
        <name>ACTIONNAME_INITIALIZE</name>
        <full_name>ACTIONNAME_INITIALIZE</full_name>
        <value><![CDATA['INITIALIZE']]></value>
        <docblock line="118">
          <description><![CDATA[The name of the INITIALIZE on-version action, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="130" package="phpcr\interfaces">
        <name>ACTIONNAME_COMPUTE</name>
        <full_name>ACTIONNAME_COMPUTE</full_name>
        <value><![CDATA['COMPUTE']]></value>
        <docblock line="125">
          <description><![CDATA[The name of the COMPUTE on-version action, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="137" package="phpcr\interfaces">
        <name>ACTIONNAME_IGNORE</name>
        <full_name>ACTIONNAME_IGNORE</full_name>
        <value><![CDATA['IGNORE']]></value>
        <docblock line="132">
          <description><![CDATA[The name of the IGNORE on-version action, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Version" line="144" package="phpcr\interfaces">
        <name>ACTIONNAME_ABORT</name>
        <full_name>ACTIONNAME_ABORT</full_name>
        <value><![CDATA['ABORT']]></value>
        <docblock line="139">
          <description><![CDATA[The name of the ABORT on-version action, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="private" namespace="PHPCR\Version" line="154" package="phpcr\interfaces">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="149">
          <description><![CDATA[Make instantiation impossible.]]></description>
          <long-description><![CDATA[<p>..</p>]]></long-description>
          <tag line="149" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Version" line="168" package="phpcr\interfaces">
        <name>nameFromValue</name>
        <full_name>nameFromValue</full_name>
        <docblock line="159">
          <description><![CDATA[Returns the name of the specified action, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="159" name="param" description="the on-version action" type="integer" variable="$action">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="159" name="return" description="the name of the specified action" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="159" name="api" description=""/>
        </docblock>
        <argument line="168">
          <name>$action</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Version" line="204" package="phpcr\interfaces">
        <name>valueFromName</name>
        <full_name>valueFromName</full_name>
        <docblock line="194">
          <description><![CDATA[Returns the numeric constant value of the on-version action with the
specified name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="194" name="param" description="the name of the on-version action" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="return" description="the numeric constant value" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="194" name="api" description=""/>
        </docblock>
        <argument line="204">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/LoginException.php" hash="602702f1fbaf5cb2c65be52bcd3a17a3" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="37" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>LoginException</name>
      <full_name>\PHPCR\LoginException</full_name>
      <docblock line="27">
        <description><![CDATA[Shall be thrown in case of invalid login credentials.]]></description>
        <long-description><![CDATA[<p>Exception thrown by RepositoryInterface::login() and
SessionInterface::impersonate() if the specified credentials are invalid.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/InvalidSerializedDataException.php" hash="c02b7f58565cbfb9d2c2dfe609484ead" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="37" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>InvalidSerializedDataException</name>
      <full_name>\PHPCR\InvalidSerializedDataException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception to be thrown by the deserialization methods of Session.]]></description>
        <long-description><![CDATA[<p>This exception shall be thrown by the deserialization methods of Session if
the serialized data being input has an invalid format.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/NoSuchWorkspaceException.php" hash="d7dfc3e66c30f87708045e613d5b3a26" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="35" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>NoSuchWorkspaceException</name>
      <full_name>\PHPCR\NoSuchWorkspaceException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by RepositoryInterface::login() when a specific workspace
is not found.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/SessionInterface.php" hash="f7fb2439a823e5174b4de7a6e3987a08" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="51" package="phpcr\interfaces">
      <name>SessionInterface</name>
      <full_name>\PHPCR\SessionInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Describes the implementation of a session class.]]></description>
        <long-description><![CDATA[<p>The Session object provides read and (in level 2) write access to the
content of a particular workspace in the repository.</p>

<p>The Session object is returned by Repository::login(). It encapsulates both
the authorization settings of a particular user (as specified by the passed
Credentials) and a binding to the workspace specified by the workspaceName
passed on login.</p>

<p>Each Session object is associated one-to-one with a Workspace object. The
Workspace object represents a "view" of an actual repository workspace
entity as seen through the authorization settings of its associated Session.</p>

<p><b>PHPCR Note:</b>
  We removed getValueFactory as the ValueFactory interface has
  been removed. To set properties, use NodeInterface::setProperty() or
  PropertyInterface::setValue() with native PHP variables.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="63" package="phpcr\interfaces">
        <name>ACTION_ADD_NODE</name>
        <full_name>ACTION_ADD_NODE</full_name>
        <value><![CDATA['add_node']]></value>
        <docblock line="57">
          <description><![CDATA[A constant representing the add_node action string, used to determine if
this Session has permission to add a new node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="72" package="phpcr\interfaces">
        <name>ACTION_READ</name>
        <full_name>ACTION_READ</full_name>
        <value><![CDATA['read']]></value>
        <docblock line="65">
          <description><![CDATA[A constant representing the read action string, used to determine if
this Session has permission to retrieve an item (and read the value, in
the case of a property).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="80" package="phpcr\interfaces">
        <name>ACTION_REMOVE</name>
        <full_name>ACTION_REMOVE</full_name>
        <value><![CDATA['remove']]></value>
        <docblock line="74">
          <description><![CDATA[A constant representing the remove action string, used to determine if
this Session has permission to remove an item.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="89" package="phpcr\interfaces">
        <name>ACTION_SET_PROPERTY</name>
        <full_name>ACTION_SET_PROPERTY</full_name>
        <value><![CDATA['set_property']]></value>
        <docblock line="82">
          <description><![CDATA[A constant representing the set_property action string, used to
determine ifthis Session has permission to set (add or modify) a
property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="100" package="phpcr\interfaces">
        <name>getRepository</name>
        <full_name>getRepository</full_name>
        <docblock line="93">
          <description><![CDATA[Returns the Repository object through which this session was acquired.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="return" description="a Repository object." type="\PHPCR\RepositoryInterface">
            <type by_reference="false">\PHPCR\RepositoryInterface</type>
          </tag>
          <tag line="93" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="114" package="phpcr\interfaces">
        <name>getUserID</name>
        <full_name>getUserID</full_name>
        <docblock line="102">
          <description><![CDATA[Gets the user ID associated with this Session.]]></description>
          <long-description><![CDATA[<p>How the user ID is set is up to the implementation, it may be a string
passed in as part of the credentials or it may be a string acquired in
some other way. This method is free to return an "anonymous user ID" or
null.</p>]]></long-description>
          <tag line="102" name="return" description="The user id associated with this Session." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="129" package="phpcr\interfaces">
        <name>getAttributeNames</name>
        <full_name>getAttributeNames</full_name>
        <docblock line="116">
          <description><![CDATA[Returns the names of the attributes set in this session as a result of
the Credentials that were used to acquire it.]]></description>
          <long-description><![CDATA[<p>Not all Credentials implementations will contain attributes (though, for
example, SimpleCredentials does allow for them). This method returns an
empty array if the Credentials instance did not provide attributes.</p>]]></long-description>
          <tag line="116" name="return" description="A string array containing the names of all attributes&#10;     passed in the credentials used to acquire this session." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="116" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="143" package="phpcr\interfaces">
        <name>getAttribute</name>
        <full_name>getAttribute</full_name>
        <docblock line="131">
          <description><![CDATA[Returns the value of the named attribute, or null if no
attribute of the given name exists.]]></description>
          <long-description><![CDATA[<p>See getAttributeNames().</p>]]></long-description>
          <tag line="131" name="param" description="The name of an attribute passed in the credentials used to acquire this session." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="return" description="The value of the attribute or null if no attribute of the&#10;     given name exists." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="131" name="api" description=""/>
        </docblock>
        <argument line="143">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="152" package="phpcr\interfaces">
        <name>getWorkspace</name>
        <full_name>getWorkspace</full_name>
        <docblock line="145">
          <description><![CDATA[Returns the Workspace attached to this Session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="return" description="a Workspace object." type="\PHPCR\WorkspaceInterface">
            <type by_reference="false">\PHPCR\WorkspaceInterface</type>
          </tag>
          <tag line="145" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="165" package="phpcr\interfaces">
        <name>getRootNode</name>
        <full_name>getRootNode</full_name>
        <docblock line="154">
          <description><![CDATA[Returns the root node of the workspace, "/".]]></description>
          <long-description><![CDATA[<p>This node is the main access point to the content of the workspace.</p>]]></long-description>
          <tag line="154" name="return" description="The root node of the workspace: a Node object." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="154" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="154" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="190" package="phpcr\interfaces">
        <name>impersonate</name>
        <full_name>impersonate</full_name>
        <docblock line="167">
          <description><![CDATA[Returns a new session in accordance with the specified (new)
Credentials.]]></description>
          <long-description><![CDATA[<p>Allows the current user to "impersonate" another using incomplete or
relaxed credentials requirements (perhaps including a user name but no
password, for example), assuming that this Session gives them that
permission. The new Session is tied to a new Workspace instance. In
other words, Workspace instances are not re-used. However, the Workspace
instance returned represents the same actual persistent workspace entity
in the repository as is represented by the Workspace object tied to this
Session.</p>]]></long-description>
          <tag line="167" name="param" description="A Credentials object" type="\PHPCR\CredentialsInterface" variable="$credentials">
            <type by_reference="false">\PHPCR\CredentialsInterface</type>
          </tag>
          <tag line="167" name="return" description="a Session object" type="\PHPCR\SessionInterface">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
          <tag line="167" name="throws" description="if the current session does not have&#10;     sufficient access to perform the operation." type="\PHPCR\LoginException">
            <type by_reference="false">\PHPCR\LoginException</type>
          </tag>
          <tag line="167" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="167" name="api" description=""/>
        </docblock>
        <argument line="190">
          <name>$credentials</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\CredentialsInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="208" package="phpcr\interfaces">
        <name>getNodeByIdentifier</name>
        <full_name>getNodeByIdentifier</full_name>
        <docblock line="192">
          <description><![CDATA[Returns the node specified by the given identifier.]]></description>
          <long-description><![CDATA[<p>Applies to both referenceable and non-referenceable nodes.</p>]]></long-description>
          <tag line="192" name="param" description="An identifier." type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="192" name="return" description="A Node." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="192" name="throws" description="if no node with the specified&#10;     identifier exists or if this Session does not have read access to&#10;     the node with the specified identifier." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="192" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="192" name="api" description=""/>
        </docblock>
        <argument line="208">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="226" package="phpcr\interfaces">
        <name>getNodesByIdentifier</name>
        <full_name>getNodesByIdentifier</full_name>
        <docblock line="210">
          <description><![CDATA[Returns the nodes specified by the given identifiers.]]></description>
          <long-description><![CDATA[<p>Applies to both referenceable and non-referenceable nodes.</p>

<p>Uuids that cannot be found will be ignored and missing from the
returned array.</p>]]></long-description>
          <tag line="210" name="param" description="An array of identifiers." type="array" variable="$ids">
            <type by_reference="false">array</type>
          </tag>
          <tag line="210" name="return" description="containing all found NodeInterface keyed by uuid" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="210" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="210" name="api" description=""/>
        </docblock>
        <argument line="226">
          <name>$ids</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="249" package="phpcr\interfaces">
        <name>getItem</name>
        <full_name>getItem</full_name>
        <docblock line="228">
          <description><![CDATA[Returns the node at the specified absolute path in the workspace.]]></description>
          <long-description><![CDATA[<p>If no
such node exists, then it returns the property at the specified path.</p>

<p>This method should only be used if the application does not know whether
the item at the indicated path is property or node. In cases where the
application has this information, either SessionInterface::getNode() or
SessionInterface::getProperty() should be used, as appropriate. In many
repository implementations the node and property-specific methods are
likely to be more efficient than getItem.</p>]]></long-description>
          <tag line="228" name="param" description="An absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="return" description="" type="\PHPCR\ItemInterface">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="228" name="throws" description="if no accessible item is found at&#10;     the specified path." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="228" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="228" name="api" description=""/>
        </docblock>
        <argument line="249">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="263" package="phpcr\interfaces">
        <name>getNode</name>
        <full_name>getNode</full_name>
        <docblock line="251">
          <description><![CDATA[Returns the node at the specified absolute path in the workspace.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="251" name="param" description="An absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="251" name="return" description="A node" type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="251" name="throws" description="if no accessible node is found at the specified path." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="251" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="251" name="api" description=""/>
        </docblock>
        <argument line="263">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="279" package="phpcr\interfaces">
        <name>getNodes</name>
        <full_name>getNodes</full_name>
        <docblock line="265">
          <description><![CDATA[Returns all nodes specified in the absPath array.]]></description>
          <long-description><![CDATA[<p>Paths that cannot be found will be ignored and missing in the returned
array</p>]]></long-description>
          <tag line="265" name="param" description="An array containing absolute paths." type="array" variable="$absPaths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="265" name="return" description="containing all found NodeInterface keyed by path" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="265" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="265" name="api" description=""/>
        </docblock>
        <argument line="279">
          <name>$absPaths</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="294" package="phpcr\interfaces">
        <name>getProperty</name>
        <full_name>getProperty</full_name>
        <docblock line="281">
          <description><![CDATA[Returns the property at the specified absolute path in the workspace.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="281" name="param" description="An absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="281" name="return" description="A property" type="\PHPCR\PropertyInterface">
            <type by_reference="false">\PHPCR\PropertyInterface</type>
          </tag>
          <tag line="281" name="throws" description="if no accessible property is found&#10;     at the specified path." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="281" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="281" name="api" description=""/>
        </docblock>
        <argument line="294">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="311" package="phpcr\interfaces">
        <name>itemExists</name>
        <full_name>itemExists</full_name>
        <docblock line="296">
          <description><![CDATA[Determines if the item identified by a path does exists.]]></description>
          <long-description><![CDATA[<p>Returns true if an item exists at absPath and this Session has read
access to it; otherwise returns false.</p>]]></long-description>
          <tag line="296" name="param" description="An absolute path to an item to be found." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="296" name="return" description="True if the item exists, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="296" name="throws" description="if absPath is not a well-formed&#10;     absolute path." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="296" name="api" description=""/>
        </docblock>
        <argument line="311">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="328" package="phpcr\interfaces">
        <name>nodeExists</name>
        <full_name>nodeExists</full_name>
        <docblock line="313">
          <description><![CDATA[Determines if the node identified by the given absolute path does exist.]]></description>
          <long-description><![CDATA[<p>Returns true if a node exists at absPath and this Session has read
access to it; otherwise returns false.</p>]]></long-description>
          <tag line="313" name="param" description="An absolute path to the node to be found." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="313" name="return" description="True if the item does esist" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="313" name="throws" description="if absPath is not a well-formed&#10;     absolute path." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="313" name="api" description=""/>
        </docblock>
        <argument line="328">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="345" package="phpcr\interfaces">
        <name>propertyExists</name>
        <full_name>propertyExists</full_name>
        <docblock line="330">
          <description><![CDATA[Determines the existance of a property.]]></description>
          <long-description><![CDATA[<p>Returns true if a property exists at absPath and this Session has read
access to it; otherwise returns false.</p>]]></long-description>
          <tag line="330" name="param" description="An absolute path to the property to be found." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="330" name="return" description="True if the property is available." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="330" name="throws" description="if absPath is not a well-formed&#10;     absolute path." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="330" name="api" description=""/>
        </docblock>
        <argument line="345">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="404" package="phpcr\interfaces">
        <name>move</name>
        <full_name>move</full_name>
        <docblock line="347">
          <description><![CDATA[Moves the node at srcAbsPath (and its entire subgraph) to the new
location at destAbsPath.]]></description>
          <long-description><![CDATA[<p>This is a session-write method and therefor requires a save to dispatch
the change.</p>

<p>The identifiers of referenceable nodes must not be changed by a move.
The identifiers of non-referenceable nodes may change.</p>

<p>A ConstraintViolationException is thrown either immediately, on dispatch
or on persist, if performing this operation would violate a node type or
implementation-specific constraint. Implementations may differ on when
this validation is performed.</p>

<p>As well, a ConstraintViolationException will be thrown on persist if an
attempt is made to separately save either the source or destination
node.</p>

<p>Note that this behaviour differs from that of WorkspaceInterface::move(
$srcAbsPath, $destAbsPath), which is a workspace-write method and
therefore immediately dispatches changes.</p>

<p>The destAbsPath provided must not have an index on its final element. If
ordering is supported by the node type of the parent node of the new
location, then the newly moved node is appended to the end of the child
node list.</p>

<p>This method cannot be used to move an individual property by itself. It
moves an entire node and its subgraph.</p>]]></long-description>
          <tag line="347" name="param" description="the root of the subgraph to be moved." type="string" variable="$srcAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="347" name="param" description="the location to which the subgraph is to be moved." type="string" variable="$destAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="347" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="347" name="throws" description="if a node already exists at&#10;     destAbsPath and same-name siblings are not allowed." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="347" name="throws" description="if either srcAbsPath or destAbsPath&#10;     cannot be found and this implementation performs this validation&#10;     immediately." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="347" name="throws" description="if the parent node of&#10;     destAbsPath or the parent node of srcAbsPath is versionable and&#10;     checked-in, or or is non-versionable and its nearest versionable&#10;     ancestor is checked-in and this implementation performs this&#10;     validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="347" name="throws" description="if a node-type or&#10;     other constraint violation is detected immediately and this&#10;     implementation performs this validation immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="347" name="throws" description="if the move operation would violate a&#10;     lock and this implementation performs this validation immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="347" name="throws" description="if the last element of destAbsPath&#10;     has an index or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="347" name="api" description=""/>
        </docblock>
        <argument line="404">
          <name>$srcAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="404">
          <name>$destAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="444" package="phpcr\interfaces">
        <name>removeItem</name>
        <full_name>removeItem</full_name>
        <docblock line="406">
          <description><![CDATA[Removes the specified item and its subgraph.]]></description>
          <long-description><![CDATA[<p>This is a session-write method and therefore requires a save in order to
dispatch the change.</p>

<p>If a node with same-name siblings is removed, this decrements by one the
indices of all the siblings with indices greater than that of the
removed node. In other words, a removal compacts the array of same-name
siblings and causes the minimal re-numbering required to maintain the
original order but leave no gaps in the numbering.</p>]]></long-description>
          <tag line="406" name="param" description="the absolute path of the item to be removed." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="406" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="406" name="throws" description="if the parent node of the item&#10;     at absPath is read-only due to a checked-in node and this&#10;     implementation performs this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="406" name="throws" description="if a lock prevents the removal of the&#10;     specified item and this implementation performs this validation&#10;     immediately instead." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="406" name="throws" description="if removing the&#10;     specified item would violate a node type or implementation-specific&#10;     constraint and this implementation performs this validation&#10;     immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="406" name="throws" description="if no accessible item is found at&#10;     $absPath property or if the specified item or an item in its&#10;     subgraph is currently the target of a REFERENCE property located in&#10;     this workspace but outside the specified item's subgraph and the&#10;     current Session does not have read access to that REFERENCE&#10;     property." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="406" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="406" name="see" description="\PHPCR\Item::remove()" refers="\PHPCR\Item::remove()"/>
          <tag line="406" name="api" description=""/>
        </docblock>
        <argument line="444">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="496" package="phpcr\interfaces">
        <name>save</name>
        <full_name>save</full_name>
        <docblock line="446">
          <description><![CDATA[Validates all pending changes currently recorded in this Session.]]></description>
          <long-description><![CDATA[<p>If validation of all pending changes succeeds, then this change
information is cleared from the Session.</p>

<p>If the save occurs outside a transaction, the changes are dispatched and
persisted. Upon being persisted the changes become potentially visible
to other Sessions bound to the same persitent workspace.</p>

<p>If the save occurs within a transaction, the changes are dispatched but
are not persisted until the transaction is committed.</p>

<p>If validation fails, then no pending changes are dispatched and they
remain recorded on the Session. There is no best-effort or partial save.</p>]]></long-description>
          <tag line="446" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="446" name="throws" description="if any of the changes to be&#10;     persisted would violate the access privileges of the this Session.&#10;     Also thrown if any of the changes to be persisted would cause the&#10;     removal of a node that is currently referenced by a REFERENCE&#10;     property that this Session does not have read access to." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="446" name="throws" description="if any of the changes to be persisted&#10;     would be prevented by the presence of an already existing item in&#10;     the workspace." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="446" name="throws" description="if any of the&#10;     changes to be persisted would violate a node type or restriction.&#10;     Additionally, a repository may use this exception to enforce&#10;     implementation- or configuration-dependent restrictions." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="446" name="throws" description="if any of the changes to be&#10;     persisted conflicts with a change already persisted through another&#10;     session and the implementation is such that this conflict can only&#10;     be detected at save-time and therefore was not detected earlier, at&#10;     change-time." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="446" name="throws" description="if any of the changes to be&#10;     persisted would cause the removal of a node that is currently&#10;     referenced by a REFERENCE property that this Session has read&#10;     access to." type="\PHPCR\ReferentialIntegrityException">
            <type by_reference="false">\PHPCR\ReferentialIntegrityException</type>
          </tag>
          <tag line="446" name="throws" description="if the save would make a result&#10;     in a change to persistent storage that would violate the read-only&#10;     status of a checked-in node." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="446" name="throws" description="if the save would result in a change&#10;     to persistent storage that would violate a lock." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="446" name="throws" description="if the save would result&#10;     in the addition of a node with an unrecognized node type." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="446" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="446" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="525" package="phpcr\interfaces">
        <name>refresh</name>
        <full_name>refresh</full_name>
        <docblock line="498">
          <description><![CDATA[Reloads the current session.]]></description>
          <long-description><![CDATA[<p>If keepChanges is false, this method discards all pending changes
currently recorded in this Session and returns all items to reflect the
current saved state. Outside a transaction this state is simply the
current state of persistent storage. Within a transaction, this state
will reflect persistent storage as modified by changes that have been
saved but not yet committed.</p>

<p>If keepChanges is true then pending change are not discarded but items
that do not have changes pending have their state refreshed to reflect
the current saved state, thus revealing changes made by other sessions.</p>

<p>Implementors note: For performance reasons, implementations should only
mark nodes as dirty and reload them from the backend only if actually
needed.</p>]]></long-description>
          <tag line="498" name="param" description="Switch to override current changes kept in the session." type="boolean" variable="$keepChanges">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="498" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="498" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="498" name="api" description=""/>
        </docblock>
        <argument line="525">
          <name>$keepChanges</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="539" package="phpcr\interfaces">
        <name>hasPendingChanges</name>
        <full_name>hasPendingChanges</full_name>
        <docblock line="527">
          <description><![CDATA[Determines if the current session has pending changes.]]></description>
          <long-description><![CDATA[<p>Returns true if this session holds pending (that is, unsaved) changes;
otherwise returns false.</p>]]></long-description>
          <tag line="527" name="return" description="a boolean" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="527" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="527" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="583" package="phpcr\interfaces">
        <name>hasPermission</name>
        <full_name>hasPermission</full_name>
        <docblock line="541">
          <description><![CDATA[Determines if the current session is permitted to run the passed
actions.]]></description>
          <long-description><![CDATA[<p>Returns true if this Session has permission to perform the specified
actions at the specified absPath and false otherwise.
The actions parameter is a comma separated list of action strings.</p>

<p>The following action strings are defined:</p>

<ul>
<li>add_node: If hasPermission(path, "add_node") returns true, then this
 Session has permission to add a node at path.</li>
<li>set_property: If hasPermission(path, "set_property") returns true,
 then this Session has permission to set (add or change) a property
 at path.</li>
<li>remove: If hasPermission(path, "remove") returns true, then this
 Session has permission to remove an item at path.</li>
<li>read: If hasPermission(path, "read") returns true, then this Session
 has permission to retrieve (and read the value of, in the case of
 a property) an item at path.</li>
</ul>

<p>When more than one action is specified in the actions parameter, this
method will only return true if this Session has permission to perform
all of the listed actions at the specified path.</p>

<p>The information returned through this method will only reflect the
access control status (both JCR defined and implementation-specific) and
not other restrictions that may exist, such as node type constraints. For
example, even though hasPermission may indicate that a particular Session
may add a property at /A/B/C, the node type of the node at /A/B may
prevent the addition of a property called C.</p>]]></long-description>
          <tag line="541" name="param" description="an absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="541" name="param" description="a comma separated list of action strings." type="string" variable="$actions">
            <type by_reference="false">string</type>
          </tag>
          <tag line="541" name="return" description="true if this Session has permission to perform the&#10;     specified actions at the specified absPath." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="541" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="541" name="api" description=""/>
        </docblock>
        <argument line="583">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="583">
          <name>$actions</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="630" package="phpcr\interfaces">
        <name>checkPermission</name>
        <full_name>checkPermission</full_name>
        <docblock line="585">
          <description><![CDATA[Determines whether this Session has permission to perform the specified
actions at the specified absPath.]]></description>
          <long-description><![CDATA[<p>This method quietly returns if the access request is
permitted, or throws a \PHPCR\Security\AccessControlException otherwise.
The actions parameter is a comma separated list of action strings.</p>

<p>The following action strings are defined:</p>

<ul>
<li>add_node: If checkPermission(path, "add_node") returns quietly, then
 this Session has permission to add a node at path, otherwise
 permission is denied.</li>
<li>set_property: If checkPermission(path, "set_property") returns
 quietly, then this Session has permission to set (add or change) a
 property at path, otherwise permission is denied.</li>
<li>remove: If checkPermission(path, "remove") returns quietly, then this
 Session has permission to remove an item at path, otherwise
 permission is denied.</li>
<li>read: If checkPermission(path, "read") returns quietly, then this
 Session has permission to retrieve (and read the value of, in the
 case of a property) an item at path, otherwise permission is
 denied.</li>
</ul>

<p>When more than one action is specified in the actions parameter, this
method will only return true if this Session has permission to perform
all of the listed actions at the specified path.</p>

<p>The information returned through this method will only reflect the
access control status (both JCR defined and implementation-specific) and
not other restrictions that may exist, such as node type constraints.
For example, even though hasPermission may indicate that a particular
Session may add a property at /A/B/C, the node type of the node at /A/B
may prevent the addition of a property called C.</p>]]></long-description>
          <tag line="585" name="param" description="an absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="585" name="param" description="a comma separated list of action strings." type="string" variable="$actions">
            <type by_reference="false">string</type>
          </tag>
          <tag line="585" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="585" name="throws" description="If permission is denied." type="\PHPCR\Security\AccessControlException">
            <type by_reference="false">\PHPCR\Security\AccessControlException</type>
          </tag>
          <tag line="585" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="585" name="api" description=""/>
        </docblock>
        <argument line="630">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="630">
          <name>$actions</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="679" package="phpcr\interfaces">
        <name>hasCapability</name>
        <full_name>hasCapability</full_name>
        <docblock line="632">
          <description><![CDATA[Checks whether an operation can be performed given as much context as
can be determined by the repository, including:]]></description>
          <long-description><![CDATA[<ul>
<li>Permissions granted to the current user, including access control
 privileges.</li>
<li>Current state of the target object (reflecting locks, checkin/checkout
status, retention and hold status etc.).</li>
<li>Repository capabilities.</li>
<li>Node type-enforced restrictions.</li>
<li>Repository configuration-specific restrictions.</li>
</ul>

<p>The implementation of this method is best effort: returning false
guarantees that the operation cannot be performed, but returning true
does not guarantee the opposite.</p>

<p>The methodName parameter identifies the method in question by its name
as defined in the phpdoc.</p>

<p>The target parameter identifies the object on which the specified method
is called.</p>

<p>The arguments parameter contains a hash map consisting of parameter name
mapping to parameter value.</p>

<p>For example, given a Session $s and Node $n then</p>

<pre>

$p['relPath'] = 'foo';
$b = $s->hasCapability("addNode", $n, $p);
</pre>

<p>will result in $b === false if a child node called foo cannot be added
to the node $n within the session $s.</p>]]></long-description>
          <tag line="632" name="param" description="the name of the method." type="string" variable="$methodName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="632" name="param" description="the target object of the operation." type="object" variable="$target">
            <type by_reference="false">object</type>
          </tag>
          <tag line="632" name="param" description="the arguments of the operation." type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="632" name="return" description="false if the operation cannot be performed, true if the&#10;     operation can be performed or if the repository cannot determine&#10;     whether the operation can be performed." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="632" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="632" name="api" description=""/>
        </docblock>
        <argument line="679">
          <name>$methodName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="679">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="679">
          <name>$arguments</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="870" package="phpcr\interfaces">
        <name>importXML</name>
        <full_name>importXML</full_name>
        <docblock line="778">
          <description><![CDATA[Deserializes an XML document and adds the resulting item subgraph as a
child of the node at $parentAbsPath.]]></description>
          <long-description><![CDATA[<p>If the incoming XML does not appear to be a JCR system view XML document
then it is interpreted as a document view XML document.</p>

<p>The tree of new items is built in the transient storage of the Session.
In order to persist the new content, save must be called. The advantage
of this through-the-session method is that (depending on what constraint
checks the implementation leaves until save) structures that violate
node type constraints can be imported, fixed and then saved. The
disadvantage is that a large import will result in a large cache of
pending nodes in the session. See WorkspaceInterface::importXML() for a
version of this method that does not go through the Session.</p>

<p>The flag $uuidBehavior governs how the identifiers of incoming nodes are
handled. There are four options:</p>

<ul>
<li>ImportUUIDBehavior::IMPORT_UUID_CREATE_NEW: Incoming nodes are added
 in the same way that new node is added with Node::addNode(). That
 is, they are either assigned newly created identifiers upon
 addition or upon save (depending on the implementation, see 4.9.1.1
 When Identifiers are Assigned in the specification). In either
 case, identifier collisions will not occur.
 (Weak)references will point to the original node if existing, to
 the imported node with matching id otherwise.</li>
<li>ImportUUIDBehavior::IMPORT_UUID_COLLISION_REMOVE_EXISTING: If an
 incoming node has the same identifier as a node already existing in
 the workspace then the already existing node (and its subgraph) is
 removed from wherever it may be in the workspace before the
 incoming node is added. Note that this can result in nodes
 "disappearing" from locations in the workspace that are remote from
 the location to which the incoming subgraph is being written. Both
 the removal and the new addition will be dispatched on save.</li>
<li>ImportUUIDBehavior::IMPORT_UUID_COLLISION_REPLACE_EXISTING: If an
 incoming node has the same identifier as a node already existing in
 the workspace, then the already-existing node is replaced by the
 incoming node in the same position as the existing node. Note that
 this may result in the incoming subgraph being disaggregated and
 "spread around" to different locations in the workspace. In the
 most extreme case this behavior may result in no node at all being
 added as child of parentAbsPath. This will occur if the topmost
 element of the incoming XML has the same identifier as an existing
 node elsewhere in the workspace. The change will be dispatched on
 save.</li>
<li>ImportUUIDBehavior::IMPORT_UUID_COLLISION_THROW: If an incoming node
 has the same identifier as a node already existing in the workspace
 then an ItemExistsException is thrown.</li>
</ul>

<p>Unlike WorkspaceInterface::importXML(), this method does not
necessarily enforce all node type constraints during deserialization.
Those that would be immediately enforced in a normal write method
(NodeInterface::addNode(), NodeInterface::setProperty() etc.) of this
implementation cause an immediate ConstraintViolationException during
deserialization. All other constraints are checked on save, just as they
are in normal write operations. However, which node type constraints are
enforced depends upon whether node type information in the imported data
is respected, and this is an implementation-specific issue.</p>]]></long-description>
          <tag line="778" name="param" description="the absolute path of the node below which the deserialized subgraph is added." type="string" variable="$parentAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="778" name="param" description="Source location for the XML to be read, Can be anything that works with fopen." type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="778" name="param" description="a four-value flag that governs how incoming identifiers are handled." type="integer" variable="$uuidBehavior">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="778" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="778" name="throws" description="if an error during an I/O operation occurs." type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
          <tag line="778" name="throws" description="if no node exists at parentAbsPath&#10;     and this implementation performs this validation immediately." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="778" name="throws" description="if deserialization would overwrite an&#10;     existing item and this implementation performs this validation&#10;     immediately." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="778" name="throws" description="if a node type or&#10;     other implementation-specific constraint is violated that would be&#10;     checked on a session write method or if uuidBehavior is set to&#10;     IMPORT_UUID_COLLISION_REMOVE_EXISTING and an incoming node has the&#10;     same UUID as the node at parentAbsPath or one of its ancestors." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="778" name="throws" description="if the node at $parentAbsPath is&#10;     read-only due to a checked-in node and this implementation performs&#10;     this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="778" name="throws" description="if incoming stream is not&#10;     a valid XML document." type="\PHPCR\InvalidSerializedDataException">
            <type by_reference="false">\PHPCR\InvalidSerializedDataException</type>
          </tag>
          <tag line="778" name="throws" description="if a lock prevents the addition of the&#10;     subgraph and this implementation performs this validation&#10;     immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="778" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="778" name="api" description=""/>
        </docblock>
        <argument line="870">
          <name>$parentAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="870">
          <name>$uri</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="870">
          <name>$uuidBehavior</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="921" package="phpcr\interfaces">
        <name>exportSystemView</name>
        <full_name>exportSystemView</full_name>
        <docblock line="872">
          <description><![CDATA[Serializes the node (and if $noRecurse is false, the whole subgraph) at
$absPath as an XML stream and outputs it to the supplied URI.]]></description>
          <long-description><![CDATA[<p>The
resulting XML is in the system view form. Note that $absPath must be
the path of a node, not a property.</p>

<p>If $skipBinary is true then any properties of PropertyType::BINARY will
be serialized as if they are empty. That is, the existence of the
property will be serialized, but its content will not appear in the
serialized output (the <sv:value> element will have no content). Note
that in the case of multi-value BINARY properties, the number of values
in the property will be reflected in the serialized output, though they
will all be empty. If $skipBinary is false then the actual value(s) of
each BINARY property is recorded using Base64 encoding.</p>

<p>If $noRecurse is true then only the node at $absPath and its properties,
but not its child nodes, are serialized. If $noRecurse is false then the
entire subgraph rooted at $absPath is serialized.</p>

<p>If the user lacks read access to some subsection of the specified tree,
that section simply does not get serialized, since, from the user's
point of view, it is not there.</p>

<p>The serialized output will reflect the state of the current workspace as
modified by the state of this Session. This means that pending changes
(regardless of whether they are valid according to node type
constraints) and all namespace mappings in the namespace registry, as
modified by the current session-mappings, are reflected in the output.</p>

<p>The output XML will be encoded in UTF-8.</p>]]></long-description>
          <tag line="872" name="param" description="The path of the root of the subgraph to be serialized. This must be the path to a node, not a property" type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="872" name="param" description="The stream resource (i.e. aquired with fopen) to which the XML serialization of the subgraph will be output. Must support the fwrite method." type="resource" variable="$stream">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="872" name="param" description="A boolean governing whether binary properties are to be serialized." type="boolean" variable="$skipBinary">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="872" name="param" description="A boolean governing whether the subgraph at absPath is to be recursed." type="boolean" variable="$noRecurse">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="872" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="872" name="throws" description="if no node exists at absPath." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="872" name="throws" description="if an error during an I/O operation occurs." type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
          <tag line="872" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="872" name="api" description=""/>
        </docblock>
        <argument line="921">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="921">
          <name>$stream</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="921">
          <name>$skipBinary</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="921">
          <name>$noRecurse</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="971" package="phpcr\interfaces">
        <name>exportDocumentView</name>
        <full_name>exportDocumentView</full_name>
        <docblock line="923">
          <description><![CDATA[Serializes the node (and if $noRecurse is false, the whole subgraph) at
$absPath as an XML stream and outputs it to the supplied URI.]]></description>
          <long-description><![CDATA[<p>The resulting XML is in the document view form. Note that $absPath must
be the path of a node, not a property.</p>

<p>If $skipBinary is true then any properties of PropertyType::BINARY will
be serialized as if they are empty. That is, the existence of the
property will be serialized, but its content will not appear in the
serialized output (the value of the attribute will be empty). If
$skipBinary is false then the actual value(s) of each BINARY property is
recorded using Base64 encoding.</p>

<p>If $noRecurse is true then only the node at $absPath and its properties,
but not its child nodes, are serialized. If $noRecurse is false then the
entire subgraph rooted at $absPath is serialized.</p>

<p>If the user lacks read access to some subsection of the specified tree,
that section simply does not get serialized, since, from the user's
point of view, it is not there.</p>

<p>The serialized output will reflect the state of the current workspace as
modified by the state of this Session. This means that pending changes
(regardless of whether they are valid according to node type
constraints) and all namespace mappings in the namespace registry, as
modified by the current session-mappings, are reflected in the output.</p>

<p>The output XML will be encoded in UTF-8.</p>]]></long-description>
          <tag line="923" name="param" description="The path of the root of the subgraph to be serialized. This must be the path to a node, not a property" type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="923" name="param" description="The stream resource (i.e. aquired with fopen) to which the XML serialization of the subgraph will be output. Must support the fwrite method." type="resource" variable="$stream">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="923" name="param" description="A boolean governing whether binary properties are to be serialized." type="boolean" variable="$skipBinary">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="923" name="param" description="A boolean governing whether the subgraph at absPath is to be recursed." type="boolean" variable="$noRecurse">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="923" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="923" name="throws" description="if no node exists at absPath." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="923" name="throws" description="if an error during an I/O operation occurs." type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
          <tag line="923" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="923" name="api" description=""/>
        </docblock>
        <argument line="971">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="971">
          <name>$stream</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="971">
          <name>$skipBinary</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="971">
          <name>$noRecurse</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="998" package="phpcr\interfaces">
        <name>setNamespacePrefix</name>
        <full_name>setNamespacePrefix</full_name>
        <docblock line="973">
          <description><![CDATA[Sets the name of a namespace prefix.]]></description>
          <long-description><![CDATA[<p>Within the scope of this Session, this method maps uri to prefix. The
remapping only affects operations done through this Session. To clear
all remappings, the client must acquire a new Session.
All local mappings already present in the Session that include either
the specified prefix or the specified uri are removed and the new
mapping is added.</p>]]></long-description>
          <tag line="973" name="param" description="The namespace prefix to be set as identifier." type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="973" name="param" description="The loaction of the namespace definition (usually an uri)." type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="973" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="973" name="throws" description="if an attempt is made to map a&#10;     namespace URI to a prefix beginning with the characters &quot;xml&quot; (in&#10;     any combination of case) or if an attempt is made to map either the&#10;     empty prefix or the empty namespace (i.e., if either $prefix or&#10;     $uri are the empty string)." type="\PHPCR\NamespaceException">
            <type by_reference="false">\PHPCR\NamespaceException</type>
          </tag>
          <tag line="973" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="973" name="api" description=""/>
        </docblock>
        <argument line="998">
          <name>$prefix</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="998">
          <name>$uri</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1009" package="phpcr\interfaces">
        <name>getNamespacePrefixes</name>
        <full_name>getNamespacePrefixes</full_name>
        <docblock line="1000">
          <description><![CDATA[Returns all prefixes currently mapped to URIs in this Session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1000" name="return" description="The list of currently registered namespace prefixes." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1000" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1000" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1026" package="phpcr\interfaces">
        <name>getNamespaceURI</name>
        <full_name>getNamespaceURI</full_name>
        <docblock line="1011">
          <description><![CDATA[Returns the URI to which the given prefix is mapped as currently set in
this Session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1011" name="param" description="The identifier of the namespace location to be returned." type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1011" name="return" description="The location of the namespace definition identified by&#10;     its prefix." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1011" name="throws" description="if the specified prefix is unknown." type="\PHPCR\NamespaceException">
            <type by_reference="false">\PHPCR\NamespaceException</type>
          </tag>
          <tag line="1011" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1011" name="api" description=""/>
        </docblock>
        <argument line="1026">
          <name>$prefix</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1042" package="phpcr\interfaces">
        <name>getNamespacePrefix</name>
        <full_name>getNamespacePrefix</full_name>
        <docblock line="1028">
          <description><![CDATA[Returns the prefix to which the given uri is mapped as currently set in
this Session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1028" name="param" description="The loaction of the namespace definition (usually a uri)." type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1028" name="return" description="The prefix of a namespace identified by its uri." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1028" name="throws" description="if the specified uri is unknown." type="\PHPCR\NamespaceException">
            <type by_reference="false">\PHPCR\NamespaceException</type>
          </tag>
          <tag line="1028" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1028" name="api" description=""/>
        </docblock>
        <argument line="1042">
          <name>$uri</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1053" package="phpcr\interfaces">
        <name>logout</name>
        <full_name>logout</full_name>
        <docblock line="1044">
          <description><![CDATA[Releases all resources associated with this Session.]]></description>
          <long-description><![CDATA[<p>This method should be called when a Session is no longer needed.</p>]]></long-description>
          <tag line="1044" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="1044" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1068" package="phpcr\interfaces">
        <name>isLive</name>
        <full_name>isLive</full_name>
        <docblock line="1055">
          <description><![CDATA[Determines if the current session is still valid.]]></description>
          <long-description><![CDATA[<p>Returns true if this Session object is usable by the client. Otherwise,
returns false.</p>

<p>A usable Session is one that is neither logged-out, timed-out nor in
any other way disconnected from the repository.</p>]]></long-description>
          <tag line="1055" name="return" description="true if this Session is usable, false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="1055" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1082" package="phpcr\interfaces">
        <name>getAccessControlManager</name>
        <full_name>getAccessControlManager</full_name>
        <docblock line="1070">
          <description><![CDATA[Returns the access control manager for this Session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1070" name="return" description="the access control manager&#10;     for this Session" type="\PHPCR\Security\AccessControlManager">
            <type by_reference="false">\PHPCR\Security\AccessControlManager</type>
          </tag>
          <tag line="1070" name="throws" description="if access control&#10;     is not supported." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="1070" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1070" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1096" package="phpcr\interfaces">
        <name>getRetentionManager</name>
        <full_name>getRetentionManager</full_name>
        <docblock line="1084">
          <description><![CDATA[Returns the retention and hold manager for this Session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1084" name="return" description="the retention manager&#10;     for this Session." type="\PHPCR\Retention\RetentionManagerInterface">
            <type by_reference="false">\PHPCR\Retention\RetentionManagerInterface</type>
          </tag>
          <tag line="1084" name="throws" description="if retention and&#10;     hold are not supported." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="1084" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1084" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/ImportUUIDBehaviorInterface.php" hash="a8503ee44993a531a2b78826b1cf425c" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="42" package="phpcr\interfaces">
      <name>ImportUUIDBehaviorInterface</name>
      <full_name>\PHPCR\ImportUUIDBehaviorInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The possible actions specified by the uuidBehavior parameter in]]></description>
        <long-description><![CDATA[<ul>
<li>WorkspaceInterface::importXML()</li>
<li>SessionInterface::importXML()</li>
</ul>

<p>If we implement a content handler, the UUID would also be relevant for</p>

<ul>
<li>WorkspaceInterface::getImportContentHandler()</li>
<li>SessionInterface::getImportContentHandler()</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="48" package="phpcr\interfaces">
        <name>IMPORT_UUID_COLLISION_REMOVE_EXISTING</name>
        <full_name>IMPORT_UUID_COLLISION_REMOVE_EXISTING</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="44">
          <description><![CDATA[When importing remove existing item upon collision.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="54" package="phpcr\interfaces">
        <name>IMPORT_UUID_COLLISION_REPLACE_EXISTING</name>
        <full_name>IMPORT_UUID_COLLISION_REPLACE_EXISTING</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="50">
          <description><![CDATA[When importing replace existing item upon collision.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="60" package="phpcr\interfaces">
        <name>IMPORT_UUID_COLLISION_THROW</name>
        <full_name>IMPORT_UUID_COLLISION_THROW</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="56">
          <description><![CDATA[When importing throw exception upon collision.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="66" package="phpcr\interfaces">
        <name>IMPORT_UUID_CREATE_NEW</name>
        <full_name>IMPORT_UUID_CREATE_NEW</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="62">
          <description><![CDATA[When importing create new UUIDs.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="api" description=""/>
        </docblock>
      </constant>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/ValueFormatException.php" hash="2db7f6025fa624ef09389b08b1575b25" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="37" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>ValueFormatException</name>
      <full_name>\PHPCR\ValueFormatException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown when an attempt is made to assign a value to a property
that has an invalid format, given the type of the property.]]></description>
        <long-description><![CDATA[<p>Also thrown
if an attempt is made to read the value of a property using a type-specific
read method of a type into which it is not convertible.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/GuestCredentials.php" hash="bf1fc6684bd367fc84e279aa378200d2" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="true" abstract="true" namespace="PHPCR" line="37" package="phpcr\prototypes">
      <extends/>
      <implements>\PHPCR\CredentialsInterface</implements>
      <name>GuestCredentials</name>
      <full_name>\PHPCR\GuestCredentials</full_name>
      <docblock line="27">
        <description><![CDATA[GuestCredentials is used to obtain a "guest", "public" or "anonymous" session.]]></description>
        <long-description><![CDATA[<p>Note that the characteristics of the session created from the
GuestCredentials remain implementation specific.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="prototypes"/>
        <tag line="27" name="scope" description="prototype"/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Lock/LockManagerInterface.php" hash="4c67bc9b464052936af58f30c7563936" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Lock" line="40" package="phpcr\interfaces">
      <name>LockManagerInterface</name>
      <full_name>\PHPCR\Lock\LockManagerInterface</full_name>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[This interface encapsulates methods for the management of locks.]]></description>
        <long-description><![CDATA[<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. LockManager has to implement either \IteratorAggregate or
\Iterator.
The iterator is equivalent to <b>getLockTokens()</b> returning a list of all
locks. The iterator keys have no significant meaning.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="59" package="phpcr\interfaces">
        <name>addLockToken</name>
        <full_name>addLockToken</full_name>
        <docblock line="42">
          <description><![CDATA[Adds the specified lock token to the current Session.]]></description>
          <long-description><![CDATA[<p>Holding a lock token makes the current Session the owner of the lock
specified by that particular lock token.</p>]]></long-description>
          <tag line="42" name="param" description="A lock token (a string)." type="string" variable="$lockToken">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="42" name="throws" description="if the specified lock token is already&#10;     held by another Session and the implementation does not support&#10;     simultaneous ownership of open-scoped locks." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="42" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
        <argument line="59">
          <name>$lockToken</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="81" package="phpcr\interfaces">
        <name>getLock</name>
        <full_name>getLock</full_name>
        <docblock line="61">
          <description><![CDATA[Returns the Lock object that applies to the node at the specified
absPath.]]></description>
          <long-description><![CDATA[<p>This may be either a lock on that node itself or a deep lock on a node
above that node.</p>]]></long-description>
          <tag line="61" name="param" description="absolute path of node for which to obtain the lock." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="return" description="The applicable Lock object." type="\PHPCR\Lock\LockInterface">
            <type by_reference="false">\PHPCR\Lock\LockInterface</type>
          </tag>
          <tag line="61" name="throws" description="if no lock applies to this node." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="61" name="throws" description="if the current session does not&#10;     have sufficient access to get the lock." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="61" name="throws" description="if no node is found at $absPath" type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="61" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="61" name="api" description=""/>
        </docblock>
        <argument line="81">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="96" package="phpcr\interfaces">
        <name>getLockTokens</name>
        <full_name>getLockTokens</full_name>
        <docblock line="83">
          <description><![CDATA[Gets the list of previously registered tokens.]]></description>
          <long-description><![CDATA[<p>Returns an array containing all lock tokens currently held by the
current Session. Note that any such tokens will represent open-scoped
locks, since session-scoped locks do not have tokens.</p>]]></long-description>
          <tag line="83" name="return" description="an array of lock tokens (strings)" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="83" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="83" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="116" package="phpcr\interfaces">
        <name>holdsLock</name>
        <full_name>holdsLock</full_name>
        <docblock line="98">
          <description><![CDATA[Determines if the node identified by the passed path holds a lock.]]></description>
          <long-description><![CDATA[<p>Returns true if the node at absPath holds a lock; otherwise returns
false. To hold a lock means that this node has actually had a lock
placed on it specifically, as opposed to just having a lock apply to it
due to a deep lock held by a node above.</p>]]></long-description>
          <tag line="98" name="param" description="The absolute path of node to be checked." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="return" description="True, if the node identified by the given path holds a&#10;     lock, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="98" name="throws" description="if no node is found at $absPath" type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="98" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="98" name="api" description=""/>
        </docblock>
        <argument line="116">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="188" package="phpcr\interfaces">
        <name>lock</name>
        <full_name>lock</full_name>
        <docblock line="118">
          <description><![CDATA[Places a lock on the node at absPath.]]></description>
          <long-description><![CDATA[<p>If successful, the node is said to hold the lock.</p>

<p>If <b>isDeep</b> is true then the lock applies to the specified node and
all its descendant nodes; if false, the lock applies only to the
specified node. On a successful lock, the jcr:lockIsDeep property of the
locked node is set to this value.</p>

<p>If <b>isSessionScoped</b> is true then this lock will expire upon the
expiration of the current session (either through an automatic or
explicit SessionInterface::logout()); if false, this lock does not
expire until it is explicitly unlocked, it times out, or it is
automatically unlocked due to a implementation-specific limitation.</p>

<p>The <b>timeout</b> parameter specifies the number of seconds until the
lock times out (if it is not refreshed with LockInterface::refresh() in
the meantime). An implementation may use this information as a hint or
ignore it altogether. Clients can discover the actual timeout by
inspecting the returned Lock object.</p>

<p>The <b>ownerInfo</b> parameter can be used to pass a string holding
owner information relevant to the client. An implementation may either
use or ignore this parameter. If it uses the parameter it must set the
jcr:lockOwner property of the locked node to this value and return this
value on LockInterface::getLockOwner(). If it ignores this parameter the
jcr:lockOwner property (and the value returned by
LockInterface::getLockOwner()) is set to either the value returned by
SessionInterface::getUserID() of the owning session or an
implementation-specific string identifying the owner.</p>

<p>The method returns a Lock object representing the new lock. If the lock
is open-scoped the returned lock will include a lock token. The lock
token is also automatically added to the set of lock tokens held by the
current session.</p>

<p>The addition or change of the properties jcr:lockIsDeep and
jcr:lockOwnerare persisted immediately; there is no need to call save.</p>

<p>It is possible to lock a node even if it is checked-in.</p>]]></long-description>
          <tag line="118" name="param" description="The absolute path of node to be locked" type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="param" description="If true this lock will apply to this node and all its descendants; if false, it applies only to this node." type="boolean" variable="$isDeep">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="118" name="param" description="If true, this lock expires with the current session; if false it expires when explicitly or automatically unlocked for some other reason." type="boolean" variable="$isSessionScoped">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="118" name="param" description="Desired lock timeout in seconds (servers are free to ignore this value); specify PHP_INT_MAX for no timeout. If not specified, defaults to no timeout." type="integer" variable="$timeoutHint">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="118" name="param" description="A string containing owner information supplied by the client; servers are free to ignore this value. If none is specified, the implementation chooses one (i.e. user name of current backend authentication credentials)" type="string" variable="$ownerInfo">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="A Lock object containing a lock token." type="\PHPCR\Lock\LockInterface">
            <type by_reference="false">\PHPCR\Lock\LockInterface</type>
          </tag>
          <tag line="118" name="throws" description="if this node is not mix:lockable or&#10;     this node is already locked or isDeep is true and a descendant node&#10;     of this node already holds a lock." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="118" name="throws" description="if this session does not have&#10;     sufficient access to lock this node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="118" name="throws" description="if this node has pending&#10;     unsaved changes." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="118" name="throws" description="if no node is found at $absPath" type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="118" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="118" name="api" description=""/>
        </docblock>
        <argument line="188">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="188">
          <name>$isDeep</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="188">
          <name>$isSessionScoped</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="188">
          <name>$timeoutHint</name>
          <default><![CDATA[PHP_INT_MAX]]></default>
          <type/>
        </argument>
        <argument line="188">
          <name>$ownerInfo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="206" package="phpcr\interfaces">
        <name>isLocked</name>
        <full_name>isLocked</full_name>
        <docblock line="190">
          <description><![CDATA[Determines if the node at absPath is locked.]]></description>
          <long-description><![CDATA[<p>Returns true if the node at absPath is locked either as a result of a
lock held by that node or by a deep lock on a node above that node;
otherwise returns false.</p>]]></long-description>
          <tag line="190" name="param" description="The absolute path of a node to be checked." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="190" name="return" description="True, if the identified node has a lock." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="190" name="throws" description="if no node is found at $absPath." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="190" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="190" name="api" description=""/>
        </docblock>
        <argument line="206">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="221" package="phpcr\interfaces">
        <name>removeLockToken</name>
        <full_name>removeLockToken</full_name>
        <docblock line="208">
          <description><![CDATA[Removes the specified lock token from this Session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="- a lock token (a string)" type="string" variable="$lockToken">
            <type by_reference="false">string</type>
          </tag>
          <tag line="208" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="208" name="throws" description="if the current Session does not hold&#10;     the specified lock token." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="208" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="208" name="api" description=""/>
        </docblock>
        <argument line="221">
          <name>$lockToken</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="258" package="phpcr\interfaces">
        <name>unlock</name>
        <full_name>unlock</full_name>
        <docblock line="223">
          <description><![CDATA[Removes the lock on the node at absPath.]]></description>
          <long-description><![CDATA[<p>Also removes the properties jcr:lockOwner and jcr:lockIsDeep from that
node. As well, the corresponding lock token is removed from the set of
lock tokens held by the current Session.</p>

<p>If the node does not currently hold a lock or holds a lock for which
this Session is not the owner and is not a "lock-superuser", then a
\PHPCR\Lock\LockException is thrown.</p>

<p><b>Note:</b>
However that the system may give permission to a non-owning session
to unlock a lock. Typically such "lock-superuser" capability is intended
to facilitate administrational clean-up of orphaned open-scoped locks.</p>

<p>Note that it is possible to unlock a node even if it is checked-in (the
lock-related properties will be changed despite the checked-in status).</p>]]></long-description>
          <tag line="223" name="param" description="The absolute path of node to be unlocked." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="223" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="223" name="throws" description="If this node does not currently hold a&#10;     lock or holds a lock for which this Session does not have the&#10;     correct lock token." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="223" name="throws" description="if the current session does not&#10;     have permission to unlock this node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="223" name="throws" description="if this node has pending&#10;     unsaved changes." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="223" name="throws" description="if no node is found at $absPath" type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="223" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="223" name="api" description=""/>
        </docblock>
        <argument line="258">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Lock/LockException.php" hash="c085ecb77f9d5ff079ab51e077508ffe" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Lock" line="35" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>LockException</name>
      <full_name>\PHPCR\Lock\LockException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown when a lock-related error occurs.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="author" description="Karsten Dambekalns &lt;karsten@typo3.org&gt;"/>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" namespace="PHPCR\Lock" package="Default">
        <name>$failureNodePath</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Absolute path of the node that caused the error, in normalized, standard
form, that is, each path segment must be a JCR name in qualified form,
the path must have no trailing slash, no self or parent segments and no
[1] indexes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="59" package="phpcr\exceptions">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="46">
          <description><![CDATA[If a path is passed it must be an absolute path in normalized, standard form,
that is, each path segment must be a JCR name in qualified form, the path
must have no trailing slash, no self or parent segments and no [1]
indexes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="The exception message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="The exception error code" type="integer" variable="$code">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="46" name="param" description="the absolute path of the node that caused the error or null if the implementation chooses not to, or cannot, return a path." type="string" variable="$failureNodePath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="api" description=""/>
        </docblock>
        <argument line="59">
          <name>$message</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="59">
          <name>$code</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="59">
          <name>$failureNodePath</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="73" package="phpcr\exceptions">
        <name>getFailureNodePath</name>
        <full_name>getFailureNodePath</full_name>
        <docblock line="65">
          <description><![CDATA[Returns the absolute path of the node that caused the error or null
if the implementation chooses not to, or cannot, return a path.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="path of the node that caused the error" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="api" description=""/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Lock/LockInterface.php" hash="f030aef08dd5e14fa78ee635799151a1" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Lock" line="34" package="phpcr\interfaces">
      <name>LockInterface</name>
      <full_name>\PHPCR\Lock\LockInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Represents a lock placed on an item.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="53" package="phpcr\interfaces">
        <name>getLockOwner</name>
        <full_name>getLockOwner</full_name>
        <docblock line="36">
          <description><![CDATA[Get the user ID string of the lock owner.]]></description>
          <long-description><![CDATA[<p>Returns the value of the jcr:lockOwner property. This is either the
client supplied owner information (see LockManager::lock()),
an implementation-dependent string identifying the user who either
created the lock or who is bound to the session holding the lock, or
null if none of these are available.</p>

<p>The lock owner's identity is only provided for informational purposes.
It does not govern who can perform an unlock or make changes to the
locked nodes; that depends entirely upon who the token holder is.</p>]]></long-description>
          <tag line="36" name="return" description="a user ID" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="62" package="phpcr\interfaces">
        <name>isDeep</name>
        <full_name>isDeep</full_name>
        <docblock line="55">
          <description><![CDATA[Returns true if this is a deep lock; false otherwise.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="55" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="79" package="phpcr\interfaces">
        <name>getNode</name>
        <full_name>getNode</full_name>
        <docblock line="64">
          <description><![CDATA[Returns the lock holding node.]]></description>
          <long-description><![CDATA[<p>This is not necessarily the node at the path you used to get this lock
instance, if a parent node was deep locked. This method returns the node
that was originally locked.</p>

<p>I.e. $lockManager->getLock($n->getPath())->getNode() (where $n is a
locked node) will only * return $n if $n is the lock holder. If $n is in
the subgraph of the lock holder, $h, then this call will return $h.</p>]]></long-description>
          <tag line="64" name="return" description="a Node" type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="64" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="93" package="phpcr\interfaces">
        <name>getLockToken</name>
        <full_name>getLockToken</full_name>
        <docblock line="81">
          <description><![CDATA[May return the lock token for this lock.]]></description>
          <long-description><![CDATA[<p>If this lock is open-scoped and the current session either holds the
lock token for this lock, or the repository chooses to expose the lock
token to the current session, then this method will return that lock
token. Otherwise this method will return null.</p>]]></long-description>
          <tag line="81" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="108" package="phpcr\interfaces">
        <name>getSecondsRemaining</name>
        <full_name>getSecondsRemaining</full_name>
        <docblock line="95">
          <description><![CDATA[Returns the number of seconds remaining until this locks times out.]]></description>
          <long-description><![CDATA[<p>If the lock has already timed out, a negative value is returned. If the
number of seconds remaining is infinite or unknown, PHP_INT_MAX is
returned.</p>]]></long-description>
          <tag line="95" name="return" description="the number of seconds remaining until this lock times out." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="95" name="throws" description="if the timeout is infinite or unknown" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="95" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="132" package="phpcr\interfaces">
        <name>isLive</name>
        <full_name>isLive</full_name>
        <docblock line="110">
          <description><![CDATA[Determines if the lock is still in effect.]]></description>
          <long-description><![CDATA[<p>Returns true if this Lock object represents a lock that is currently in
effect. If this lock has been unlocked either explicitly or due to an
implementation-specific limitation (like a timeout) then it returns
false.</p>

<p>Note that this method is intended for those cases where one is holding a
Lock object and wants to find out whether the lock (the JCR-level
entity that is attached to the lockable node) that this object
originally represented still exists. For example, a timeout or explicit
unlock will remove a lock from a node but the Lock object
corresponding to that lock may still exist, and in that case its isLive
method will return false.</p>]]></long-description>
          <tag line="110" name="return" description="True, if the lock still counts, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="110" name="throws" description="if an error occurs" type="\PHPCR\Lock\RepositoryException">
            <type by_reference="false">\PHPCR\Lock\RepositoryException</type>
          </tag>
          <tag line="110" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="144" package="phpcr\interfaces">
        <name>isSessionScoped</name>
        <full_name>isSessionScoped</full_name>
        <docblock line="134">
          <description><![CDATA[Determines if this lock is session-scoped.]]></description>
          <long-description><![CDATA[<p>Returns true if this is a session-scoped lock and the scope is bound to
the current session. Returns false otherwise.</p>]]></long-description>
          <tag line="134" name="return" description="True, if the lock current session is locked, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="134" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="159" package="phpcr\interfaces">
        <name>isLockOwningSession</name>
        <full_name>isLockOwningSession</full_name>
        <docblock line="146">
          <description><![CDATA[Determines if the current session owns this lock.]]></description>
          <long-description><![CDATA[<p>Returns true if the current session is the owner of this lock, either
because it is session-scoped and bound to this session or open-scoped
and this session currently holds the token for this lock. Returns false
otherwise.</p>]]></long-description>
          <tag line="146" name="return" description="True, if the the current session is the owner of the&#10;     lock, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="146" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Lock" line="174" package="phpcr\interfaces">
        <name>refresh</name>
        <full_name>refresh</full_name>
        <docblock line="161">
          <description><![CDATA[If this lock's time-to-live is governed by a timer, this method resets
that timer so that the lock does not timeout and expire.]]></description>
          <long-description><![CDATA[<p>If this lock's time-to-live is not governed by a timer, then this method
has no effect.</p>]]></long-description>
          <tag line="161" name="throws" description="if this Session does not hold the&#10;     correct lock token for this lock." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="161" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="161" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Security/AccessControlPolicyInterface.php" hash="4ff226f4b58066755c60b67e5cc99511" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Security" line="38" package="phpcr\interfaces">
      <name>AccessControlPolicyInterface</name>
      <full_name>\PHPCR\Security\AccessControlPolicyInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The AccessControlPolicyInterface is a marker interface for all kind of
access control policies.]]></description>
        <long-description><![CDATA[<p>This API defines two subinterfaces:</p>

<ul>
<li>NamedAccessControlPolicyInterface</li>
<li>AccessControlListInterface</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Security/AccessControlEntryInterface.php" hash="f0b6b5746fe1ef7066e1ec500f08dfe5" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Security" line="41" package="phpcr\interfaces">
      <name>AccessControlEntryInterface</name>
      <full_name>\PHPCR\Security\AccessControlEntryInterface</full_name>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[An AccessControlEntryInterface represents the association of one or more
PrivilegeInterface objects with a specific principal.]]></description>
        <long-description><![CDATA[<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. Concrete AccessControlEntry have to implement either
\RecursiveIterator or \Iterator.
The iterator is equivalent to <b>getPrivileges()</b>, returning a list of
PrivilegeInterface. The iterator keys have no significant meaning.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="50" package="phpcr\interfaces">
        <name>getPrincipal</name>
        <full_name>getPrincipal</full_name>
        <docblock line="43">
          <description><![CDATA[Returns the principal associated with this access control entry.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="return" description="" type="\PHPCR\Security\PrincipalInterface">
            <type by_reference="false">\PHPCR\Security\PrincipalInterface</type>
          </tag>
          <tag line="43" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="59" package="phpcr\interfaces">
        <name>getPrivileges</name>
        <full_name>getPrivileges</full_name>
        <docblock line="52">
          <description><![CDATA[Returns the privileges associated with this access control entry.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="return" description="an array of Privileges." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Security/AccessControlException.php" hash="9cfc68e566636916ebba87d7cd0d7a27" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Security" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>AccessControlException</name>
      <full_name>\PHPCR\Security\AccessControlException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by access control related methods of AccessControlManager.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Security/AccessControlManagerInterface.php" hash="eeeff5d92145cf927dbd1e1b5d362864" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Security" line="40" package="phpcr\interfaces">
      <name>AccessControlManagerInterface</name>
      <full_name>\PHPCR\Security\AccessControlManagerInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The AccessControlManager object is accessed via
SessionInterface::getAccessControlManager().]]></description>
        <long-description><![CDATA[<p>It provides methods for:</p>

<ul>
<li>Access control discovery</li>
<li>Assigning access control policies</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="61" package="phpcr\interfaces">
        <name>getSupportedPrivileges</name>
        <full_name>getSupportedPrivileges</full_name>
        <docblock line="42">
          <description><![CDATA[Gets privileges of an existing node identified by its path.]]></description>
          <long-description><![CDATA[<p>Returns the privileges supported for absolute path $absPath, which must
be an existing node. This method does not return the privileges held by
the session. Instead, it returns the privileges that the repository
supports.</p>]]></long-description>
          <tag line="42" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="An array of Privileges." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="throws" description="if no node at absPath exists or the&#10;     session does not have privilege to retrieve the node." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="42" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
        <argument line="61">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="77" package="phpcr\interfaces">
        <name>privilegeFromName</name>
        <full_name>privilegeFromName</full_name>
        <docblock line="63">
          <description><![CDATA[Returns the privilege with the specified privilegeName.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="The name of an existing privilege." type="string" variable="$privilegeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="return" description="the Privilege with the&#10;     specified $privilegeName." type="\PHPCR\Security\PrivilegeInterface">
            <type by_reference="false">\PHPCR\Security\PrivilegeInterface</type>
          </tag>
          <tag line="63" name="throws" description="if no privilege with the&#10;     specified name exists." type="\PHPCR\Security\AccessControlException">
            <type by_reference="false">\PHPCR\Security\AccessControlException</type>
          </tag>
          <tag line="63" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="63" name="api" description=""/>
        </docblock>
        <argument line="77">
          <name>$privilegeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="110" package="phpcr\interfaces">
        <name>hasPrivileges</name>
        <full_name>hasPrivileges</full_name>
        <docblock line="79">
          <description><![CDATA[Determines if the node identified its path has the given set of
privileges.]]></description>
          <long-description><![CDATA[<p>Returns whether the session has the specified privileges for absolute
path $absPath, which must be an existing node. Testing an aggregate
privilege is equivalent to testing each non aggregate privilege among
the set returned by calling PrivilegeInterface::getAggregatePrivileges()
for that privilege.</p>

<p>The results reported by this method reflect the net effect of the
currently applied control mechanisms. It does not reflect unsaved access
control policies or unsaved access control entries. Changes to access
control status caused by these mechanisms only take effect on
SessionInterface::save() and are only then reflected in the results of
the privilege test methods.</p>]]></long-description>
          <tag line="79" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="param" description="an array of Privileges." type="array" variable="$privileges">
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="return" description="true if the session has the specified privileges; false&#10;     otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="79" name="throws" description="if no node at $absPath exists or&#10;     the session does not have sufficent access to retrieve a node at&#10;     that location." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="79" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="79" name="api" description=""/>
        </docblock>
        <argument line="110">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="110">
          <name>$privileges</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="138" package="phpcr\interfaces">
        <name>getPrivileges</name>
        <full_name>getPrivileges</full_name>
        <docblock line="112">
          <description><![CDATA[Reads the privileges of an existing node identfied by its path.]]></description>
          <long-description><![CDATA[<p>Returns the privileges the session has for absolute path absPath, which
must be an existing node. The returned privileges are those for which
AccessControlManagerInterface::hasPrivileges() would return true.</p>

<p>The results reported by the this method reflect the net effect of the
currently applied control mechanisms. It does not reflect unsaved access
control policies or unsaved access control entries. Changes to access
control status caused by these mechanisms only take effect on
SessionInterface::save() and are only then reflected in the results of
the privilege test methods.</p>]]></long-description>
          <tag line="112" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="an array of Privileges." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="112" name="throws" description="if no node at absPath exists or the&#10;     session does not have sufficent access to retrieve a node at that&#10;     location." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="112" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="112" name="api" description=""/>
        </docblock>
        <argument line="138">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="165" package="phpcr\interfaces">
        <name>getPolicies</name>
        <full_name>getPolicies</full_name>
        <docblock line="140">
          <description><![CDATA[Gets the access control policies previously set to the node identified
by the given path.]]></description>
          <long-description><![CDATA[<p>Returns the AccessControlPolicy objects that have been set to the node
at $absPath or an empty array if no policy has been set. This method
reflects the binding state, including transient policy modifications.
Use getEffectivePolicies(String) in order to determine the policy that
effectively applies at absPath.</p>]]></long-description>
          <tag line="140" name="param" description="The absolute path to a node the privileges shall be fetched of." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="140" name="return" description="an array of AccessControlPolicy objects or an empty array&#10;     if no policy has been set." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="140" name="throws" description="if no node at absPath exists or the&#10;     session does not have sufficent access to retrieve a node at that&#10;     location." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="140" name="throws" description="if the session lacks&#10;     READ_ACCESS_CONTROL privilege for the absPath node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="140" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="140" name="api" description=""/>
        </docblock>
        <argument line="165">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="189" package="phpcr\interfaces">
        <name>getEffectivePolicies</name>
        <full_name>getEffectivePolicies</full_name>
        <docblock line="167">
          <description><![CDATA[Gets the access control policies currently in effect on the node
identified by the given path.]]></description>
          <long-description><![CDATA[<p>Returns the AccessControlPolicy objects that currently are in effect at
the node at $absPath. This may be policies set through this API or some
implementation specific (default) policies.</p>]]></long-description>
          <tag line="167" name="param" description="The absolute path to the node of which privileges are requested." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="167" name="return" description="an array of AccessControlPolicy objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="167" name="throws" description="if no node at absPath exists or the&#10;     session does not have sufficent access to retrieve a node at that&#10;     location." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="167" name="throws" description="if the session lacks&#10;     READ_ACCESS_CONTROL privilege for the absPath node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="167" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="167" name="api" description=""/>
        </docblock>
        <argument line="189">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="212" package="phpcr\interfaces">
        <name>getApplicablePolicies</name>
        <full_name>getApplicablePolicies</full_name>
        <docblock line="191">
          <description><![CDATA[Returns the access control policies that are capable of being applied to
the node at absPath.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="param" description="The absolute path to the node of which privileges are requested." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="return" description="over the applicable access control policies&#10;     implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;. Values&#10;     are the AccessControlPolicyInterface instances. Keys have no&#10;     meaning. Returns an empty iterator if no policies are applicable." type="\Iterator">
            <type by_reference="false">\Iterator</type>
          </tag>
          <tag line="191" name="throws" description="if no node at absPath exists or the&#10;     session does not have sufficent access to retrieve a node at that&#10;     location." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="191" name="throws" description="if the session lacks&#10;     READ_ACCESS_CONTROL privilege for the absPath node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="191" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="191" name="api" description=""/>
        </docblock>
        <argument line="212">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="257" package="phpcr\interfaces">
        <name>setPolicy</name>
        <full_name>setPolicy</full_name>
        <docblock line="214">
          <description><![CDATA[Binds the policy to the node at absPath.]]></description>
          <long-description><![CDATA[<p>The behavior of AccessControlManagerInterface::setPolicy() differs
depending on how the policy object was originally acquired.</p>

<p>If the policy was acquired through
AccessControlManagerInterface::getApplicablePolicies() then that policy
object is added to the node at absPath.</p>

<p>On the other hand, if the policy was acquired through
AccessControlManagerInterface::getPolicies() then that policy object
(usually after being altered) replaces its former version on the node at
$absPath.</p>

<p>This is a session-write method and therefore the access control policy
is only dispatched on Session::save() and will only take effect upon
persist.</p>]]></long-description>
          <tag line="214" name="param" description="The absolute path to the node of which privileges are requested." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="214" name="param" description="The AccessControlPolicy to be applied." type="\PHPCR\Security\AccessControlPolicyInterface" variable="$policy">
            <type by_reference="false">\PHPCR\Security\AccessControlPolicyInterface</type>
          </tag>
          <tag line="214" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="214" name="throws" description="if no node at absPath exists or the&#10;     session does not have sufficent access to retrieve a node at that&#10;     location." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="214" name="throws" description="if the policy is not&#10;     applicable." type="\PHPCR\Security\AccessControlException">
            <type by_reference="false">\PHPCR\Security\AccessControlException</type>
          </tag>
          <tag line="214" name="throws" description="if the session lacks&#10;     MODIFY_ACCESS_CONTROL privilege for the absPath node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="214" name="throws" description="if a lock applies at the node at&#10;     absPath and this implementation performsthis validation immediately&#10;     instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="214" name="throws" description="if the node at absPath is&#10;     read-only due to a checked-in node and this implementation performs&#10;     this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="214" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="214" name="api" description=""/>
        </docblock>
        <argument line="257">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="257">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Security\AccessControlPolicyInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="293" package="phpcr\interfaces">
        <name>removePolicy</name>
        <full_name>removePolicy</full_name>
        <docblock line="259">
          <description><![CDATA[Removes the specified AccessControlPolicyInterface from the node at $absPath.]]></description>
          <long-description><![CDATA[<p>An AccessControlPolicyInterface can only be removed if it was bound to the
specified node through this API before. The effect of the removal only
takes place upon SessionInterface::save(). Note, that an implementation
default or any other effective AccessControlPolicyInterface that has not been
applied to the node before may never be removed using this method.</p>]]></long-description>
          <tag line="259" name="param" description="The absolute path to the node of which privileges are requested." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="259" name="param" description="the policy to be removed." type="\PHPCR\Security\AccessControlPolicyInterface" variable="$policy">
            <type by_reference="false">\PHPCR\Security\AccessControlPolicyInterface</type>
          </tag>
          <tag line="259" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="259" name="throws" description="if no node at absPath exists or the&#10;     session does not have sufficent access to retrieve a node at that&#10;     location." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="259" name="throws" description="if the policy to remove&#10;     does not exist at the node at absPath." type="\PHPCR\Security\AccessControlException">
            <type by_reference="false">\PHPCR\Security\AccessControlException</type>
          </tag>
          <tag line="259" name="throws" description="if the session lacks&#10;     MODIFY_ACCESS_CONTROL privilege for the absPath node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="259" name="throws" description="if a lock applies at the node at&#10;     absPath and this implementation performs this validation&#10;     immediately instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="259" name="throws" description="if the node at absPath is&#10;     versionable and checked-in or is non-versionable but its nearest&#10;     versionable ancestor is checked-in and this implementation performs&#10;     this validation immediately instead of waiting until save." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="259" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="259" name="api" description=""/>
        </docblock>
        <argument line="293">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="293">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Security\AccessControlPolicyInterface</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Security/AccessControlListInterface.php" hash="ed813686092eda0c8d31ec0929721083" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Security" line="46" package="phpcr\interfaces">
      <name>AccessControlListInterface</name>
      <full_name>\PHPCR\Security\AccessControlListInterface</full_name>
      <extends>\PHPCR\Security\AccessControlPolicyInterface</extends>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[The AccessControlListInterface is an AccessControlPolicyInterface
representing a list of access control entries.]]></description>
        <long-description><![CDATA[<p>It is mutable before being set to the AccessControlManagerInterface and
consequently defines methods to read and mutate the list i.e. to get, add or
remove individual AccessControlEntryInterface instances.</p>

<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. AccessControlList has to implement either \RecursiveIterator
or \Iterator.
The iterator is equivalent to <b>getAccessControlEntries()</b> returning
AccessControlEntryInterface instances. The iterator keys have no significant
meaning.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="60" package="phpcr\interfaces">
        <name>getAccessControlEntries</name>
        <full_name>getAccessControlEntries</full_name>
        <docblock line="48">
          <description><![CDATA[Returns all access control entries present with this policy.]]></description>
          <long-description><![CDATA[<p>This method is only guaranteed to return an access control entry object
if that access control entry object has been assigned through this API.</p>]]></long-description>
          <tag line="48" name="return" description="all AccessControlEntry objects present with this policy." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="48" name="throws" description="- if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="48" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="92" package="phpcr\interfaces">
        <name>addAccessControlEntry</name>
        <full_name>addAccessControlEntry</full_name>
        <docblock line="62">
          <description><![CDATA[Registers an access control entry object to the registry.]]></description>
          <long-description><![CDATA[<p>Adds an access control entry to this policy consisting of the specified
principal and the specified privileges.
This method returns true if this policy was modified, false otherwise.</p>

<p>How the entries are grouped within the list is an implementation detail.
An implementation may e.g. combine the specified privileges with those
added by a previous call to addAccessControlEntry for the same
Principal. However, a call to addAccessControlEntry for a given
Principal can never remove a Privilege added by a previous call.</p>

<p>The modification does not take effect until this policy has been set to
a node by calling AccessControlManagerInterface::setPolicy() and
Session::save is performed.</p>]]></long-description>
          <tag line="62" name="param" description="the entity that should have this privilege" type="\PHPCR\Security\PrincipalInterface" variable="$principal">
            <type by_reference="false">\PHPCR\Security\PrincipalInterface</type>
          </tag>
          <tag line="62" name="param" description="- an array of Privileges." type="array" variable="$privileges">
            <type by_reference="false">array</type>
          </tag>
          <tag line="62" name="return" description="true if this policy was modify; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="62" name="throws" description="if the specified&#10;     principal or any of the privileges does not exist or if some other&#10;     access control related exception occurs." type="\PHPCR\Security\AccessControlException">
            <type by_reference="false">\PHPCR\Security\AccessControlException</type>
          </tag>
          <tag line="62" name="throws" description="- if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="62" name="api" description=""/>
        </docblock>
        <argument line="92">
          <name>$principal</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Security\PrincipalInterface</type>
        </argument>
        <argument line="92">
          <name>$privileges</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="113" package="phpcr\interfaces">
        <name>removeAccessControlEntry</name>
        <full_name>removeAccessControlEntry</full_name>
        <docblock line="94">
          <description><![CDATA[Removes the specified access control entry object from this policy.]]></description>
          <long-description><![CDATA[<p>Only exactly those entries obtained through getAccessControlEntries can
be removed. This method does not take effect until this policy has been
re-assigned to a node by calling AccessControlManagerInterface::setPolicy()
and save is performed.</p>]]></long-description>
          <tag line="94" name="param" description="the access control entry to be removed." type="\PHPCR\Security\AccessControlEntryInterface" variable="$ace">
            <type by_reference="false">\PHPCR\Security\AccessControlEntryInterface</type>
          </tag>
          <tag line="94" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="94" name="throws" description="if the specified entry is&#10;     not present on the specified node." type="\PHPCR\Security\AccessControlException">
            <type by_reference="false">\PHPCR\Security\AccessControlException</type>
          </tag>
          <tag line="94" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="94" name="api" description=""/>
        </docblock>
        <argument line="113">
          <name>$ace</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Security\AccessControlEntryInterface</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Security/PrivilegeInterface.php" hash="8d0ea3aef0b5ef116b6a8f407204ce60" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Security" line="51" package="phpcr\interfaces">
      <name>PrivilegeInterface</name>
      <full_name>\PHPCR\Security\PrivilegeInterface</full_name>
      <docblock line="27">
        <description><![CDATA[A privilege represents the capability of performing a particular set of
operations on items in the JCR repository.]]></description>
        <long-description><![CDATA[<p>Each privilege is identified by a JCR name. JCR defines a set of standard
privileges in the jcr namespace. Implementations may add additional
privileges in namespaces other than jcr.</p>

<p>A privilege may be an aggregate privilege. Aggregate privileges are sets of
other privileges. Granting, denying, or testing an aggregate privilege is
equivalent to individually granting, denying, or testing each privilege it
contains. The privileges contained by an aggregate privilege may themselves
be aggregate privileges if the resulting privilege graph is acyclic.</p>

<p>A privilege may be an abstract privilege. Abstract privileges cannot
themselves be granted or denied, but can be composed into aggregate
privileges which are granted or denied.</p>

<p>A privilege can be both aggregate and abstract.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR\Security" line="59" package="phpcr\interfaces">
        <name>JCR_READ</name>
        <full_name>JCR_READ</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}read"]]></value>
        <docblock line="53">
          <description><![CDATA[A constant representing jcr:read (in extended form), the privilege to
retrieve a node and get its properties and their values.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="67" package="phpcr\interfaces">
        <name>JCR_MODIFY_PROPERTIES</name>
        <full_name>JCR_MODIFY_PROPERTIES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}modifyProperties"]]></value>
        <docblock line="61">
          <description><![CDATA[A constant representing jcr:modifyProperties (in extended form), the
privilege to create, modify and remove the properties of a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="75" package="phpcr\interfaces">
        <name>JCR_ADD_CHILD_NODES</name>
        <full_name>JCR_ADD_CHILD_NODES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}addChildNodes"]]></value>
        <docblock line="69">
          <description><![CDATA[A constant representing jcr:addChildNodes (in extended form), the
privilege to create child nodes of a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="92" package="phpcr\interfaces">
        <name>JCR_REMOVE_NODE</name>
        <full_name>JCR_REMOVE_NODE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}removeNode"]]></value>
        <docblock line="77">
          <description><![CDATA[A constant representing jcr:removeNode (in extended form), the privilege
to remove a node.]]></description>
          <long-description><![CDATA[<p>In order to actually remove a node requires jcr:removeNode on that node
and jcr:removeChildNodes on the parent node.</p>

<p>The distinction is provided in order to reflect implementations that
internally model "remove" as a "delete" instead of a "unlink". A
repository that uses the "delete" model can have jcr:removeChildNodes in
every access control policy, so that removal is effectively controlled
by jcr:removeNode.</p>]]></long-description>
          <tag line="77" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="109" package="phpcr\interfaces">
        <name>JCR_REMOVE_CHILD_NODES</name>
        <full_name>JCR_REMOVE_CHILD_NODES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}removeChildNodes"]]></value>
        <docblock line="94">
          <description><![CDATA[A constant representing jcr:removeChildNodes (in extended form), the
privilege to remove child nodes of a node.]]></description>
          <long-description><![CDATA[<p>In order to actually remove a node requires jcr:removeNode on that node
and jcr:removeChildNodes on the parent node.</p>

<p>The distinction is provided in order to reflect implementations that
internally model "remove" as a "unlink" instead of a "delete". A
repository that uses the "unlink" model can have jcr:removeNode in every
access control policy, so that removal is effectively controlled by
jcr:removeChildNodes.</p>]]></long-description>
          <tag line="94" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="122" package="phpcr\interfaces">
        <name>JCR_WRITE</name>
        <full_name>JCR_WRITE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}write"]]></value>
        <docblock line="111">
          <description><![CDATA[A constant representing jcr:write (in extended form), an aggregate
privilege that contains:]]></description>
          <long-description><![CDATA[<ul>
<li>jcr:modifyProperties</li>
<li>jcr:addChildNodes</li>
<li>jcr:removeNode</li>
<li>jcr:removeChildNodes</li>
</ul>]]></long-description>
          <tag line="111" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="130" package="phpcr\interfaces">
        <name>JCR_READ_ACCESS_CONTROL</name>
        <full_name>JCR_READ_ACCESS_CONTROL</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}readAccessControl"]]></value>
        <docblock line="124">
          <description><![CDATA[A constant representing jcr:readAccessControl (in extended form), the
privilege to get the access control policy of a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="138" package="phpcr\interfaces">
        <name>JCR_MODIFY_ACCESS_CONTROL</name>
        <full_name>JCR_MODIFY_ACCESS_CONTROL</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}modifyAccessControl"]]></value>
        <docblock line="132">
          <description><![CDATA[A constant representing jcr:modifyAccessControl (in extended form), the
privilege to modify the access control policies of a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="146" package="phpcr\interfaces">
        <name>JCR_LOCK_MANAGEMENT</name>
        <full_name>JCR_LOCK_MANAGEMENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}lockManagement"]]></value>
        <docblock line="140">
          <description><![CDATA[A constant representing jcr:lockManagement (in extended form), the
privilege to lock and unlock a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="154" package="phpcr\interfaces">
        <name>JCR_VERSION_MANAGEMENT</name>
        <full_name>JCR_VERSION_MANAGEMENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}versionManagement"]]></value>
        <docblock line="148">
          <description><![CDATA[A constant representing jcr:versionManagment (in extended form), the
privilege to perform versioning operations on a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="163" package="phpcr\interfaces">
        <name>JCR_NODE_TYPE_MANAGEMENT</name>
        <full_name>JCR_NODE_TYPE_MANAGEMENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}nodeTypeManagement"]]></value>
        <docblock line="156">
          <description><![CDATA[A constant representing jcr:nodeTypeManagement (in extended form), the
privilege to add and remove mixin node types and change the primary node
type of a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="171" package="phpcr\interfaces">
        <name>JCR_RETENTION_MANAGEMENT</name>
        <full_name>JCR_RETENTION_MANAGEMENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}retentionManagement"]]></value>
        <docblock line="165">
          <description><![CDATA[A constant representing jcr:retentionManagement (in extended form), the
privilege to perform retention management operations on a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="179" package="phpcr\interfaces">
        <name>JCR_LIFECYCLE_MANAGEMENT</name>
        <full_name>JCR_LIFECYCLE_MANAGEMENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}lifecycleManagement"]]></value>
        <docblock line="173">
          <description><![CDATA[A constant representing jcr:lifecycleManagement (in extended form), the
privilege to perform lifecycle operations on a node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Security" line="199" package="phpcr\interfaces">
        <name>JCR_ALL</name>
        <full_name>JCR_ALL</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}all"]]></value>
        <docblock line="181">
          <description><![CDATA[A constant representing jcr:all (in extended form), an aggregate
privilege that contains all predefined privileges.]]></description>
          <long-description><![CDATA[<ul>
<li>jcr:read</li>
<li>jcr:write</li>
<li>jcr:readAccessControl</li>
<li>jcr:modifyAccessControl</li>
<li>jcr:lockManagement</li>
<li>jcr:versionManagement</li>
<li>jcr:nodeTypeManagement</li>
<li>jcr:retentionManagement</li>
<li>jcr:lifecycleManagement</li>
</ul>

<p>It should, in addition, include all implementation-defined privileges.</p>]]></long-description>
          <tag line="181" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="208" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="201">
          <description><![CDATA[Returns the name of this privilege.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="return" description="the name of this privilege." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="201" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="218" package="phpcr\interfaces">
        <name>isAbstract</name>
        <full_name>isAbstract</full_name>
        <docblock line="210">
          <description><![CDATA[Returns whether this privilege is an abstract privilege.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="210" name="return" description="true if this privilege is an abstract privilege; false&#10;     otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="210" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="228" package="phpcr\interfaces">
        <name>isAggregate</name>
        <full_name>isAggregate</full_name>
        <docblock line="220">
          <description><![CDATA[Returns whether this privilege is an aggregate privilege.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="220" name="return" description="true if this privilege is an aggregate privilege; false&#10;     otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="220" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="239" package="phpcr\interfaces">
        <name>getDeclaredAggregatePrivileges</name>
        <full_name>getDeclaredAggregatePrivileges</full_name>
        <docblock line="230">
          <description><![CDATA[If this privilege is an aggregate privilege, returns the privileges
directly contained by the aggregate privilege.]]></description>
          <long-description><![CDATA[<p>Otherwise returns an empty
array.</p>]]></long-description>
          <tag line="230" name="return" description="an array of Privileges" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="230" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="251" package="phpcr\interfaces">
        <name>getAggregatePrivileges</name>
        <full_name>getAggregatePrivileges</full_name>
        <docblock line="241">
          <description><![CDATA[If this privilege is an aggregate privilege, returns the privileges it
contains, the privileges contained by any aggregate privileges among
those, and so on (the transitive closure of privileges contained by this
privilege).]]></description>
          <long-description><![CDATA[<p>Otherwise returns an empty array.</p>]]></long-description>
          <tag line="241" name="return" description="an array of Privileges" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="241" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Security/NamedAccessControlPolicyInterface.php" hash="e6891d5939271c8530642831e6c51be6" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Security" line="38" package="phpcr\interfaces">
      <name>NamedAccessControlPolicyInterface</name>
      <full_name>\PHPCR\Security\NamedAccessControlPolicyInterface</full_name>
      <extends>\PHPCR\Security\AccessControlPolicyInterface</extends>
      <docblock line="27">
        <description><![CDATA[A NamedAccessControlPolicy is an opaque access control policy that is
described by a JCR name and optionally a description.]]></description>
        <long-description><![CDATA[<p>NamedAccessControlPolicy are immutable and can therefore be directly applied
to a node without additional configuration step.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="50" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="40">
          <description><![CDATA[Returns the name of the access control policy, which is JCR name and
should be unique among the choices applicable to any particular node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="return" description="the name of the access control policy. A JCR name." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="40" name="throws" description="- if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="40" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Security/PrincipalInterface.php" hash="b6d29308b4439645833ac06c3df30894" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API]]></description>
      <long-description><![CDATA[<p>This file in particular is derived from the Principal interface
of the package java.security. For more information about the Java
interface have a look at
http://docs.oracle.com/javase/6/docs/api/index.html?java/security/Principal.html</p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Security" line="39" package="Default">
      <name>PrincipalInterface</name>
      <full_name>\PHPCR\Security\PrincipalInterface</full_name>
      <docblock line="29">
        <description><![CDATA[As there are no ACL standard interfaces in PHP this interface provides the
Principal interface similar to the java.security.Principal]]></description>
        <long-description><![CDATA[<p>The Principal is any entity that can be assigned privileges. E.g. a person,
a role, a computer.</p>

<p>The reason to have this interface is that the PHPCR implementation needs to
store the principals and use them on later requests.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="54" package="Default">
        <name>equals</name>
        <full_name>equals</full_name>
        <docblock line="41">
          <description><![CDATA[Compares this principal to the passed object.]]></description>
          <long-description><![CDATA[<p>Returns true if both this
principal and the passed object match the same thing.</p>

<p>This is necessary, as the same hashCode does not guarantee equality, and
the === operator is too strict, as there could be two instances of the
same principal.</p>]]></long-description>
          <tag line="41" name="param" description="" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="41" name="return" description="true if the principal passed to the method is the same&#10;     as this object" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$object</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="64" package="Default">
        <name>hashCode</name>
        <full_name>hashCode</full_name>
        <docblock line="56">
          <description><![CDATA[The hash code must be the same for the same principal.]]></description>
          <long-description><![CDATA[<p>However it should be unique inside your application for different
principals.</p>]]></long-description>
          <tag line="56" name="return" description="a hashcode for this principal." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Security" line="71" package="Default">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="66">
          <description><![CDATA[Returns the name of this principal.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="return" description="name of this principal" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/ReferentialIntegrityException.php" hash="47975c9731d6d1e9578d46324b0ccc3e" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>ReferentialIntegrityException</name>
      <full_name>\PHPCR\ReferentialIntegrityException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown on referential integrity violation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/PropertyType.php" hash="47a22f1112bfe065e7ff55403671614c" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="true" abstract="true" namespace="PHPCR" line="64" package="phpcr">
      <extends/>
      <name>PropertyType</name>
      <full_name>\PHPCR\PropertyType</full_name>
      <docblock line="27">
        <description><![CDATA[The property types supported by the JCR standard.]]></description>
        <long-description><![CDATA[<ul>
<li>The <b>STRING</b> property type is used to store strings.</li>
<li><b>BINARY</b> properties are used to store binary data.</li>
<li>The <b>LONG</b> property type is used to store integers.</li>
<li>The <b>DECIMAL</b> property type is used to store precise decimal numbers.</li>
<li>The <b>DOUBLE</b> property type is used to store floating point numbers.</li>
<li>The <b>DATE</b> property type is used to store time and date information. See 4.2.6.1 Date in the specification.</li>
<li>The <b>BOOLEAN</b> property type is used to store boolean values.</li>
<li>A <b>NAME</b> is a pairing of a namespace and a local name. When read, the namespace is mapped to the current prefix.
See 4.2.6.2 Name in the specification.</li>
<li>A <b>PATH</b> property is an ordered list of path elements. A path element is a NAME with an optional index.
When read, the NAMEs within the path are mapped to their current prefix. A path may be absolute or relative.
See 4.2.6.3 Path in the specification.</li>
<li>A <b>REFERENCE</b> property stores the identifier of a referenceable node (one having type mix:referenceable),
which must exist within the same workspace or session as the REFERENCE property. A REFERENCE property enforces this
referential integrity by preventing (in level 2 implementations) the removal of its target node.
See 4.2.6.4 Reference in the specification.</li>
<li>A <b>WEAKREFERENCE</b> property stores the identifier of a referenceable node (one having type mix:referenceable).</li>
<li>A WEAKREFERENCE property does not enforce referential integrity. See 4.2.6.5 Weak Reference in the specification.</li>
<li>A <b>URI</b> property is identical to STRING property except that it only accepts values that conform to the
syntax of a URI-reference as defined in RFC 3986. See also 4.2.6.6 URI in the specification.</li>
<li><b>UNDEFINED</b> can be used within a property definition (see 4.7.5 Property Definitions) to specify that the
property in question may be of any type. However, it cannot be the actual type of any property instance.
For example it will never be returned by PropertyInterface::getType() and (in level 2 implementations) it cannot be assigned
as the type when creating a new property.</li>
</ul>

<p>PHP Note on date formatting:
  Since there is no formatting for milliseconds in PHP we construct the date formatting by cutting the microseconds
  to 3 positions. Unfortunately this might cause an inacuracy of one millisecond in the worst case.</p>]]></long-description>
        <tag line="27" name="author" description="Sebastian Kurfürst &lt;sebastian@typo3.org&gt;"/>
        <tag line="27" name="author" description="Karsten Dambekalns &lt;karsten@typo3.org&gt;"/>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="78" package="phpcr">
        <name>UNDEFINED</name>
        <full_name>UNDEFINED</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="70">
          <description><![CDATA[This constant can be used within a property definition to specify that
the property in question may be of any type.]]></description>
          <long-description><![CDATA[<p>However, it cannot be the actual type of any property instance. For
example, it will never be returned by Property#getType and it cannot be
assigned as the type when creating a new property.</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="83" package="phpcr">
        <name>STRING</name>
        <full_name>STRING</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="80">
          <description><![CDATA[The STRING property type is used to store strings.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="88" package="phpcr">
        <name>BINARY</name>
        <full_name>BINARY</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="85">
          <description><![CDATA[BINARY properties are used to store binary data.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="93" package="phpcr">
        <name>LONG</name>
        <full_name>LONG</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="90">
          <description><![CDATA[The LONG property type is used to store integers.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="98" package="phpcr">
        <name>DOUBLE</name>
        <full_name>DOUBLE</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="95">
          <description><![CDATA[The DOUBLE property type is used to store floating point numbers.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="103" package="phpcr">
        <name>DATE</name>
        <full_name>DATE</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="100">
          <description><![CDATA[The DATE property type is used to store time and date information.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="108" package="phpcr">
        <name>BOOLEAN</name>
        <full_name>BOOLEAN</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="105">
          <description><![CDATA[The BOOLEAN property type is used to store boolean values.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="114" package="phpcr">
        <name>NAME</name>
        <full_name>NAME</full_name>
        <value><![CDATA[7]]></value>
        <docblock line="110">
          <description><![CDATA[A NAME is a pairing of a namespace and a local name.]]></description>
          <long-description><![CDATA[<p>When read, the
namespace is mapped to the current prefix.</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="121" package="phpcr">
        <name>PATH</name>
        <full_name>PATH</full_name>
        <value><![CDATA[8]]></value>
        <docblock line="116">
          <description><![CDATA[A PATH property is an ordered list of path elements.]]></description>
          <long-description><![CDATA[<p>A path element is a
NAME with an optional index. When read, the NAMEs within the path are
mapped to their current prefix. A path may be absolute or relative.</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="130" package="phpcr">
        <name>REFERENCE</name>
        <full_name>REFERENCE</full_name>
        <value><![CDATA[9]]></value>
        <docblock line="123">
          <description><![CDATA[A REFERENCE property stores the identifier of a referenceable node (one
having type mix:referenceable), which must exist within the same
workspace or session as the REFERENCE property.]]></description>
          <long-description><![CDATA[<p>A REFERENCE property
enforces this referential integrity by preventing the removal of its
target node.</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="137" package="phpcr">
        <name>WEAKREFERENCE</name>
        <full_name>WEAKREFERENCE</full_name>
        <value><![CDATA[10]]></value>
        <docblock line="132">
          <description><![CDATA[A WEAKREFERENCE property stores the identifier of a referenceable node
(one having type mix:referenceable).]]></description>
          <long-description><![CDATA[<p>A WEAKREFERENCE property does not
enforce referential integrity.</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="144" package="phpcr">
        <name>URI</name>
        <full_name>URI</full_name>
        <value><![CDATA[11]]></value>
        <docblock line="139">
          <description><![CDATA[A URI property is identical to STRING property except that it only
accepts values that conform to the syntax of a URI-reference as defined
in RFC 3986.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="149" package="phpcr">
        <name>DECIMAL</name>
        <full_name>DECIMAL</full_name>
        <value><![CDATA[12]]></value>
        <docblock line="146">
          <description><![CDATA[The DECIMAL property type is used to store precise decimal numbers.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="159" package="phpcr">
        <name>TYPENAME_UNDEFINED</name>
        <full_name>TYPENAME_UNDEFINED</full_name>
        <value><![CDATA['undefined']]></value>
        <docblock line="156">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="164" package="phpcr">
        <name>TYPENAME_STRING</name>
        <full_name>TYPENAME_STRING</full_name>
        <value><![CDATA['String']]></value>
        <docblock line="161">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="169" package="phpcr">
        <name>TYPENAME_BINARY</name>
        <full_name>TYPENAME_BINARY</full_name>
        <value><![CDATA['Binary']]></value>
        <docblock line="166">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="174" package="phpcr">
        <name>TYPENAME_LONG</name>
        <full_name>TYPENAME_LONG</full_name>
        <value><![CDATA['Long']]></value>
        <docblock line="171">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="179" package="phpcr">
        <name>TYPENAME_DOUBLE</name>
        <full_name>TYPENAME_DOUBLE</full_name>
        <value><![CDATA['Double']]></value>
        <docblock line="176">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="184" package="phpcr">
        <name>TYPENAME_DATE</name>
        <full_name>TYPENAME_DATE</full_name>
        <value><![CDATA['Date']]></value>
        <docblock line="181">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="189" package="phpcr">
        <name>TYPENAME_BOOLEAN</name>
        <full_name>TYPENAME_BOOLEAN</full_name>
        <value><![CDATA['Boolean']]></value>
        <docblock line="186">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="194" package="phpcr">
        <name>TYPENAME_NAME</name>
        <full_name>TYPENAME_NAME</full_name>
        <value><![CDATA['Name']]></value>
        <docblock line="191">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="199" package="phpcr">
        <name>TYPENAME_PATH</name>
        <full_name>TYPENAME_PATH</full_name>
        <value><![CDATA['Path']]></value>
        <docblock line="196">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="204" package="phpcr">
        <name>TYPENAME_REFERENCE</name>
        <full_name>TYPENAME_REFERENCE</full_name>
        <value><![CDATA['Reference']]></value>
        <docblock line="201">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="209" package="phpcr">
        <name>TYPENAME_WEAKREFERENCE</name>
        <full_name>TYPENAME_WEAKREFERENCE</full_name>
        <value><![CDATA['WeakReference']]></value>
        <docblock line="206">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="214" package="phpcr">
        <name>TYPENAME_URI</name>
        <full_name>TYPENAME_URI</full_name>
        <value><![CDATA['URI']]></value>
        <docblock line="211">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="219" package="phpcr">
        <name>TYPENAME_DECIMAL</name>
        <full_name>TYPENAME_DECIMAL</full_name>
        <value><![CDATA['Decimal']]></value>
        <docblock line="216">
          <description><![CDATA[String constant for type name as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="private" namespace="PHPCR" line="229" package="phpcr">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="224">
          <description><![CDATA[Make instantiation impossible.]]></description>
          <long-description><![CDATA[<p>..</p>]]></long-description>
          <tag line="224" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR" line="243" package="phpcr">
        <name>nameFromValue</name>
        <full_name>nameFromValue</full_name>
        <docblock line="234">
          <description><![CDATA[Returns the name of the specified type, as used in serialization.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="234" name="param" description="type the property type" type="integer" variable="$type">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="234" name="return" description="name of the specified type" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="234" name="throws" description="if the given type is unknown." type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="234" name="api" description=""/>
        </docblock>
        <argument line="243">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR" line="286" package="phpcr">
        <name>valueFromName</name>
        <full_name>valueFromName</full_name>
        <docblock line="277">
          <description><![CDATA[Returns the numeric constant value of the type with the specified name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="277" name="param" description="The name of the property type" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="277" name="return" description="The numeric constant value" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="277" name="throws" description="if the given name is unknown." type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="277" name="api" description=""/>
        </docblock>
        <argument line="286">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR" line="342" package="phpcr">
        <name>determineType</name>
        <full_name>determineType</full_name>
        <docblock line="320">
          <description><![CDATA[Determine PropertyType from on variable type.]]></description>
          <long-description><![CDATA[<p>This is most of the remainder of ValueFactory that is still needed.</p>

<ul>
<li>if the given $value is a Node object, type will be REFERENCE, unless
$weak is set to true which results in WEAKREFERENCE</li>
<li>if the given $value is a DateTime object, the type will be DATE.</li>
</ul>

<p>Note that string is converted to date exactly if it matches the jcr
formatting spec for dates (sYYYY-MM-DDThh:mm:ss.sssTZD) according to
http://www.day.com/specs/jcr/2.0/3_Repository_Model.html#3.6.4.3%20From%20DATE%20To</p>]]></long-description>
          <tag line="320" name="param" description="The variable we need to know the type of" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="320" name="param" description="When a Node is given as $value this can be given as true to create a WEAKREFERENCE." type="boolean" variable="$weak">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="320" name="return" description="One of the type constants" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="320" name="throws" description="if the type can not be determined" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="320" name="api" description=""/>
        </docblock>
        <argument line="342">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="342">
          <name>$weak</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR" line="429" package="phpcr">
        <name>convertType</name>
        <full_name>convertType</full_name>
        <docblock line="382">
          <description><![CDATA[Attempt to convert $values into the proper format for $type.]]></description>
          <long-description><![CDATA[<p>This is the other remaining part of ValueFactory functionality that is
still needed.</p>

<p>If a $srctype is specified, the conversion also checks whether the
conversion is allowed according to the property type conversion of the
jcr specification (link below). This might be needed because NAME and
other properties have quite restricted conversion matrix but in php will
be modelled as string.</p>

<p>Note that for converting to boolean, we follow the PHP convention of
treating any non-empty string as true, not just the word "true".</p>

<p>Table based on <a href="http://www.day.com/specs/jcr/2.0/3_Repository_Model.html#3.6.4%20Property%20Type%20Conversion">JCR spec</a></p>

<p><TABLE>
<TR><TD><BR></TD><TD>STRING (1)</TD><TD>BINARY (2)</TD><TD>LONG (3)</TD><TD>DOUBLE (4)</TD><TD>DATE (5)</TD><TD>BOOLEAN (6)</TD><TD>NAME(7)</TD><TD>PATH (8)</TD><TD>REFERENCE (9/10)</TD><TD>URI (11)</TD><TD>DECIMAL (12)</TD></TR>
<TR><TD>STRING</TD><TD>x</TD><TD>Utf-8 encoded</TD><TD>cast to int</TD><TD>cast to float</TD><TD>SYYYY-MM-DDThh:Mm:ss.sssTZD</TD><TD><I>'' is false, else true</I></TD><TD>if valid name, name</TD><TD>if valid path, as name</TD><TD>check valid uuid</TD><TD>RFC 3986</TD><TD>string</TD></TR>
<TR><TD>BINARY</TD><TD>Utf-8</TD><TD>x</TD><TD COLSPAN="9" BGCOLOR="#E6E6E6">Converted to string and then interpreted as above</TD></TR>
<TR><TD>LONG</TD><TD>cast to string</TD><TD>String, then Utf-8</TD><TD>x</TD><TD>cast to float</TD><TD>Unix Time</TD><TD><I>0 false else true</I></TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>cast to string</TD></TR>
<TR><TD>DOUBLE</TD><TD>cast to string</TD><TD>String, then Utf-8</TD><TD>cast to int</TD><TD>x</TD><TD>Unix Time</TD><TD><I>0.0 is false, else true</I></TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>cast to string</TD></TR>
<TR><TD>DATE</TD><TD>SYYYY-MM-DDThh:<BR>Mm:ss.sssTZD</TD><TD>String, then Utf-8</TD><TD>Unix timestamp</TD><TD>Unix timestamp</TD><TD>x</TD>
<TD><I>true</I></TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>Unix timestamp</TD></TR>
<TR><TD>BOOLEAN</TD><TD>cast to string</TD><TD>String, then Utf-8</TD><TD>0/1</TD><TD>0.0/1.0</TD><TD>ValueFormatException</TD><TD>x</TD><TD>'0'/'1'</TD>
<TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD></TR>
<TR><TD>NAME</TD><TD>Qualified form</TD><TD>String, then Utf-8</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>x</TD><TD>noop (relative path)</TD><TD>ValueFormatException</TD><TD>„./“ and qualified name. % encode illegal characters</TD><TD>ValueFormatException</TD></TR>
<TR><TD>PATH</TD><TD>Standard form</TD><TD>String, then Utf-8</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>if relative path lenght 1 noop / otherwise ValueFormatException</TD><TD>x</TD><TD>ValueFormatException</TD><TD>„./“ if not starting with /. % encode illegal characters</TD><TD>ValueFormatException</TD></TR>
<TR><TD>REFERENCE</TD><TD>noop</TD><TD>String, then Utf-8</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>x</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD></TR>
<TR><TD>URI</TD><TD>noop</TD><TD>String, then Utf-8</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD>
<TD>ValueFormatException</TD><TD>single name: decode %, remove ./  else ValueFormatException</TD><TD>Decode %, remove leading ./ . if not star w. name, / or ./ then ValueFormatException</TD><TD>ValueFormatException</TD><TD>x</TD><TD>ValueFormatException</TD></TR>
<TR><TD>DECIMAL</TD><TD>noop</TD><TD>Utf-8 encoded</TD><TD>cast to int</TD><TD>cast to float</TD><TD>Unix Time</TD><TD><I>0 false else true</I></TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>ValueFormatException</TD><TD>x</TD></TR>
</TABLE></p>]]></long-description>
          <tag line="382" name="param" description="The value or value array to check and convert" type="mixed" variable="$values">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="382" name="param" description="Target type to convert into. One of the type constants in PropertyType" type="int" variable="$type">
            <type by_reference="false">int</type>
          </tag>
          <tag line="382" name="param" description="Source type to convert from, if not specified this is automatically determined, which will miss the string based types that are not strings (DECIMAL, NAME, PATH, URI)" type="int" variable="$srctype">
            <type by_reference="false">int</type>
          </tag>
          <tag line="382" name="return" description="the value typecasted into the proper format (throws an exception if conversion is not possible)" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="382" name="throws" description="is thrown if the specified value cannot be converted to the specified type" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="382" name="throws" description="if the specified Node is not referenceable, the current Session is no longer active, or another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="382" name="throws" description="if the specified DateTime value cannot be expressed in the ISO 8601-based format defined in the JCR 2.0 specification and the implementation does not support dates incompatible with that format." type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="382" name="see" description="\PHPCR\http://www.day.com/specs/jcr/2.0/3_Repository_Model.html#3.6.4%20Property%20Type%20Conversion" refers="\PHPCR\http://www.day.com/specs/jcr/2.0/3_Repository_Model.html#3.6.4%20Property%20Type%20Conversion"/>
        </docblock>
        <argument line="429">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="429">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="429">
          <name>$srctype</name>
          <default><![CDATA[self::UNDEFINED]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="480">The name/path is converted to qualified form according to the current local namespace mapping (see §3.2.5.2 Qualified Form).</todo>
      <todo line="488">how can we provide ValueFormatException on failure? invalid casting leads to 'catchable fatal error' instead of exception</todo>
      <todo line="588">check if valid</todo>
      <todo line="591">check if valid, remove leading ./, decode</todo>
      <todo line="602">check if valid</todo>
      <todo line="608">check if valid, remove leading ./, decode</todo>
      <todo line="623">check if string is valid uuid</todo>
      <todo line="636">check if valid</todo>
      <todo line="659">validate</todo>
    </markers>
    <parse_markers>
      <error line="382" code="50014">Name of argument $value does not match with the DocBlock's name $values in convertType()</error>
      <notice line="382" code="50013">Parameter $values could not be found in convertType()</notice>
    </parse_markers>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NoSuchNodeTypeException.php" hash="83cf44a18a9438187be1a3cc9fa5ffa3" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\NodeType" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>NoSuchNodeTypeException</name>
      <full_name>\PHPCR\NodeType\NoSuchNodeTypeException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by node type-related methods.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NodeDefinitionTemplateInterface.php" hash="af5288a3e7c1e1687737ce66b32d0011" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="40" package="phpcr\interfaces">
      <name>NodeDefinitionTemplateInterface</name>
      <full_name>\PHPCR\NodeType\NodeDefinitionTemplateInterface</full_name>
      <extends>\PHPCR\NodeType\NodeDefinitionInterface</extends>
      <docblock line="27">
        <description><![CDATA[The NodeDefinitionTemplate interface extends NodeDefinition with the addition
of write methods, enabling the characteristics of a child node definition to
be set, after which the NodeDefinitionTemplate is added to a NodeTypeTemplate.]]></description>
        <long-description><![CDATA[<p>See the corresponding get methods for each attribute in NodeDefinition for the
default values assumed when a new empty NodeDefinitionTemplate is created (as
opposed to one extracted from an existing NodeType).</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="51" package="phpcr\interfaces">
        <name>setName</name>
        <full_name>setName</full_name>
        <docblock line="42">
          <description><![CDATA[Sets the name of the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="The name of the node." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
        <argument line="51">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="63" package="phpcr\interfaces">
        <name>setAutoCreated</name>
        <full_name>setAutoCreated</full_name>
        <docblock line="53">
          <description><![CDATA[Sets the auto-create status of the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="The status the autocreate attribute of the node shall have." type="boolean" variable="$autoCreated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="53" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="53" name="api" description=""/>
        </docblock>
        <argument line="63">
          <name>$autoCreated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="74" package="phpcr\interfaces">
        <name>setMandatory</name>
        <full_name>setMandatory</full_name>
        <docblock line="65">
          <description><![CDATA[Sets the mandatory status of the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="The status of the mandatory attribute." type="boolean" variable="$mandatory">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="65" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="65" name="api" description=""/>
        </docblock>
        <argument line="74">
          <name>$mandatory</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="85" package="phpcr\interfaces">
        <name>setOnParentVersion</name>
        <full_name>setOnParentVersion</full_name>
        <docblock line="76">
          <description><![CDATA[Sets the on-parent-version status of the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="An integer constant member of OnParentVersionAction." type="integer" variable="$opv">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="76" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="76" name="api" description=""/>
        </docblock>
        <argument line="85">
          <name>$opv</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="96" package="phpcr\interfaces">
        <name>setProtected</name>
        <full_name>setProtected</full_name>
        <docblock line="87">
          <description><![CDATA[Sets the protected status of the node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="param" description="The status of the protected attribute." type="boolean" variable="$protectedStatus">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="87" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="87" name="api" description=""/>
        </docblock>
        <argument line="96">
          <name>$protectedStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="108" package="phpcr\interfaces">
        <name>setRequiredPrimaryTypeNames</name>
        <full_name>setRequiredPrimaryTypeNames</full_name>
        <docblock line="98">
          <description><![CDATA[Sets the names of the required primary types of this node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="param" description="List of primary type names to be registered." type="array" variable="$requiredPrimaryTypeNames">
            <type by_reference="false">array</type>
          </tag>
          <tag line="98" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="98" name="api" description=""/>
        </docblock>
        <argument line="108">
          <name>$requiredPrimaryTypeNames</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="120" package="phpcr\interfaces">
        <name>setDefaultPrimaryTypeName</name>
        <full_name>setDefaultPrimaryTypeName</full_name>
        <docblock line="110">
          <description><![CDATA[Sets the name of the default primary type of this node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="The name of a primary type name to be registered." type="string" variable="$defaultPrimaryTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="110" name="api" description=""/>
        </docblock>
        <argument line="120">
          <name>$defaultPrimaryTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="132" package="phpcr\interfaces">
        <name>setSameNameSiblings</name>
        <full_name>setSameNameSiblings</full_name>
        <docblock line="122">
          <description><![CDATA[Sets the same-name sibling status of this node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="param" description="Whether same-name siblings of this node should be allowed" type="boolean" variable="$allowSameNameSiblings">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="122" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="122" name="api" description=""/>
        </docblock>
        <argument line="132">
          <name>$allowSameNameSiblings</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NodeDefinitionInterface.php" hash="7a8f5303943527299621b070488c07dd" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="34" package="phpcr\interfaces">
      <name>NodeDefinitionInterface</name>
      <full_name>\PHPCR\NodeType\NodeDefinitionInterface</full_name>
      <extends>\PHPCR\NodeType\ItemDefinitionInterface</extends>
      <docblock line="27">
        <description><![CDATA[A node definition.]]></description>
        <long-description><![CDATA[<p>Used in node type definitions.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="57" package="phpcr\interfaces">
        <name>getRequiredPrimaryTypes</name>
        <full_name>getRequiredPrimaryTypes</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the minimum set of primary node types that the child node must have.]]></description>
          <long-description><![CDATA[<p>Returns an array to support those implementations with multiple inheritance.
This method never returns an empty array. If this node definition places
no requirements on the primary node type, then this method will return an
array containing only the NodeType object representing nt:base, which is
the base of all primary node types and therefore constitutes the least
restrictive node type requirement. Note that any particular node instance
still has only one assigned primary node type, but in multiple-inheritance-
supporting implementations the RequiredPrimaryTypes attribute can be used
to restrict that assigned node type to be a subtype of all of a specified
set of node types.
In implementations that support node type registration an NodeDefinition
object may be acquired (in the form of a NodeDefinitionTemplate) that is
not attached to a live NodeType. In such cases this method returns null.</p>]]></long-description>
          <tag line="36" name="return" description="An array of NodeType objects." type="\PHPCR\NodeType\NodeTypeInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeInterface</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="74" package="phpcr\interfaces">
        <name>getRequiredPrimaryTypeNames</name>
        <full_name>getRequiredPrimaryTypeNames</full_name>
        <docblock line="59">
          <description><![CDATA[Returns the names of the required primary node types.]]></description>
          <long-description><![CDATA[<p>If this NodeDefinition is acquired from a live NodeType this list will
reflect the node types returned by getRequiredPrimaryTypes, above.</p>

<p>If this NodeDefinition is actually a NodeDefinitionTemplate that is not
part of a registered node type, then this method will return the required
primary types as set in that template. If that template is a newly-created
empty one, then this method will return null.</p>]]></long-description>
          <tag line="59" name="return" description="a String array" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="59" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="93" package="phpcr\interfaces">
        <name>getDefaultPrimaryType</name>
        <full_name>getDefaultPrimaryType</full_name>
        <docblock line="76">
          <description><![CDATA[Gets the default primary node type that will be assigned to the child node
if it is created without an explicitly specified primary node type.]]></description>
          <long-description><![CDATA[<p>This node type must be a subtype of (or the same type as) the node types
returned by getRequiredPrimaryTypes.
If null is returned this indicates that no default primary type is
specified and that therefore an attempt to create this node without
specifying a node type will throw a ConstraintViolationException. In
implementations that support node type registration an NodeDefinition
object may be acquired (in the form of a NodeDefinitionTemplate) that is
not attached to a live NodeType. In such cases this method returns null.</p>]]></long-description>
          <tag line="76" name="return" description="A NodeType." type="\PHPCR\NodeType\NodeTypeInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeInterface</type>
          </tag>
          <tag line="76" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="110" package="phpcr\interfaces">
        <name>getDefaultPrimaryTypeName</name>
        <full_name>getDefaultPrimaryTypeName</full_name>
        <docblock line="95">
          <description><![CDATA[Returns the name of the default primary node type.]]></description>
          <long-description><![CDATA[<p>If this NodeDefinition is acquired from a live NodeType this list will
reflect the NodeType returned by getDefaultPrimaryType, above.</p>

<p>If this NodeDefinition is actually a NodeDefinitionTemplate that is not
part of a registered node type, then this method will return the required
primary types as set in that template. If that template is a newly-created
empty one, then this method will return null.</p>]]></long-description>
          <tag line="95" name="return" description="The name of the default primary type." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="95" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="126" package="phpcr\interfaces">
        <name>allowsSameNameSiblings</name>
        <full_name>allowsSameNameSiblings</full_name>
        <docblock line="112">
          <description><![CDATA[Reports whether this child node can have same-name siblings.]]></description>
          <long-description><![CDATA[<p>In other words, whether the parent node can have more than one child
node of this name. If this NodeDefinition is actually a
NodeDefinitionTemplate that is not part of a registered node type, then
this method will return the same name siblings status as set in that
template. If that template is a newly-created empty one, then this
method will return false.</p>]]></long-description>
          <tag line="112" name="return" description="True, if the node my have a same-name sibling, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="112" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/ConstraintViolationException.php" hash="28b7d3650b6be64ab882572c9b3e1e81" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\NodeType" line="38" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>ConstraintViolationException</name>
      <full_name>\PHPCR\NodeType\ConstraintViolationException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown when an action would violate a constraint on repository
structure.]]></description>
        <long-description><![CDATA[<p>For example, when an attempt is made to persistently add an item to a node
that would violate that node's node type.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/PropertyDefinitionTemplateInterface.php" hash="becaff8ed709a0d97bff845e1ff3a4c0" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="41" package="phpcr\interfaces">
      <name>PropertyDefinitionTemplateInterface</name>
      <full_name>\PHPCR\NodeType\PropertyDefinitionTemplateInterface</full_name>
      <extends>\PHPCR\NodeType\PropertyDefinitionInterface</extends>
      <docblock line="27">
        <description><![CDATA[The PropertyDefinitionTemplate interface extends PropertyDefinition with the
addition of write methods, enabling the characteristics of a child property
definition to be set, after which the PropertyDefinitionTemplate is added to
a NodeTypeTemplate.]]></description>
        <long-description><![CDATA[<p>See the corresponding get methods for each attribute in PropertyDefinition for
the default values assumed when a new empty PropertyDefinitionTemplate is
created (as opposed to one extracted from an existing NodeType).</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="52" package="phpcr\interfaces">
        <name>setName</name>
        <full_name>setName</full_name>
        <docblock line="43">
          <description><![CDATA[Sets the name of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="The name of the property definition template." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="43" name="api" description=""/>
        </docblock>
        <argument line="52">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="64" package="phpcr\interfaces">
        <name>setAutoCreated</name>
        <full_name>setAutoCreated</full_name>
        <docblock line="54">
          <description><![CDATA[Sets the auto-create status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="Flag to set the ability to be automatically created." type="boolean" variable="$autoCreated">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="54" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="54" name="api" description=""/>
        </docblock>
        <argument line="64">
          <name>$autoCreated</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="75" package="phpcr\interfaces">
        <name>setMandatory</name>
        <full_name>setMandatory</full_name>
        <docblock line="66">
          <description><![CDATA[Sets the mandatory status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="param" description="The mandatory status of the property." type="boolean" variable="$mandatory">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="66" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="66" name="api" description=""/>
        </docblock>
        <argument line="75">
          <name>$mandatory</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="86" package="phpcr\interfaces">
        <name>setOnParentVersion</name>
        <full_name>setOnParentVersion</full_name>
        <docblock line="77">
          <description><![CDATA[Sets the on-parent-version status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="an int constant member of OnParentVersionAction." type="integer" variable="$opv">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="77" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="77" name="api" description=""/>
        </docblock>
        <argument line="86">
          <name>$opv</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="97" package="phpcr\interfaces">
        <name>setProtected</name>
        <full_name>setProtected</full_name>
        <docblock line="88">
          <description><![CDATA[Sets the protected status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="param" description="The protection status of the property." type="boolean" variable="$protectedStatus">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="88" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="88" name="api" description=""/>
        </docblock>
        <argument line="97">
          <name>$protectedStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="108" package="phpcr\interfaces">
        <name>setRequiredType</name>
        <full_name>setRequiredType</full_name>
        <docblock line="99">
          <description><![CDATA[Sets the required type of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="An integer constant member of PropertyType." type="integer" variable="$type">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="99" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="99" name="api" description=""/>
        </docblock>
        <argument line="108">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="119" package="phpcr\interfaces">
        <name>setValueConstraints</name>
        <full_name>setValueConstraints</full_name>
        <docblock line="110">
          <description><![CDATA[Sets the value constraints of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="List of constrains registered on the property." type="array" variable="$constraints">
            <type by_reference="false">array</type>
          </tag>
          <tag line="110" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="110" name="api" description=""/>
        </docblock>
        <argument line="119">
          <name>$constraints</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="132" package="phpcr\interfaces">
        <name>setDefaultValues</name>
        <full_name>setDefaultValues</full_name>
        <docblock line="121">
          <description><![CDATA[Sets the default value (or values, in the case of a multi-value property)
of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="121" name="param" description="A List of values in the correct type for this property." type="array" variable="$defaultValues">
            <type by_reference="false">array</type>
          </tag>
          <tag line="121" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="121" name="api" description=""/>
        </docblock>
        <argument line="132">
          <name>$defaultValues</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="144" package="phpcr\interfaces">
        <name>setMultiple</name>
        <full_name>setMultiple</full_name>
        <docblock line="134">
          <description><![CDATA[Sets the multi-value status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="134" name="param" description="The status of the ability to store multiple values." type="boolean" variable="$multiple">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="134" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="134" name="api" description=""/>
        </docblock>
        <argument line="144">
          <name>$multiple</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="156" package="phpcr\interfaces">
        <name>setAvailableQueryOperators</name>
        <full_name>setAvailableQueryOperators</full_name>
        <docblock line="146">
          <description><![CDATA[Sets the queryable status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="param" description="operators An array of String constants {@link PropertyDefinition::getAvailableQueryOperators()}." type="array" variable="$operators">
            <type by_reference="false">array</type>
          </tag>
          <tag line="146" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="146" name="api" description=""/>
        </docblock>
        <argument line="156">
          <name>$operators</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="168" package="phpcr\interfaces">
        <name>setFullTextSearchable</name>
        <full_name>setFullTextSearchable</full_name>
        <docblock line="158">
          <description><![CDATA[Sets the full-text-searchable status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="158" name="param" description="The status of the ability to be fulltext-searchable.." type="boolean" variable="$fullTextSearchable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="158" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="158" name="api" description=""/>
        </docblock>
        <argument line="168">
          <name>$fullTextSearchable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="180" package="phpcr\interfaces">
        <name>setQueryOrderable</name>
        <full_name>setQueryOrderable</full_name>
        <docblock line="170">
          <description><![CDATA[Sets the query-orderable status of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="170" name="param" description="The status of the ability being query-orderable." type="boolean" variable="$queryOrderable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="170" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="170" name="api" description=""/>
        </docblock>
        <argument line="180">
          <name>$queryOrderable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NodeTypeTemplateInterface.php" hash="7a3e52a5f6f9fdec0d1481db53e04e24" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="48" package="phpcr\interfaces">
      <name>NodeTypeTemplateInterface</name>
      <full_name>\PHPCR\NodeType\NodeTypeTemplateInterface</full_name>
      <extends>\PHPCR\NodeType\NodeTypeDefinitionInterface</extends>
      <docblock line="27">
        <description><![CDATA[The NodeTypeTemplate interface represents a simple container structure used
to define node types which are then registered through the
NodeTypeManagerInterface::registerNodeType() method.]]></description>
        <long-description><![CDATA[<p>NodeTypeTemplateInterface, like NodeTypeInterface, is a subclass of
NodeTypeDefinitionInterface so it shares with NodeTypeInterface those
methods that are relevant to a static definition.
In addition, NodeTypeTemplate provides methods for setting the attributes of
the definition. Implementations of this interface need not contain any
validation logic.</p>

<p>See the corresponding get methods for each attribute in
NodeTypeDefinitionInterface for the default values assumed when a new empty
NodeTypeTemplateInterface is created (as opposed to one extracted from an
existing NodeTypeInterface).</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="59" package="phpcr\interfaces">
        <name>setName</name>
        <full_name>setName</full_name>
        <docblock line="50">
          <description><![CDATA[Sets the name of the node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="The name of the node type to be set." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="50" name="api" description=""/>
        </docblock>
        <argument line="59">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="70" package="phpcr\interfaces">
        <name>setDeclaredSuperTypeNames</name>
        <full_name>setDeclaredSuperTypeNames</full_name>
        <docblock line="61">
          <description><![CDATA[Sets the names of the supertypes of the node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="param" description="The name of the node supertype to be set." type="array" variable="$names">
            <type by_reference="false">array</type>
          </tag>
          <tag line="61" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="61" name="api" description=""/>
        </docblock>
        <argument line="70">
          <name>$names</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="81" package="phpcr\interfaces">
        <name>setAbstract</name>
        <full_name>setAbstract</full_name>
        <docblock line="72">
          <description><![CDATA[Sets the abstract flag of the node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="Whether this type is abstract." type="boolean" variable="$abstractStatus">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="72" name="api" description=""/>
        </docblock>
        <argument line="81">
          <name>$abstractStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="93" package="phpcr\interfaces">
        <name>setMixin</name>
        <full_name>setMixin</full_name>
        <docblock line="83">
          <description><![CDATA[Sets the mixin flag of the node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="Whether this type is a mixin type (or a primary type)." type="boolean" variable="$mixin">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="83" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="83" name="api" description=""/>
        </docblock>
        <argument line="93">
          <name>$mixin</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="105" package="phpcr\interfaces">
        <name>setOrderableChildNodes</name>
        <full_name>setOrderableChildNodes</full_name>
        <docblock line="95">
          <description><![CDATA[Sets the orderable child nodes flag of the node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="Whether nodes of this type can have orderable children" type="boolean" variable="$orderable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="95" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="95" name="api" description=""/>
        </docblock>
        <argument line="105">
          <name>$orderable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="116" package="phpcr\interfaces">
        <name>setPrimaryItemName</name>
        <full_name>setPrimaryItemName</full_name>
        <docblock line="107">
          <description><![CDATA[Sets the name of the primary item.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="param" description="The name of the primary item." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="107" name="api" description=""/>
        </docblock>
        <argument line="116">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="127" package="phpcr\interfaces">
        <name>setQueryable</name>
        <full_name>setQueryable</full_name>
        <docblock line="118">
          <description><![CDATA[Sets the queryable status of the node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="Whether this node is queryable." type="\PHPCR\NodeType\booolean" variable="$queryable">
            <type by_reference="false">\PHPCR\NodeType\booolean</type>
          </tag>
          <tag line="118" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="118" name="api" description=""/>
        </docblock>
        <argument line="127">
          <name>$queryable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="141" package="phpcr\interfaces">
        <name>getPropertyDefinitionTemplates</name>
        <full_name>getPropertyDefinitionTemplates</full_name>
        <docblock line="129">
          <description><![CDATA[Returns a mutable List of PropertyDefinitionTemplate objects.]]></description>
          <long-description><![CDATA[<p>To define a new NodeTypeTemplate or change an existing one,
PropertyDefinitionTemplate objects can be added to or removed from this
list.</p>]]></long-description>
          <tag line="129" name="return" description="A mutable List (implementing \Traversable, \ArrayAccess,&#10;     and \Countable) of PropertyDefinitionTemplate objects" type="Object">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="129" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="155" package="phpcr\interfaces">
        <name>getNodeDefinitionTemplates</name>
        <full_name>getNodeDefinitionTemplates</full_name>
        <docblock line="143">
          <description><![CDATA[Returns a mutable List of NodeDefinitionTemplate objects.]]></description>
          <long-description><![CDATA[<p>To define a new NodeTypeTemplate or change an existing one,
NodeDefinitionTemplate objects can be added to or removed from this
list.</p>]]></long-description>
          <tag line="143" name="return" description="A mutable List (implementing \Traversable, \ArrayAccess,&#10;     and \Countable) of NodeDefinitionTemplate objects" type="Object">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="143" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NodeTypeInterface.php" hash="0318dbccab0850c5fba0d6333dcd08e1" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="35" package="phpcr\interfaces">
      <name>NodeTypeInterface</name>
      <full_name>\PHPCR\NodeType\NodeTypeInterface</full_name>
      <extends>\PHPCR\NodeType\NodeTypeDefinitionInterface</extends>
      <docblock line="27">
        <description><![CDATA[A NodeType object represents a "live" node type that is registered in the
repository.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR\NodeType" line="50" package="phpcr\interfaces">
        <name>NT_BASE</name>
        <full_name>NT_BASE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}base"]]></value>
        <docblock line="41">
          <description><![CDATA[A constant for the node type name nt:base (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by nt:base are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_PRIMARY_TYPE</li>
<li>\PHPCR\PropertyInterface::JCR_MIXIN_TYPES</li>
</ul>]]></long-description>
          <tag line="41" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="56" package="phpcr\interfaces">
        <name>NT_HIERARCHY_NODE</name>
        <full_name>NT_HIERARCHY_NODE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}hierarchyNode"]]></value>
        <docblock line="52">
          <description><![CDATA[A constant for the node type name nt:hierarchyNode (in extended form).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="62" package="phpcr\interfaces">
        <name>NT_FOLDER</name>
        <full_name>NT_FOLDER</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}folder"]]></value>
        <docblock line="58">
          <description><![CDATA[A constant for the node type name nt:folder (in extended form).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="71" package="phpcr\interfaces">
        <name>NT_FILE</name>
        <full_name>NT_FILE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}file"]]></value>
        <docblock line="64">
          <description><![CDATA[A constant for the node type name nt:file (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the child node declared by nt:file is:
\PHPCR\NodeInterface::JCR_CONTENT</p>]]></long-description>
          <tag line="64" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="80" package="phpcr\interfaces">
        <name>NT_LINKED_FILE</name>
        <full_name>NT_LINKED_FILE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}linkedFile"]]></value>
        <docblock line="73">
          <description><![CDATA[A constant for the node type name nt:linkedFile (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by nt:linkedFile is:
\PHPCR\PropertyInterface::JCR_CONTENT</p>]]></long-description>
          <tag line="73" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="89" package="phpcr\interfaces">
        <name>NT_RESOURCE</name>
        <full_name>NT_RESOURCE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}resource"]]></value>
        <docblock line="82">
          <description><![CDATA[A constant for the node type name nt:resource (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by nt:resource is:
\PHPCR\PropertyInterface::JCR_DATA</p>]]></long-description>
          <tag line="82" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="95" package="phpcr\interfaces">
        <name>NT_UNSTRUCTURED</name>
        <full_name>NT_UNSTRUCTURED</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}unstructured"]]></value>
        <docblock line="91">
          <description><![CDATA[A constant for the node type name nt:unstructured (in extended form).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="111" package="phpcr\interfaces">
        <name>NT_ADDRESS</name>
        <full_name>NT_ADDRESS</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}address"]]></value>
        <docblock line="97">
          <description><![CDATA[A constant for the node type name nt:address (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by nt:base are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_PROTOCOL</li>
<li>\PHPCR\PropertyInterface::JCR_HOST</li>
<li>\PHPCR\PropertyInterface::JCR_PORT</li>
<li>\PHPCR\PropertyInterface::JCR_REPOSITORY</li>
<li>\PHPCR\PropertyInterface::JCR_WORKSPACE</li>
<li>\PHPCR\PropertyInterface::JCR_PATH</li>
<li>\PHPCR\PropertyInterface::JCR_ID</li>
</ul>]]></long-description>
          <tag line="97" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="120" package="phpcr\interfaces">
        <name>MIX_REFERENCEABLE</name>
        <full_name>MIX_REFERENCEABLE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}referenceable"]]></value>
        <docblock line="113">
          <description><![CDATA[A constant for the node type name mix:referenceable (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by mix:referenceable is:
\PHPCR\PropertyInterface::JCR_UUID</p>]]></long-description>
          <tag line="113" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="131" package="phpcr\interfaces">
        <name>MIX_TITLE</name>
        <full_name>MIX_TITLE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}title"]]></value>
        <docblock line="122">
          <description><![CDATA[A constant for the node type name mix:title (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by mix:title are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_TITLE</li>
<li>\PHPCR\PropertyInterface::JCR_DESCRIPTION</li>
</ul>]]></long-description>
          <tag line="122" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="142" package="phpcr\interfaces">
        <name>MIX_CREATED</name>
        <full_name>MIX_CREATED</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}created"]]></value>
        <docblock line="133">
          <description><![CDATA[A constant for the node type name mix:created (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by mix:created are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_CREATED</li>
<li>\PHPCR\PropertyInterface::JCR_CREATED_BY</li>
</ul>]]></long-description>
          <tag line="133" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="153" package="phpcr\interfaces">
        <name>MIX_LAST_MODIFIED</name>
        <full_name>MIX_LAST_MODIFIED</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}lastModified"]]></value>
        <docblock line="144">
          <description><![CDATA[A constant for the node type name mix:lastModified (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by mix:lastModified are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_LAST_MODIFIED</li>
<li>\PHPCR\PropertyInterface::JCR_LAST_MODIFIED_BY</li>
</ul>]]></long-description>
          <tag line="144" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="162" package="phpcr\interfaces">
        <name>MIX_LANGUAGE</name>
        <full_name>MIX_LANGUAGE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}language"]]></value>
        <docblock line="155">
          <description><![CDATA[A constant for the node type name mix:language (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by mix:language is:
\PHPCR\PropertyInterface::JCR_LANGUAGE</p>]]></long-description>
          <tag line="155" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="173" package="phpcr\interfaces">
        <name>MIX_MIMETYPE</name>
        <full_name>MIX_MIMETYPE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}mimeType"]]></value>
        <docblock line="164">
          <description><![CDATA[A constant for the node type name mix:mimeType (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by mix:mimeType are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_MIMETYPE</li>
<li>\PHPCR\PropertyInterface::JCR_ENCODING</li>
</ul>]]></long-description>
          <tag line="164" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="190" package="phpcr\interfaces">
        <name>NT_NODE_TYPE</name>
        <full_name>NT_NODE_TYPE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}nodeType"]]></value>
        <docblock line="175">
          <description><![CDATA[A constant for the node type name nt:nodeType (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the child items declared by nt:nodeType are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_NODE_TYPE_NAME</li>
<li>\PHPCR\PropertyInterface::JCR_SUPERTYPES</li>
<li>\PHPCR\PropertyInterface::JCR_IS_ABSTRACT</li>
<li>\PHPCR\PropertyInterface::JCR_IS_MIXIN</li>
<li>\PHPCR\PropertyInterface::JCR_HAS_ORDERABLE_CHILD_NODES</li>
<li>\PHPCR\PropertyInterface::JCR_PRIMARY_ITEM_NAME</li>
<li>\PHPCR\NodeInterface::JCR_PROPERTY_DEFINITION</li>
<li>\PHPCR\NodeInterface::JCR_CHILD_NODE_DEFINITION</li>
</ul>]]></long-description>
          <tag line="175" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="208" package="phpcr\interfaces">
        <name>NT_PROPERTY_DEFINITION</name>
        <full_name>NT_PROPERTY_DEFINITION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}propertyDefinition"]]></value>
        <docblock line="192">
          <description><![CDATA[A constant for the node type name nt:propertyDefinition (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by nt:propertyDefinition are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_NAME</li>
<li>\PHPCR\PropertyInterface::JCR_AUTOCREATED</li>
<li>\PHPCR\PropertyInterface::JCR_MANDATORY</li>
<li>\PHPCR\PropertyInterface::JCR_PROTECTED</li>
<li>\PHPCR\PropertyInterface::JCR_ON_PARENT_VERSION</li>
<li>\PHPCR\PropertyInterface::JCR_REQUIRED_TYPE</li>
<li>\PHPCR\PropertyInterface::JCR_VALUE_CONSTRAINTS</li>
<li>\PHPCR\PropertyInterface::JCR_DEFAULT_VALUES</li>
<li>\PHPCR\PropertyInterface::JCR_MULTIPLE</li>
</ul>]]></long-description>
          <tag line="192" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="225" package="phpcr\interfaces">
        <name>NT_CHILD_NODE_DEFINITION</name>
        <full_name>NT_CHILD_NODE_DEFINITION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}childNodeDefinition"]]></value>
        <docblock line="210">
          <description><![CDATA[A constant for the node type name nt:childNodeDefinition (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by nt:childNodeDefinition are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_NAME</li>
<li>\PHPCR\PropertyInterface::JCR_AUTOCREATED</li>
<li>\PHPCR\PropertyInterface::JCR_MANDATORY</li>
<li>\PHPCR\PropertyInterface::JCR_PROTECTED</li>
<li>\PHPCR\PropertyInterface::JCR_ON_PARENT_VERSION</li>
<li>\PHPCR\PropertyInterface::JCR_REQUIRED_PRIMARY_TYPES</li>
<li>\PHPCR\PropertyInterface::JCR_DEFAULT_PRIMARY_TYPE</li>
<li>\PHPCR\PropertyInterface::JCR_SAME_NAME_SIBLINGS</li>
</ul>]]></long-description>
          <tag line="210" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="232" package="phpcr\interfaces">
        <name>MIX_SHAREABLE</name>
        <full_name>MIX_SHAREABLE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}shareable"]]></value>
        <docblock line="227">
          <description><![CDATA[A constant for the node type name mix:shareable (in extended form).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="227" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="243" package="phpcr\interfaces">
        <name>MIX_LOCKABLE</name>
        <full_name>MIX_LOCKABLE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}lockable"]]></value>
        <docblock line="234">
          <description><![CDATA[A constant for the node type name mix:lockable (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by mix:lockable are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_LOCK_OWNER</li>
<li>\PHPCR\PropertyInterface::JCR_LOCK_IS_DEEP</li>
</ul>]]></long-description>
          <tag line="234" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="254" package="phpcr\interfaces">
        <name>MIX_LIFECYCLE</name>
        <full_name>MIX_LIFECYCLE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}lifecycle"]]></value>
        <docblock line="245">
          <description><![CDATA[A constant for the node type name mix:lifecycle (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by mix:lifecycle are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_LIFECYCLE_POLICY</li>
<li>\PHPCR\PropertyInterface::JCR_CURRENT_LIFECYCLE_STATE</li>
</ul>]]></long-description>
          <tag line="245" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="263" package="phpcr\interfaces">
        <name>MIX_SIMPLE_VERSIONABLE</name>
        <full_name>MIX_SIMPLE_VERSIONABLE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}simpleVersionable"]]></value>
        <docblock line="256">
          <description><![CDATA[A constant for the node type name mix:simpleVersionable (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by mix:simpleVersionable is:
\PHPCR\PropertyInterface::JCR_IS_CHECKED_OUT</p>]]></long-description>
          <tag line="256" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="278" package="phpcr\interfaces">
        <name>MIX_VERSIONABLE</name>
        <full_name>MIX_VERSIONABLE</full_name>
        <value><![CDATA["{http://www.jcp.org/mix/1.0}versionable"]]></value>
        <docblock line="265">
          <description><![CDATA[A constant for the node type name mix:versionable (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by mix:versionable are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_VERSION_HISTORY</li>
<li>\PHPCR\PropertyInterface::JCR_BASE_VERSION</li>
<li>\PHPCR\PropertyInterface::JCR_PREDECESSORS</li>
<li>\PHPCR\PropertyInterface::JCR_MERGE_FAILED</li>
<li>\PHPCR\PropertyInterface::JCR_ACTIVITY</li>
<li>\PHPCR\PropertyInterface::JCR_CONFIGURATION</li>
</ul>]]></long-description>
          <tag line="265" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="291" package="phpcr\interfaces">
        <name>NT_VERSION_HISTORY</name>
        <full_name>NT_VERSION_HISTORY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}versionHistory"]]></value>
        <docblock line="280">
          <description><![CDATA[A constant for the node type name nt:versionHistory (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the child items declared by nt:versionHistory are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_VERSIONABLE_UUID</li>
<li>\PHPCR\PropertyInterface::JCR_COPIED_FROM</li>
<li>\PHPCR\NodeInterface::JCR_ROOT_VERSION</li>
<li>\PHPCR\NodeInterface::JCR_VERSION_LABELS</li>
</ul>]]></long-description>
          <tag line="280" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="305" package="phpcr\interfaces">
        <name>NT_VERSION</name>
        <full_name>NT_VERSION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}version"]]></value>
        <docblock line="293">
          <description><![CDATA[A constant for the node type name nt:version (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the child items declared by nt:version are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_CREATED</li>
<li>\PHPCR\PropertyInterface::JCR_PREDECESSORS</li>
<li>\PHPCR\PropertyInterface::JCR_SUCCESSORS</li>
<li>\PHPCR\PropertyInterface::JCR_ACTIVITY</li>
<li>\PHPCR\NodeInterface::JCR_FROZEN_NODE</li>
</ul>]]></long-description>
          <tag line="293" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="317" package="phpcr\interfaces">
        <name>NT_FROZEN_NODE</name>
        <full_name>NT_FROZEN_NODE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}frozenNode"]]></value>
        <docblock line="307">
          <description><![CDATA[A constant for the node type name nt:frozenNode (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by nt:frozenNode are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_FROZEN_PRIMARY_TYPE</li>
<li>\PHPCR\PropertyInterface::JCR_FROZEN_MIXIN_TYPES</li>
<li>\PHPCR\PropertyInterface::JCR_FROZEN_UUID</li>
</ul>]]></long-description>
          <tag line="307" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="326" package="phpcr\interfaces">
        <name>NT_VERSIONED_CHILD</name>
        <full_name>NT_VERSIONED_CHILD</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}versionedChild"]]></value>
        <docblock line="319">
          <description><![CDATA[A constant for the node type name nt:versionedChild (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by nt:versionedChild is:
\PHPCR\PropertyInterface::JCR_CHILD_VERSION_HISTORY</p>]]></long-description>
          <tag line="319" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="335" package="phpcr\interfaces">
        <name>NT_ACTIVITY</name>
        <full_name>NT_ACTIVITY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}activity"]]></value>
        <docblock line="328">
          <description><![CDATA[A constant for the node type name nt:activity (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by nt:activity is:
\PHPCR\PropertyInterface::JCR_TITLE</p>]]></long-description>
          <tag line="328" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="344" package="phpcr\interfaces">
        <name>NT_CONFIGURATION</name>
        <full_name>NT_CONFIGURATION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}configuration"]]></value>
        <docblock line="337">
          <description><![CDATA[A constant for the node type name nt:configuration (in extended form).]]></description>
          <long-description><![CDATA[<p>A constant for the name of the property declared by nt:configuration is:
\PHPCR\PropertyInterface::JCR_ROOT</p>]]></long-description>
          <tag line="337" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\NodeType" line="355" package="phpcr\interfaces">
        <name>NT_QUERY</name>
        <full_name>NT_QUERY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/nt/1.0}query"]]></value>
        <docblock line="346">
          <description><![CDATA[A constant for the node type name nt:query (in extended form).]]></description>
          <long-description><![CDATA[<p>Constants for the names of the properties declared by nt:query are:</p>

<ul>
<li>\PHPCR\PropertyInterface::JCR_STATEMENT</li>
<li>\PHPCR\PropertyInterface::JCR_LANGUAGE</li>
</ul>]]></long-description>
          <tag line="346" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="370" package="phpcr\interfaces">
        <name>getSupertypes</name>
        <full_name>getSupertypes</full_name>
        <docblock line="359">
          <description><![CDATA[Returns all supertypes of this node type in the node type inheritance
hierarchy.]]></description>
          <long-description><![CDATA[<p>For primary types apart from nt:base, this list will always
include at least nt:base. For mixin types, there is no required supertype.</p>]]></long-description>
          <tag line="359" name="return" description="List of \PHPCR\NodeType\NodeType objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="359" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="385" package="phpcr\interfaces">
        <name>getDeclaredSupertypes</name>
        <full_name>getDeclaredSupertypes</full_name>
        <docblock line="372">
          <description><![CDATA[Returns the direct supertypes of this node type in the node type
inheritance hierarchy, that is, those actually declared in this node
type.]]></description>
          <long-description><![CDATA[<p>In single-inheritance systems, this will always be an array of
size 0 or 1. In systems that support multiple inheritance of node
types this array may be of size greater than 1.</p>]]></long-description>
          <tag line="372" name="return" description="List of \PHPCR\NodeType\NodeTypeInterface objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="372" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="399" package="phpcr\interfaces">
        <name>getSubtypes</name>
        <full_name>getSubtypes</full_name>
        <docblock line="387">
          <description><![CDATA[Returns all subtypes of this node type in the node type inheritance
hierarchy.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="387" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;     Keys are the node type names, values the corresponding&#10;     NodeTypeInterface instances." type="\PHPCR\NodeType\Iterator">
            <type by_reference="false">\PHPCR\NodeType\Iterator</type>
          </tag>
          <tag line="387" name="see" description="\PHPCR\NodeType\getDeclaredSubtypes()" refers="\PHPCR\NodeType\getDeclaredSubtypes()"/>
          <tag line="387" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="414" package="phpcr\interfaces">
        <name>getDeclaredSubtypes</name>
        <full_name>getDeclaredSubtypes</full_name>
        <docblock line="401">
          <description><![CDATA[Returns the direct subtypes of this node type in the node type inheritance
hierarchy, that is, those which actually declared this node type in their
list of supertypes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="401" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;     Keys are the node type names, values the corresponding&#10;     NodeTypeInterface instances." type="\PHPCR\NodeType\Iterator">
            <type by_reference="false">\PHPCR\NodeType\Iterator</type>
          </tag>
          <tag line="401" name="see" description="\PHPCR\NodeType\getSubtypes()" refers="\PHPCR\NodeType\getSubtypes()"/>
          <tag line="401" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="429" package="phpcr\interfaces">
        <name>isNodeType</name>
        <full_name>isNodeType</full_name>
        <docblock line="416">
          <description><![CDATA[Reports if the name of this node type or any of its direct or indirect
supertypes is equal to nodeTypeName.]]></description>
          <long-description><![CDATA[<p>Returns true if the name of this node type or any of its direct or
indirect supertypes is equal to nodeTypeName, otherwise returns false.</p>]]></long-description>
          <tag line="416" name="param" description="the name of a node type." type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="416" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="416" name="api" description=""/>
        </docblock>
        <argument line="429">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="442" package="phpcr\interfaces">
        <name>getPropertyDefinitions</name>
        <full_name>getPropertyDefinitions</full_name>
        <docblock line="431">
          <description><![CDATA[Returns an array containing the property definitions of this node type.]]></description>
          <long-description><![CDATA[<p>This includes both those property definitions actually declared
in this node type and those inherited from the supertypes of this type.</p>]]></long-description>
          <tag line="431" name="return" description="An array of \PHPCR\NodeType\PropertyDefinition containing&#10;     the property definitions." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="431" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="455" package="phpcr\interfaces">
        <name>getChildNodeDefinitions</name>
        <full_name>getChildNodeDefinitions</full_name>
        <docblock line="444">
          <description><![CDATA[Returns an array containing the child node definitions of this node type.]]></description>
          <long-description><![CDATA[<p>This includes both those child node definitions actually declared in this
node type and those inherited from the supertypes of this node type.</p>]]></long-description>
          <tag line="444" name="return" description="An array of \PHPCR\NodeType\NodeDefinitionInterface containing the&#10;     child node definitions." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="444" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="472" package="phpcr\interfaces">
        <name>canSetProperty</name>
        <full_name>canSetProperty</full_name>
        <docblock line="457">
          <description><![CDATA[Determines if the node type allows to set the value of a property.]]></description>
          <long-description><![CDATA[<p>Returns true if setting propertyName is allowed and the value is of the
required type or can be converted into that type.
Otherwise returns false.</p>]]></long-description>
          <tag line="457" name="param" description="The name of the property" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="457" name="param" description="A variable or an array of variables" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="457" name="return" description="True if setting propertyName to value is allowed by this&#10;     node type, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="457" name="api" description=""/>
        </docblock>
        <argument line="472">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="472">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="493" package="phpcr\interfaces">
        <name>canAddChildNode</name>
        <full_name>canAddChildNode</full_name>
        <docblock line="474">
          <description><![CDATA[Determines if this node type allows the addition of a child node.]]></description>
          <long-description><![CDATA[<p>Returns true if this node type allows the addition of a child node called
childNodeName without specific node type information (that is, given the
definition of this parent node type, the child node name is sufficient to
determine the intended child node type). Returns false otherwise.
If $nodeTypeName is given returns true if this node type allows the
addition of a child node called childNodeName of node type nodeTypeName.
Returns false otherwise.</p>]]></long-description>
          <tag line="474" name="param" description="The name of the child node." type="string" variable="$childNodeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="474" name="param" description="The name of the node type of the child node." type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="474" name="return" description="True, if the node type allows the addition of a child&#10;     node, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="474" name="api" description=""/>
        </docblock>
        <argument line="493">
          <name>$childNodeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="493">
          <name>$nodeTypeName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="508" package="phpcr\interfaces">
        <name>canRemoveNode</name>
        <full_name>canRemoveNode</full_name>
        <docblock line="495">
          <description><![CDATA[Reports if the node type allows the removal of the given node.]]></description>
          <long-description><![CDATA[<p>Returns true if removing the child node called nodeName is allowed by this
node type. Returns false otherwise.</p>]]></long-description>
          <tag line="495" name="param" description="The name of the child node." type="string" variable="$nodeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="495" name="return" description="True, if the node type allows to remove the passed node,&#10;     else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="495" name="api" description=""/>
        </docblock>
        <argument line="508">
          <name>$nodeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="524" package="phpcr\interfaces">
        <name>canRemoveProperty</name>
        <full_name>canRemoveProperty</full_name>
        <docblock line="510">
          <description><![CDATA[Determines if the node type allows to remove the property identified by
the given name.]]></description>
          <long-description><![CDATA[<p>Returns true if removing the property called propertyName is allowed by
this node type. Returns false otherwise.</p>]]></long-description>
          <tag line="510" name="param" description="The name of the property" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="510" name="return" description="True, if the removal of the property is allowed, else&#10;     false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="510" name="api" description=""/>
        </docblock>
        <argument line="524">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NodeTypeDefinitionInterface.php" hash="6751cf1e61d5a9983bbca2434c6d7def" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="46" package="phpcr\interfaces">
      <name>NodeTypeDefinitionInterface</name>
      <full_name>\PHPCR\NodeType\NodeTypeDefinitionInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The NodeTypeDefinition interface provides methods for discovering the
static definition of a node type.]]></description>
        <long-description><![CDATA[<p>The information methods may be used both before and after the node type is
registered. Its subclass NodeType adds methods that are relevant only when
the node type is "live"; that is, after it has been registered. Note that
the separate NodeDefinition interface only plays a significant role in
implementations that support node type registration.</p>

<p>In those cases it serves as the superclass of both NodeType and
NodeTypeTemplate. In implementations that do not support node type
registration, only objects implementing the subinterface NodeType will
be encountered.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="59" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="48">
          <description><![CDATA[Returns the name of the node type.]]></description>
          <long-description><![CDATA[<p>In implementations that support node type registration, if this
NodeTypeDefinition object is actually a newly-created empty
NodeTypeTemplate, then this method will return null.</p>]]></long-description>
          <tag line="48" name="return" description="The name of the node type." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="73" package="phpcr\interfaces">
        <name>getDeclaredSupertypeNames</name>
        <full_name>getDeclaredSupertypeNames</full_name>
        <docblock line="61">
          <description><![CDATA[Returns the names of the supertypes actually declared in this node type.]]></description>
          <long-description><![CDATA[<p>In implementations that support node type registration, if this
NodeTypeDefinition object is actually a newly-created empty
NodeTypeTemplate, then this method will return an array containing a
single string indicating the node type nt:base.</p>]]></long-description>
          <tag line="61" name="return" description="List of names of declared supertypes." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="61" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="91" package="phpcr\interfaces">
        <name>isAbstract</name>
        <full_name>isAbstract</full_name>
        <docblock line="75">
          <description><![CDATA[Reports if this is an abstract node type.]]></description>
          <long-description><![CDATA[<p>Returns true if this is an abstract node type; returns false otherwise.
An abstract node type is one that cannot be assigned as the primary or
mixin type of a node but can be used in the definitions of other node
types as a superclass.</p>

<p>In implementations that support node type registration, if this
NodeTypeDefinition object is actually a newly-created empty
NodeTypeTemplate, then this method will return false.</p>]]></long-description>
          <tag line="75" name="return" description="True, if the current type is abstract, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="75" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="105" package="phpcr\interfaces">
        <name>isMixin</name>
        <full_name>isMixin</full_name>
        <docblock line="93">
          <description><![CDATA[Reports if this is a mixin node type.]]></description>
          <long-description><![CDATA[<p>Returns true if this is a mixin type; returns false if it is primary.
In implementations that support node type registration, if this
NodeTypeDefinition object is actually a newly-created empty
NodeTypeTemplate, then this method will return false.</p>]]></long-description>
          <tag line="93" name="return" description="True if this is a mixin type, else false;" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="93" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="128" package="phpcr\interfaces">
        <name>hasOrderableChildNodes</name>
        <full_name>hasOrderableChildNodes</full_name>
        <docblock line="107">
          <description><![CDATA[Determines if nodes of this type must support orderable child nodes.]]></description>
          <long-description><![CDATA[<p>Returns true if nodes of this type must support orderable child nodes;
returns false otherwise. If a node type returns true on a call to this
method, then all nodes of that node type must support the method
NodeInterface::orderBefore(). If a node type returns false on a call to
this method, then nodes of that node type may support
NodeInterface::orderBefore(). Only the primary node type of a node
controls that node's status in this regard. This setting on a mixin node
type will not have any effect on the node.</p>

<p>In implementations that support node type registration, if this
NodeTypeDefinitionInterface object is actually a newly-created empty
NodeTypeTemplateInterface, then this method will return false.</p>]]></long-description>
          <tag line="107" name="return" description="True, if nodes of this type must support orderable child&#10;     nodes, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="107" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="148" package="phpcr\interfaces">
        <name>isQueryable</name>
        <full_name>isQueryable</full_name>
        <docblock line="130">
          <description><![CDATA[Determins if the node type is queryable.]]></description>
          <long-description><![CDATA[<p>Returns true if the node type is queryable, meaning that the
available-query-operators, full-text-searchable and query-orderable
attributes of its property definitions take effect.</p>

<p>If a node type is declared non-queryable then these attributes of its
property definitions have no effect.</p>]]></long-description>
          <tag line="130" name="return" description="True, if the node type is queryable, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="130" name="see" description="\PHPCR\NodeType\PropertyDefinition::getAvailableQueryOperators()" refers="\PHPCR\NodeType\PropertyDefinition::getAvailableQueryOperators()"/>
          <tag line="130" name="see" description="\PHPCR\NodeType\PropertyDefinition::isFullTextSearchable()" refers="\PHPCR\NodeType\PropertyDefinition::isFullTextSearchable()"/>
          <tag line="130" name="see" description="\PHPCR\NodeType\PropertyDefinition::isQueryOrderable()" refers="\PHPCR\NodeType\PropertyDefinition::isQueryOrderable()"/>
          <tag line="130" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="165" package="phpcr\interfaces">
        <name>getPrimaryItemName</name>
        <full_name>getPrimaryItemName</full_name>
        <docblock line="150">
          <description><![CDATA[Returns the name of the primary item (one of the child items of the nodes
of this node type).]]></description>
          <long-description><![CDATA[<p>If this node has no primary item, then this method returns null. This
indicator is used by the method NodeInterface::getPrimaryItem().</p>

<p>In implementations that support node type registration, if this
NodeTypeDefinitionInterface object is actually a newly-created empty
NodeTypeTemplateInterface, then this method will return null.</p>]]></long-description>
          <tag line="150" name="return" description="The name of the primary item." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="179" package="phpcr\interfaces">
        <name>getDeclaredPropertyDefinitions</name>
        <full_name>getDeclaredPropertyDefinitions</full_name>
        <docblock line="167">
          <description><![CDATA[Returns an array containing the property definitions actually declared
in this node type.]]></description>
          <long-description><![CDATA[<p>In implementations that support node type registration, if this
NodeTypeDefinition object is actually a newly-created empty
NodeTypeTemplate, then this method will return null.</p>]]></long-description>
          <tag line="167" name="return" description="An array of PropertyDefinitions." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="167" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="193" package="phpcr\interfaces">
        <name>getDeclaredChildNodeDefinitions</name>
        <full_name>getDeclaredChildNodeDefinitions</full_name>
        <docblock line="181">
          <description><![CDATA[Returns an array containing the child node definitions actually
declared in this node type.]]></description>
          <long-description><![CDATA[<p>In implementations that support node type registration, if this
NodeTypeDefinition object is actually a newly-created empty
NodeTypeTemplate, then this method will return null.</p>]]></long-description>
          <tag line="181" name="return" description="An array of NodeDefinitions." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="181" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/InvalidNodeTypeDefinitionException.php" hash="d84b6be1468168e6a49e6d9f486a03f1" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\NodeType" line="35" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>InvalidNodeTypeDefinitionException</name>
      <full_name>\PHPCR\NodeType\InvalidNodeTypeDefinitionException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown when an attempt is made to register an invalid node
type definition template.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NodeTypeExistsException.php" hash="f600dd9a44705eac57d8984c41372803" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\NodeType" line="35" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>NodeTypeExistsException</name>
      <full_name>\PHPCR\NodeType\NodeTypeExistsException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown when an attempt is made to register a node type that
already exists, and allowUpdate has not been set to true.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/PropertyDefinitionInterface.php" hash="dcbcbd69f0b182642953fdaf50752065" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="34" package="phpcr\interfaces">
      <name>PropertyDefinitionInterface</name>
      <full_name>\PHPCR\NodeType\PropertyDefinitionInterface</full_name>
      <extends>\PHPCR\NodeType\ItemDefinitionInterface</extends>
      <docblock line="27">
        <description><![CDATA[A property definition.]]></description>
        <long-description><![CDATA[<p>Used in node type definitions.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="65" package="phpcr\interfaces">
        <name>getRequiredType</name>
        <full_name>getRequiredType</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the required type of the property.]]></description>
          <long-description><![CDATA[<p>Possible property types of:</p>

<ul>
<li>PropertyType::STRING</li>
<li>PropertyType::DATE</li>
<li>PropertyType::BINARY</li>
<li>PropertyType::DOUBLE</li>
<li>PropertyType::DECIMAL</li>
<li>PropertyType::LONG</li>
<li>PropertyType::BOOLEAN</li>
<li>PropertyType::NAME</li>
<li>PropertyType::PATH</li>
<li>PropertyType::URI</li>
<li>PropertyType::REFERENCE</li>
<li>PropertyType::WEAKREFERENCE</li>
<li>PropertyType::UNDEFINED</li>
</ul>

<p>PropertyType::UNDEFINED is returned if this property may be of any type.</p>

<p>In implementations that support node type registration, if this
PropertyDefinition object is actually a newly-created empty
PropertyDefinitionTemplate, then this method will return PropertyType::STRING.</p>]]></long-description>
          <tag line="36" name="return" description="An integer constant member of PropertyType." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="205" package="phpcr\interfaces">
        <name>getValueConstraints</name>
        <full_name>getValueConstraints</full_name>
        <docblock line="67">
          <description><![CDATA[Gets the array of constraint strings.]]></description>
          <long-description><![CDATA[<p>Each string in the array specifies a constraint on the value of the property.
The constraints are OR-ed together, meaning that in order to be valid, the
value must meet at least one of the constraints. For example, a constraint
array of ["constraint1", "constraint2", "constraint3"] has the interpretation:
"the value of this property must meet at least one of constraint1, constraint2
or constraint3".</p>

<p>Reporting of value constraints is optional. An implementation may return
null, indicating that value constraint information is unavailable (though
a constraint may still exist).</p>

<p>Returning an empty array, on the other hand, indicates that value constraint
information is available and that no constraints are placed on this value.</p>

<p>In the case of multi-value properties, the constraint string array returned
applies to all the values of the property.</p>

<p>The constraint strings themselves having differing formats and
interpretations depending on the type of the property in question. The
following describes the value constraint syntax for each property type:</p>

<p><b>STRING</b> and <b>URI</b>: The constraint string is a regular
expression pattern. For example the regular expression ".*" means "any
string, including the empty string". Whereas a simple literal string
(without any RE-specific meta-characters) like "banana" matches only the
string "banana".</p>

<p><b>PATH</b>: The constraint string is a JCR path with an optional "*"
character after the last "/" character. For example, possible constraint
strings for a property of type PATH include:</p>

<ul>
<li>"/myapp:products/myapp:televisions"</li>
<li>"/myapp:products/myapp:televisions/"</li>
<li>"/myapp:products/*"</li>
<li>"myapp:products/myapp:televisions"</li>
<li>"../myapp:televisions"</li>
<li>"../myapp:televisions/*"</li>
</ul>

<p>The following principles apply:</p>

<ul>
<li>The "<em>" means "matches descendants" not "matches any subsequent path".
For example, /a/</em> does not match /a/../c. The constraint must match the
normalized path.</li>
<li>Relative path constraint only match relative path values and absolute
path constraints only match absolute path values.</li>
<li>A trailing "/" has no effect (hence, 1 and 2, above, are equivalent).</li>
<li>The trailing "<em>" character means that the value of the PATH property is
restricted to the indicated subgraph (in other words any additional
relative path can replace the "</em>"). For example, 3, above would allow
/myapp:products/myapp:radios, /myapp:products/myapp:microwaves/X900,
and so forth.</li>
<li>A constraint without a "*" means that the PATH property is restricted
to that precise path. For example, 1, above, would allow only the
value /myapp:products/myapp:televisions.</li>
<li>The constraint can indicate either a relative path or an absolute path
depending on whether it includes a leading "/" character. 1 and 4,
above for example, are distinct.</li>
<li>The string returned must reflect the namespace mapping in the current
Session (i.e., the current state of the namespace registry overlaid
with any session-specific mappings). Constraint strings for PATH
properties should be stored in fully-qualified form (using the actual
URI instead of the prefix) and then be converted to prefix form
according to the current mapping upon the
PropertyDefinitionInterface::getValueConstraints() call.</li>
</ul>

<p><b>NAME</b>: The constraint string is a JCR name in prefix form. For example
"myapp:products". No wildcards or other pattern matching are supported.
As with PATH properties, the string returned must reflect the namespace
mapping in the current Session. Constraint strings for NAME properties
should be stored in fully-qualified form (using the actual URI instead of
the prefix) and then be converted to prefix form according to the current
mapping.</p>

<p><b>REFERENCE</b> and <b>WEAKREFERENCE</b>: The constraint string is a
JCR name in prefix form. This name is interpreted as a node type name
and the REFERENCE or WEAKREFERENCE property is restricted to referring
only to nodes that have at least the indicated node type. For example, a
constraint of "mytype:document" would indicate that the property in
question can only refer to nodes that have at least the node type
mytype:document (assuming this was the only constraint returned in the
array, recall that the array of constraints are to be ORed together). No
wildcards or other pattern matching are supported.</p>

<p>As with PATH properties, the string returned must reflect the namespace
mapping in the current Session. Constraint strings for REFERENCE and
WEAKREFERENCE properties should be stored by the implementation in
fully-qualified form (using the actual URI instead of the prefix) and then
be converted to prefix form according to the current mapping.</p>

<p><b>BOOLEAN</b>: BOOLEAN properties will always report a value constraint
consisting of an empty array (meaning no constraint). In implementations
that support node type registration any value constraint set on BOOLEAN is
ignored and discarded.</p>

<p>The remaining types all have value constraints in the form of inclusive
or exclusive ranges: i.e., "[min, max]", "(min, max)", "(min, max]" or
"[min, max)". Where "[" and "]" indicate "inclusive", while "(" and ")"
indicate "exclusive". A missing min or max value indicates no bound in
that direction. For example [,5] means no minimum but a maximum of 5
(inclusive) while [,] means simply that any value will suffice, The meaning
of the min and max values themselves differ between types as follows:</p>

<p><b>BINARY</b>: min and max specify the allowed size range of the binary
value in bytes.</p>

<p><b>DATE</b>: min and max are dates specifying the allowed date range. The date
strings must be in the ISO8601-compliant format: YYYY-MM-DDThh:mm:ss.sssTZD.</p>

<p><b>LONG, DOUBLE</b>: min and max are numbers.</p>

<p>In implementations that support node type registration, when specifying
that a DATE, LONG or DOUBLE is constrained to be equal to some disjunctive
set of constants, a string consisting of just the constant itself, "c" may
be used as a shorthand for the standard constraint notation of "[c, c]",
where c is the constant. For example, to indicate that particular LONG
property is constrained to be one of the values 2, 4, or 8, the constraint
string array {"2", "4", "8"} can be used instead of the standard notation,
{"[2,2]", "[4,4]", "[8,8]"}. However, even if this shorthand is used on
registration, the value returned by
PropertyDefinitionInterface::getValueConstraints() will always use the
standard notation.</p>

<p>Because constraints are returned as an array of disjunctive constraints,
in many cases the elements of the array can serve directly as a "choice
list". This may, for example, be used by an application to display
options to the end user indicating the set of permitted values.</p>

<p>In implementations that support node type registration, if this
PropertyDefinition object is actually a newly-created empty
PropertyDefinitionTemplate, then this method will return null.</p>]]></long-description>
          <tag line="67" name="return" description="a String array." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="67" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="238" package="phpcr\interfaces">
        <name>getDefaultValues</name>
        <full_name>getDefaultValues</full_name>
        <docblock line="207">
          <description><![CDATA[Gets the default value(s) of the property.]]></description>
          <long-description><![CDATA[<p>These are the values that the property defined by this PropertyDefinition
will be assigned if it is automatically created (that is, if
ItemDefinitionInterface::isAutoCreated() returns true).
This method returns an array of values. If the property is multi-
valued, then this array represents the full set of values that the property
will be assigned upon being auto-created. Note that this could be the empty
array. If the property is single-valued, then the array returned will be
of size 1.</p>

<p>If null is returned, then the property has no fixed default value. This
does not exclude the possibility that the property still assumes some
value automatically, but that value may be parametrized (for example, "the
current date") and hence not expressible as a single fixed value. In
particular, this must be the case if isAutoCreated returns true and this
method returns null.</p>

<p>Note that to indicate a null value for this attribute in a node type
definition that is stored in content, the jcr:defaultValues property is
simply removed (since null values for properties are not allowed.</p>

<p>In implementations that support node type registration, if this
PropertyDefinition object is actually a newly-created empty
PropertyDefinitionTemplate, then this method will return null.</p>]]></long-description>
          <tag line="207" name="return" description="An array of php values." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="207" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="259" package="phpcr\interfaces">
        <name>isMultiple</name>
        <full_name>isMultiple</full_name>
        <docblock line="240">
          <description><![CDATA[Reports whether this property can have multiple values.]]></description>
          <long-description><![CDATA[<p><b>Note</b> that the isMultiple flag is special in that a given node
type may have two property definitions that are identical in every
respect except for the their isMultiple status. For example, a node type
can specify two string properties both called X, one of which is
multi-valued and the other not. An example of such a node type is
nt:unstructured.</p>

<p>In implementations that support node type registration, if this
PropertyDefinition object is actually a newly-created empty
PropertyDefinitionTemplate, then this method will return false.</p>]]></long-description>
          <tag line="240" name="return" description="True, if this property may have multiple values, else&#10;     false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="240" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="289" package="phpcr\interfaces">
        <name>getAvailableQueryOperators</name>
        <full_name>getAvailableQueryOperators</full_name>
        <docblock line="261">
          <description><![CDATA[Returns the set of query comparison operators supported by this
property.]]></description>
          <long-description><![CDATA[<p>This attribute only takes effect if the node type holding the property
definition has a queryable setting of true.</p>

<p>JCR defines the comparison operators
\PHPCR\Query\QueryObjectModelConstantsInterface::JCR_OPERATOR_*</p>

<p>An implementation may define additional comparison operators.</p>

<p>Note that the set of operators that can appear in this attribute may be
limited by implementation-specific constraints that differ across
property types. For example, some implementations may permit property
definitions to provide JCR_OPERATOR_EQUAL_TO and
JCR_OPERATOR_NOT_EQUAL_TO as available operators for BINARY properties
while others may not.</p>

<p>However, in all cases where a JCR-defined operator is potentially
available for a given property type, its behavior must conform to the
comparison semantics defined in the specification document (see 3.6.5
Comparison of Values).</p>]]></long-description>
          <tag line="261" name="return" description="List of query operators." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="261" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="305" package="phpcr\interfaces">
        <name>isFullTextSearchable</name>
        <full_name>isFullTextSearchable</full_name>
        <docblock line="291">
          <description><![CDATA[Determines if this property is full-text searchable.]]></description>
          <long-description><![CDATA[<p>Returns true if this property is full-text searchable,
meaning that its value is accessible through the full-text search
function within a query.</p>

<p>This attribute only takes effect if the node type holding the
property definition has a queryable setting of true.</p>]]></long-description>
          <tag line="291" name="return" description="True, if this property is full-text searchable, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="291" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="321" package="phpcr\interfaces">
        <name>isQueryOrderable</name>
        <full_name>isQueryOrderable</full_name>
        <docblock line="307">
          <description><![CDATA[Report this property is orderable by a query.]]></description>
          <long-description><![CDATA[<p>Returns true if this property is query orderable,
meaning that query results may be ordered by this property
using the order-by clause of a query.</p>

<p>This attribute only takes effect if the node type holding the
property definition has a queryable setting of true.</p>]]></long-description>
          <tag line="307" name="return" description="True, if this property is query orderable, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="307" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/NodeTypeManagerInterface.php" hash="2f653381ec3b1b8b2661aa4d0308e85d" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="41" package="phpcr\interfaces">
      <name>NodeTypeManagerInterface</name>
      <full_name>\PHPCR\NodeType\NodeTypeManagerInterface</full_name>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[Allows for the retrieval and (in implementations that support it) the
registration of node types.]]></description>
        <long-description><![CDATA[<p>Accessed via WorkspaceInterface::getNodeTypeManager().</p>

<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. NodeTypeManager has to implement either \RecursiveIterator
or \Iterator.
The iterator is equivalent to <b>getAllNodeTypes()</b> returning a list of
all node types. The iterator keys have no significant meaning.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="56" package="phpcr\interfaces">
        <name>getNodeType</name>
        <full_name>getNodeType</full_name>
        <docblock line="43">
          <description><![CDATA[Returns the named node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="the name of an existing node type." type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="A NodeType object." type="\PHPCR\NodeType\NodeTypeInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeInterface</type>
          </tag>
          <tag line="43" name="throws" description="if no node type of the&#10;     given name exists." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="43" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="43" name="api" description=""/>
        </docblock>
        <argument line="56">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="73" package="phpcr\interfaces">
        <name>hasNodeType</name>
        <full_name>hasNodeType</full_name>
        <docblock line="58">
          <description><![CDATA[Determines if the given node type is registered.]]></description>
          <long-description><![CDATA[<p>Returns true if a node type with the specified name is registered.
Returns false otherwise.</p>]]></long-description>
          <tag line="58" name="param" description="The name of node type." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="return" description="True, if the node type identified by its name is&#10;     registered, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="58" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="58" name="api" description=""/>
        </docblock>
        <argument line="73">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="86" package="phpcr\interfaces">
        <name>getAllNodeTypes</name>
        <full_name>getAllNodeTypes</full_name>
        <docblock line="75">
          <description><![CDATA[Returns an iterator over all available node types (primary and mixin).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;     Keys are the node type names, values the corresponding&#10;     NodeTypeInterface instances." type="\PHPCR\NodeType\Iterator">
            <type by_reference="false">\PHPCR\NodeType\Iterator</type>
          </tag>
          <tag line="75" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="75" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="99" package="phpcr\interfaces">
        <name>getPrimaryNodeTypes</name>
        <full_name>getPrimaryNodeTypes</full_name>
        <docblock line="88">
          <description><![CDATA[Returns an iterator over all available primary node types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;     Keys are the node type names, values the corresponding&#10;     NodeTypeInterface instances." type="\PHPCR\NodeType\Iterator">
            <type by_reference="false">\PHPCR\NodeType\Iterator</type>
          </tag>
          <tag line="88" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="88" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="114" package="phpcr\interfaces">
        <name>getMixinNodeTypes</name>
        <full_name>getMixinNodeTypes</full_name>
        <docblock line="101">
          <description><![CDATA[Returns an iterator over all available mixin node types.]]></description>
          <long-description><![CDATA[<p>If none are available, an empty iterator is returned.</p>]]></long-description>
          <tag line="101" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;     Keys are the node type names, values the corresponding&#10;     NodeTypeInterface instances." type="\PHPCR\NodeType\Iterator">
            <type by_reference="false">\PHPCR\NodeType\Iterator</type>
          </tag>
          <tag line="101" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="101" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="136" package="phpcr\interfaces">
        <name>createNodeTypeTemplate</name>
        <full_name>createNodeTypeTemplate</full_name>
        <docblock line="116">
          <description><![CDATA[Returns an empty NodeTypeTemplateInterface which can then be used to
define a node type and passed to
NodeTypeManagerInterface::registerNodeType().]]></description>
          <long-description><![CDATA[<p>If <b>$ntd</b> is given: Returns a NodeTypeTemplateInterface holding the
specified node type definition. This template can then be altered and
passed to NodeTypeManagerInterface::registerNodeType().</p>]]></long-description>
          <tag line="116" name="param" description="a NodeTypeDefinition." type="\PHPCR\NodeType\NodeTypeDefinitionInterface" variable="$ntd">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeDefinitionInterface</type>
          </tag>
          <tag line="116" name="return" description="A NodeTypeTemplate." type="\PHPCR\NodeType\NodeTypeTemplateInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeTemplateInterface</type>
          </tag>
          <tag line="116" name="throws" description="if this&#10;     implementation does not support node type registration." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="116" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="116" name="api" description=""/>
        </docblock>
        <argument line="136">
          <name>$ntd</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="150" package="phpcr\interfaces">
        <name>createNodeDefinitionTemplate</name>
        <full_name>createNodeDefinitionTemplate</full_name>
        <docblock line="138">
          <description><![CDATA[Returns an empty NodeDefinitionTemplate which can then be used to create
a child node definition and attached to a NodeTypeTemplate.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="return" description="A&#10;     NodeDefinitionTemplate." type="\PHPCR\NodeType\NodeDefinitionTemplateInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeDefinitionTemplateInterface</type>
          </tag>
          <tag line="138" name="throws" description="if this&#10;     implementation does not support node type registration." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="138" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="138" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="166" package="phpcr\interfaces">
        <name>createPropertyDefinitionTemplate</name>
        <full_name>createPropertyDefinitionTemplate</full_name>
        <docblock line="152">
          <description><![CDATA[Returns an empty PropertyDefinitionTemplateInterface which can then be
used to create a property definition and attached to a
NodeTypeTemplateInterface.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="return" description="An empty&#10;     PropertyDefinitionTemplateInterface instance." type="\PHPCR\NodeType\PropertyDefinitionTemplateInterface">
            <type by_reference="false">\PHPCR\NodeType\PropertyDefinitionTemplateInterface</type>
          </tag>
          <tag line="152" name="throws" description="if this&#10;     implementation does not support node type registration." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="152" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="152" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="195" package="phpcr\interfaces">
        <name>registerNodeType</name>
        <full_name>registerNodeType</full_name>
        <docblock line="168">
          <description><![CDATA[Registers a new node type or updates an existing node type using the
specified definition and returns the resulting NodeTypeInterface object.]]></description>
          <long-description><![CDATA[<p>Typically, the object passed to this method will be a
NodeTypeTemplateInterface (a subclass of NodeTypeDefinitionInterface)
acquired from NodeTypeManagerInterface::createNodeTypeTemplate()
and then filled-in with definition information.</p>]]></long-description>
          <tag line="168" name="param" description="a NodeTypeDefinitionInterface instance." type="\PHPCR\NodeType\NodeTypeDefinitionInterface" variable="$ntd">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeDefinitionInterface</type>
          </tag>
          <tag line="168" name="param" description="whether to fail if node already exists or to update it." type="boolean" variable="$allowUpdate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="168" name="return" description="the registered node type." type="\PHPCR\NodeType\NodeTypeInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeInterface</type>
          </tag>
          <tag line="168" name="throws" description="if the&#10;     NodeTypeDefinitionInterface is invalid." type="\PHPCR\InvalidNodeTypeDefinitionException">
            <type by_reference="false">\PHPCR\InvalidNodeTypeDefinitionException</type>
          </tag>
          <tag line="168" name="throws" description="if allowUpdate is false&#10;     and the NodeTypeDefinition specifies a node type name that is&#10;     already registered." type="\PHPCR\NodeType\NodeTypeExistsException">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeExistsException</type>
          </tag>
          <tag line="168" name="throws" description="if this&#10;     implementation does not support node type registration." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="168" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="168" name="api" description=""/>
        </docblock>
        <argument line="195">
          <name>$ntd</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\NodeType\NodeTypeDefinitionInterface</type>
        </argument>
        <argument line="195">
          <name>$allowUpdate</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="226" package="phpcr\interfaces">
        <name>registerNodeTypes</name>
        <full_name>registerNodeTypes</full_name>
        <docblock line="197">
          <description><![CDATA[Registers or updates the specified array of NodeTypeDefinition objects.]]></description>
          <long-description><![CDATA[<p>This method is used to register or update a set of node types with mutual
dependencies. Returns an iterator over the resulting NodeType objects.
The effect of the method is "all or nothing"; if an error occurs, no node
types are registered or updated.</p>]]></long-description>
          <tag line="197" name="param" description="an array of NodeTypeDefinitions." type="array" variable="$definitions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="197" name="param" description="whether to fail if node already exists or to update it." type="boolean" variable="$allowUpdate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="197" name="return" description="over the registered node types implementing&#10;     &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;. Keys are the node&#10;     type names, values the corresponding NodeTypeInterface instances." type="\PHPCR\NodeType\Iterator">
            <type by_reference="false">\PHPCR\NodeType\Iterator</type>
          </tag>
          <tag line="197" name="throws" description="if a&#10;     NodeTypeDefinitionInterface within the Collection is invalid or if&#10;     the Collection contains an object of a type other than&#10;     NodeTypeDefinitionInterface." type="\PHPCR\InvalidNodeTypeDefinitionException">
            <type by_reference="false">\PHPCR\InvalidNodeTypeDefinitionException</type>
          </tag>
          <tag line="197" name="throws" description="if allowUpdate is false&#10;     and a NodeTypeDefinition within the Collection specifies a node&#10;     type name that is already registered." type="\PHPCR\NodeType\NodeTypeExistsException">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeExistsException</type>
          </tag>
          <tag line="197" name="throws" description="if this&#10;     implementation does not support node type registration." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="197" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="197" name="api" description=""/>
        </docblock>
        <argument line="226">
          <name>$definitions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="226">
          <name>$allowUpdate</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="244" package="phpcr\interfaces">
        <name>unregisterNodeType</name>
        <full_name>unregisterNodeType</full_name>
        <docblock line="228">
          <description><![CDATA[Unregisters the specified node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="228" name="param" description="The name of the node type to be removed from the registry." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="228" name="throws" description="if this&#10;     implementation does not support node type registration." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="228" name="throws" description="if no registered node&#10;     type exists with the specified name." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="228" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="228" name="api" description=""/>
        </docblock>
        <argument line="244">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="263" package="phpcr\interfaces">
        <name>unregisterNodeTypes</name>
        <full_name>unregisterNodeTypes</full_name>
        <docblock line="246">
          <description><![CDATA[Unregisters the specified set of node types.]]></description>
          <long-description><![CDATA[<p>Used to unregister a set of
node types with mutual dependencies.</p>]]></long-description>
          <tag line="246" name="param" description="List of node type names to be removed from the registry." type="array" variable="$names">
            <type by_reference="false">array</type>
          </tag>
          <tag line="246" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="246" name="throws" description="if this&#10;     implementation does not support node type registration." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="246" name="throws" description="if one of the names&#10;     listed is not a registered node type." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="246" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="246" name="api" description=""/>
        </docblock>
        <argument line="263">
          <name>$names</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeType/ItemDefinitionInterface.php" hash="6f62bb981518849d24be260545c3e1b2" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\NodeType" line="34" package="phpcr\interfaces">
      <name>ItemDefinitionInterface</name>
      <full_name>\PHPCR\NodeType\ItemDefinitionInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Superclass of NodeDefinition and PropertyDefinition.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="48" package="phpcr\interfaces">
        <name>getDeclaringNodeType</name>
        <full_name>getDeclaringNodeType</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the node type that contains the declaration of this ItemDefinition.]]></description>
          <long-description><![CDATA[<p>In implementations that support node type registration an ItemDefinition
object may be acquired (in the form of a NodeDefinitionTemplate or
PropertyDefinitionTemplate) that is not attached to a live NodeType. In
such cases this method returns null.</p>]]></long-description>
          <tag line="36" name="return" description="A NodeType object." type="\PHPCR\NodeType\NodeTypeInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeInterface</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="66" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="50">
          <description><![CDATA[Gets the name of the child item.]]></description>
          <long-description><![CDATA[<p>If "*", this ItemDefinition defines a residual set of child items.
That is, it defines the characteristics of all those child items with names
apart from the names explicitly used in other child item definitions.</p>

<p>In implementations that support node type registration, if this
ItemDefinition object is actually a newly-created empty
PropertyDefinitionTemplate or NodeDefinitionTemplate, then this method
will return null.</p>]]></long-description>
          <tag line="50" name="return" description="A string denoting the name or &quot;*&quot;." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="95" package="phpcr\interfaces">
        <name>isAutoCreated</name>
        <full_name>isAutoCreated</full_name>
        <docblock line="68">
          <description><![CDATA[Reports whether the item is to be automatically created when its parent
node is created.]]></description>
          <long-description><![CDATA[<p>If true, then this ItemDefinition will necessarily not
be a residual set definition but will specify an actual item name (in
other words getName() will not return "*").</p>

<p>An autocreated non-protected item must be created immediately when
its parent node is created in the transient session space. Creation of
autocreated non-protected items is never delayed until save.</p>

<p>An autocreated protected item should be created immediately when its
parent node is created in the transient session space. Creation of
autocreated protected items should not be delayed until save, though
doing so does not violate JCR compliance.</p>

<p>In implementations that support node type registration, if this
ItemDefinition object is actually a newly-created empty
PropertyDefinitionTemplate or NodeDefinitionTemplate, then this method
will return false.</p>]]></long-description>
          <tag line="68" name="return" description="True, if the item is automatically created when its&#10;     parent node is created, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="68" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="120" package="phpcr\interfaces">
        <name>isMandatory</name>
        <full_name>isMandatory</full_name>
        <docblock line="97">
          <description><![CDATA[Reports whether the item is mandatory.]]></description>
          <long-description><![CDATA[<p>A mandatory item is one that, if its parent node exists, must also exist.
This means that a mandatory single-value property must have a value (since
there is no such thing a null value). In the case of multi-value properties
this means that the property must exist, though it can have zero or more
values.</p>

<p>An attempt to save a node that has a mandatory child item without first
creating that child item will throw a ConstraintViolationException on save.</p>

<p>In implementations that support node type registration, if this
ItemDefinition object is actually a newly-created empty
PropertyDefinitionTemplate or NodeDefinitionTemplate, then this method
will return false.</p>

<p>An item definition cannot be both residual and mandatory.</p>]]></long-description>
          <tag line="97" name="return" description="True, if the item is mandatory, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="97" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="144" package="phpcr\interfaces">
        <name>getOnParentVersion</name>
        <full_name>getOnParentVersion</full_name>
        <docblock line="122">
          <description><![CDATA[Gets the OnParentVersion status of the child item.]]></description>
          <long-description><![CDATA[<p>This governs what occurs (in implementations that support versioning)
when the parent node of this item is checked-in. One of:</p>

<ul>
<li>OnParentVersionAction::COPY</li>
<li>OnParentVersionAction::VERSION</li>
<li>OnParentVersionAction::IGNORE</li>
<li>OnParentVersionAction::INITIALIZE</li>
<li>OnParentVersionAction::COMPUTE</li>
<li>OnParentVersionAction::ABORT</li>
</ul>

<p>In implementations that support node type registration, if this
ItemDefinition object is actually a newly-created empty
PropertyDefinitionTemplateInterface or NodeDefinitionTemplateInterface,
then this method will return OnParentVersionAction::COPY.</p>]]></long-description>
          <tag line="122" name="return" description="An int constant member of OnParentVersionAction." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="122" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\NodeType" line="168" package="phpcr\interfaces">
        <name>isProtected</name>
        <full_name>isProtected</full_name>
        <docblock line="146">
          <description><![CDATA[Reports whether the child item is protected.]]></description>
          <long-description><![CDATA[<p>In level 2 implementations, a protected item is one that cannot be
removed (except by removing its parent) or modified through the the
standard write methods of this API (that is, ItemInterface::remove(),
NodeInterface::addNode(), NodeInterface::setProperty() and
PropertyInterface::setValue()).</p>

<p>A protected node may be removed or modified (in a level 2
implementation), however, through some mechanism not defined by this
specification or as a side-effect of operations other than the standard
write methods of the API.</p>

<p>In implementations that support node type registration, if this
ItemDefinition object is actually a newly-created empty
PropertyDefinitionTemplateInterface or NodeDefinitionTemplateInterface,
then this method will return false.</p>]]></long-description>
          <tag line="146" name="return" description="True, if the child item is protected, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="146" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/RepositoryException.php" hash="aefe40e9465511c2ac7b67f5c1c5ee36" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="36" package="phpcr\exceptions">
      <extends>\RuntimeException</extends>
      <name>RepositoryException</name>
      <full_name>\PHPCR\RepositoryException</full_name>
      <docblock line="27">
        <description><![CDATA[Main exception thrown by classes in this package.]]></description>
        <long-description><![CDATA[<p>May contain an error message and/or another nested exception.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/PropertyInterface.php" hash="b4cd534ebff2e1e76fd8fdfb8e0340c9" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="55" package="phpcr\interfaces">
      <name>PropertyInterface</name>
      <full_name>\PHPCR\PropertyInterface</full_name>
      <extends>\PHPCR\ItemInterface</extends>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[The property interface describes how an item property shall look like.]]></description>
        <long-description><![CDATA[<p>A Property object represents the smallest granularity of content storage.
It has a single parent node and no children. A property consists of a name
and a value, or in the case of multi-value properties, a set of values all
of the same type.</p>

<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. Properties have to implement either \IteratorAggregate or
\Iterator.
The iterator is equivalent to <b>getValue()</b> returning an iterator
of all values of this property (which is exactly one except for multi-valued
properties). The iterator keys have no significant meaning.</p>

<p><b>PHPCR Note:</b>
We removed the Value interface and consequently the getValue() and
getValues() methods. If you just want the property value in its native type,
use getValue, or just NodeInterface::getPropertyValue.
The PropertyInterface::getXX methods also work for multi-valued properties.
They return arrays in case of multi-valued.
PropertyInterface::setValue completely replaces the
ValueFactory::createValue method.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="66" package="phpcr\interfaces">
        <name>JCR_PRIMARY_TYPE</name>
        <full_name>JCR_PRIMARY_TYPE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}primaryType"]]></value>
        <docblock line="61">
          <description><![CDATA[A constant for the property name jcr:primaryType (in extended form),
declared in node type nt:base.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="73" package="phpcr\interfaces">
        <name>JCR_MIXIN_TYPES</name>
        <full_name>JCR_MIXIN_TYPES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}mixinTypes"]]></value>
        <docblock line="68">
          <description><![CDATA[A constant for the property name jcr:mixinTypes (in extended form),
declared in node type nt:base.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="82" package="phpcr\interfaces">
        <name>JCR_CONTENT</name>
        <full_name>JCR_CONTENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}content"]]></value>
        <docblock line="75">
          <description><![CDATA[A constant for the property name jcr:content (in extended form),
declared in node type nt:linkedFile.]]></description>
          <long-description><![CDATA[<p><b>Note:</b> jcr:content is also the name of a child node declared in nt:file.</p>]]></long-description>
          <tag line="75" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="89" package="phpcr\interfaces">
        <name>JCR_DATA</name>
        <full_name>JCR_DATA</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}data"]]></value>
        <docblock line="84">
          <description><![CDATA[A constant for the property name jcr:data (in extended form),
declared in node type nt:resource.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="96" package="phpcr\interfaces">
        <name>JCR_PROTOCOL</name>
        <full_name>JCR_PROTOCOL</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}protocol"]]></value>
        <docblock line="91">
          <description><![CDATA[A constant for the property name jcr:protocol (in extended form),
declared in node type nt:address.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="103" package="phpcr\interfaces">
        <name>JCR_HOST</name>
        <full_name>JCR_HOST</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}host"]]></value>
        <docblock line="98">
          <description><![CDATA[A constant for the property name jcr:host (in extended form),
declared in node type nt:address.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="110" package="phpcr\interfaces">
        <name>JCR_PORT</name>
        <full_name>JCR_PORT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}port"]]></value>
        <docblock line="105">
          <description><![CDATA[A constant for the property name jcr:port (in extended form),
declared in node type nt:address.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="117" package="phpcr\interfaces">
        <name>JCR_REPOSITORY</name>
        <full_name>JCR_REPOSITORY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0repository"]]></value>
        <docblock line="112">
          <description><![CDATA[A constant for the property name jcr:repository (in extended form),
declared in node type nt:address.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="124" package="phpcr\interfaces">
        <name>JCR_WORKSPACE</name>
        <full_name>JCR_WORKSPACE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}workspace"]]></value>
        <docblock line="119">
          <description><![CDATA[A constant for the property name jcr:workspace (in extended form),
declared in node type nt:address.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="119" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="131" package="phpcr\interfaces">
        <name>JCR_PATH</name>
        <full_name>JCR_PATH</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}path"]]></value>
        <docblock line="126">
          <description><![CDATA[A constant for the property name jcr:path (in extended form),
declared in node type nt:address.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="138" package="phpcr\interfaces">
        <name>JCR_ID</name>
        <full_name>JCR_ID</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}id"]]></value>
        <docblock line="133">
          <description><![CDATA[A constant for the property name jcr:id (in extended form),
declared in node type nt:address.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="145" package="phpcr\interfaces">
        <name>JCR_UUID</name>
        <full_name>JCR_UUID</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}uuid"]]></value>
        <docblock line="140">
          <description><![CDATA[A constant for the property name jcr:uuid (in extended form),
declared in node type mix:referenceable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="152" package="phpcr\interfaces">
        <name>JCR_TITLE</name>
        <full_name>JCR_TITLE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}title"]]></value>
        <docblock line="147">
          <description><![CDATA[A constant for the property name jcr:title (in extended form),
declared in node types mix:title and nt:activity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="159" package="phpcr\interfaces">
        <name>JCR_DESCRIPTION</name>
        <full_name>JCR_DESCRIPTION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}description"]]></value>
        <docblock line="154">
          <description><![CDATA[A constant for the property name jcr:description (in extended form),
declared in node type mix:title.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="154" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="166" package="phpcr\interfaces">
        <name>JCR_CREATED</name>
        <full_name>JCR_CREATED</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}created"]]></value>
        <docblock line="161">
          <description><![CDATA[A constant for the property name jcr:created (in extended form),
declared in node types mix:created and nt:version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="173" package="phpcr\interfaces">
        <name>JCR_CREATED_BY</name>
        <full_name>JCR_CREATED_BY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}createdBy"]]></value>
        <docblock line="168">
          <description><![CDATA[A constant for the property name jcr:createdBy (in extended form),
declared in node type mix:created.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="168" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="180" package="phpcr\interfaces">
        <name>JCR_LAST_MODIFIED</name>
        <full_name>JCR_LAST_MODIFIED</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}lastModified"]]></value>
        <docblock line="175">
          <description><![CDATA[A constant for the property name jcr:lastModified (in extended form),
declared in node type mix:lastModified.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="175" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="187" package="phpcr\interfaces">
        <name>JCR_LAST_MODIFIED_BY</name>
        <full_name>JCR_LAST_MODIFIED_BY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}lastModifiedBy"]]></value>
        <docblock line="182">
          <description><![CDATA[A constant for the property name jcr:lastModifiedBy (in extended form),
declared in node type mix:lastModified.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="194" package="phpcr\interfaces">
        <name>JCR_LANGUAGE</name>
        <full_name>JCR_LANGUAGE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}language"]]></value>
        <docblock line="189">
          <description><![CDATA[A constant for the property name jcr:language (in extended form),
declared in node types mix:language and nt:query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="201" package="phpcr\interfaces">
        <name>JCR_MIMETYPE</name>
        <full_name>JCR_MIMETYPE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}mimeType"]]></value>
        <docblock line="196">
          <description><![CDATA[A constant for the property name jcr:mimeType (in extended form),
declared in node type mix:mimeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="208" package="phpcr\interfaces">
        <name>JCR_ENCODING</name>
        <full_name>JCR_ENCODING</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}encoding"]]></value>
        <docblock line="203">
          <description><![CDATA[A constant for the property name jcr:encoding (in extended form),
declared in node type mix:mimeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="203" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="215" package="phpcr\interfaces">
        <name>JCR_NODE_TYPE_NAME</name>
        <full_name>JCR_NODE_TYPE_NAME</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}nodeTypeName"]]></value>
        <docblock line="210">
          <description><![CDATA[A constant for the property name jcr:nodeTypeName (in extended form),
declared in node type nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="210" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="222" package="phpcr\interfaces">
        <name>JCR_SUPERTYPES</name>
        <full_name>JCR_SUPERTYPES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}supertypes"]]></value>
        <docblock line="217">
          <description><![CDATA[A constant for the property name jcr:supertypes (in extended form),
declared in node type nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="217" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="229" package="phpcr\interfaces">
        <name>JCR_IS_ABSTRACT</name>
        <full_name>JCR_IS_ABSTRACT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}isAbstract"]]></value>
        <docblock line="224">
          <description><![CDATA[A constant for the property name jcr:isAbstract (in extended form),
declared in node type nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="224" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="236" package="phpcr\interfaces">
        <name>JCR_IS_MIXIN</name>
        <full_name>JCR_IS_MIXIN</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}isMixin"]]></value>
        <docblock line="231">
          <description><![CDATA[A constant for the property name jcr:isMixin (in extended form),
declared in node type nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="243" package="phpcr\interfaces">
        <name>JCR_HAS_ORDERABLE_CHILD_NODES</name>
        <full_name>JCR_HAS_ORDERABLE_CHILD_NODES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}hasOrderableChildNodes"]]></value>
        <docblock line="238">
          <description><![CDATA[A constant for the property name jcr:hasOrderableChildNodes (in extended form),
declared in node type nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="238" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="250" package="phpcr\interfaces">
        <name>JCR_PRIMARY_ITEM_NAME</name>
        <full_name>JCR_PRIMARY_ITEM_NAME</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}primaryItemName"]]></value>
        <docblock line="245">
          <description><![CDATA[A constant for the property name jcr:primaryItemName (in extended form),
declared in node type nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="245" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="257" package="phpcr\interfaces">
        <name>JCR_NAME</name>
        <full_name>JCR_NAME</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}name"]]></value>
        <docblock line="252">
          <description><![CDATA[A constant for the property name jcr:name (in extended form),
declared in node types nt:propertyDefinition and nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="252" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="264" package="phpcr\interfaces">
        <name>JCR_AUTOCREATED</name>
        <full_name>JCR_AUTOCREATED</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}autoCreated"]]></value>
        <docblock line="259">
          <description><![CDATA[A constant for the property name jcr:autoCreated (in extended form),
declared in node types nt:propertyDefinition and nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="259" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="271" package="phpcr\interfaces">
        <name>JCR_MANDATORY</name>
        <full_name>JCR_MANDATORY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}mandatory"]]></value>
        <docblock line="266">
          <description><![CDATA[A constant for the property name jcr:mandatory (in extended form),
declared in node types nt:propertyDefinition and nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="266" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="278" package="phpcr\interfaces">
        <name>JCR_PROTECTED</name>
        <full_name>JCR_PROTECTED</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}protected"]]></value>
        <docblock line="273">
          <description><![CDATA[A constant for the property name jcr:protected (in extended form),
declared in node types nt:propertyDefinition and nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="273" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="285" package="phpcr\interfaces">
        <name>JCR_ON_PARENT_VERSION</name>
        <full_name>JCR_ON_PARENT_VERSION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}onParentVersion"]]></value>
        <docblock line="280">
          <description><![CDATA[A constant for the property name jcr:onParentVersion (in extended form),
declared in node types nt:propertyDefinition and nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="280" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="292" package="phpcr\interfaces">
        <name>JCR_REQUIRED_TYPE</name>
        <full_name>JCR_REQUIRED_TYPE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}requiredType"]]></value>
        <docblock line="287">
          <description><![CDATA[A constant for the property name jcr:requiredType (in extended form),
declared in node type nt:propertyDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="287" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="299" package="phpcr\interfaces">
        <name>JCR_VALUE_CONSTRAINTS</name>
        <full_name>JCR_VALUE_CONSTRAINTS</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}valueConstraints"]]></value>
        <docblock line="294">
          <description><![CDATA[A constant for the property name jcr:valueConstraints (in extended form),
declared in node type nt:propertyDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="294" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="306" package="phpcr\interfaces">
        <name>JCR_DEFAULT_VALUES</name>
        <full_name>JCR_DEFAULT_VALUES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}defaultValues"]]></value>
        <docblock line="301">
          <description><![CDATA[A constant for the property name jcr:defaultValues (in extended form),
declared in node type nt:propertyDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="301" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="313" package="phpcr\interfaces">
        <name>JCR_MULTIPLE</name>
        <full_name>JCR_MULTIPLE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}multiple"]]></value>
        <docblock line="308">
          <description><![CDATA[A constant for the property name jcr:multiple (in extended form),
declared in node type nt:propertyDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="308" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="320" package="phpcr\interfaces">
        <name>JCR_REQUIRED_PRIMARY_TYPES</name>
        <full_name>JCR_REQUIRED_PRIMARY_TYPES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}requiredPrimaryTypes"]]></value>
        <docblock line="315">
          <description><![CDATA[A constant for the property name jcr:requiredPrimaryTypes (in extended form),
declared in node type nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="315" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="327" package="phpcr\interfaces">
        <name>JCR_DEFAULT_PRIMARY_TYPE</name>
        <full_name>JCR_DEFAULT_PRIMARY_TYPE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}defaultPrimaryType"]]></value>
        <docblock line="322">
          <description><![CDATA[A constant for the property name jcr:defaultPrimaryType (in extended form),
declared in node type nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="322" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="334" package="phpcr\interfaces">
        <name>JCR_SAME_NAME_SIBLINGS</name>
        <full_name>JCR_SAME_NAME_SIBLINGS</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}sameNameSiblings"]]></value>
        <docblock line="329">
          <description><![CDATA[A constant for the property name jcr:sameNameSiblings (in extended form),
declared in node type nt:childNodeDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="329" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="341" package="phpcr\interfaces">
        <name>JCR_LOCK_OWNER</name>
        <full_name>JCR_LOCK_OWNER</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}lockOwner"]]></value>
        <docblock line="336">
          <description><![CDATA[A constant for the property name jcr:lockOwner (in extended form),
declared in node type mix:lockable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="336" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="348" package="phpcr\interfaces">
        <name>JCR_LOCK_IS_DEEP</name>
        <full_name>JCR_LOCK_IS_DEEP</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}lockIsDeep"]]></value>
        <docblock line="343">
          <description><![CDATA[A constant for the property name jcr:lockIsDeep (in extended form),
declared in node type mix:lockable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="343" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="355" package="phpcr\interfaces">
        <name>JCR_LIFECYCLE_POLICY</name>
        <full_name>JCR_LIFECYCLE_POLICY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}lifecyclePolicy"]]></value>
        <docblock line="350">
          <description><![CDATA[A constant for the property name jcr:lifecyclePolicy (in extended form),
declared in node type mix:lifecycle.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="350" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="362" package="phpcr\interfaces">
        <name>JCR_CURRENT_LIFECYCLE_STATE</name>
        <full_name>JCR_CURRENT_LIFECYCLE_STATE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}currentLifecycleState"]]></value>
        <docblock line="357">
          <description><![CDATA[A constant for the property name jcr:currentLifecycleState (in extended form),
declared in node type mix:lifecycle.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="357" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="369" package="phpcr\interfaces">
        <name>JCR_IS_CHECKED_OUT</name>
        <full_name>JCR_IS_CHECKED_OUT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}isCheckedOut"]]></value>
        <docblock line="364">
          <description><![CDATA[A constant for the property name jcr:isCheckedOut (in extended form),
declared in node type mix:simpleVersionable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="364" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="376" package="phpcr\interfaces">
        <name>JCR_FROZEN_PRIMARY_TYPE</name>
        <full_name>JCR_FROZEN_PRIMARY_TYPE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}frozenPrimaryType"]]></value>
        <docblock line="371">
          <description><![CDATA[A constant for the property name jcr:frozenPrimaryType (in extended form),
declared in node type nt:frozenNode.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="371" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="383" package="phpcr\interfaces">
        <name>JCR_FROZEN_MIXIN_TYPES</name>
        <full_name>JCR_FROZEN_MIXIN_TYPES</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}frozenMixinTypes"]]></value>
        <docblock line="378">
          <description><![CDATA[A constant for the property name jcr:frozenMixinTypes (in extended form),
declared in node type nt:frozenNode.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="378" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="390" package="phpcr\interfaces">
        <name>JCR_FROZEN_UUID</name>
        <full_name>JCR_FROZEN_UUID</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}frozenUuid"]]></value>
        <docblock line="385">
          <description><![CDATA[A constant for the property name jcr:frozenUuid (in extended form),
declared in node type nt:frozenNode.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="385" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="397" package="phpcr\interfaces">
        <name>JCR_VERSION_HISTORY</name>
        <full_name>JCR_VERSION_HISTORY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}versionHistory"]]></value>
        <docblock line="392">
          <description><![CDATA[A constant for the property name jcr:versionHistory (in extended form),
declared in node type mix:versionable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="392" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="404" package="phpcr\interfaces">
        <name>JCR_BASE_VERSION</name>
        <full_name>JCR_BASE_VERSION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}baseVersion"]]></value>
        <docblock line="399">
          <description><![CDATA[A constant for the property name jcr:baseVersion (in extended form),
declared in node type mix:versionable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="399" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="411" package="phpcr\interfaces">
        <name>JCR_PREDECESSORS</name>
        <full_name>JCR_PREDECESSORS</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}predecessors"]]></value>
        <docblock line="406">
          <description><![CDATA[A constant for the property name jcr:predecessors (in extended form),
declared in node types mix:versionable and nt:version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="406" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="418" package="phpcr\interfaces">
        <name>JCR_MERGE_FAILED</name>
        <full_name>JCR_MERGE_FAILED</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}mergeFailed"]]></value>
        <docblock line="413">
          <description><![CDATA[A constant for the property name jcr:mergeFailed (in extended form),
declared in node type mix:versionable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="413" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="425" package="phpcr\interfaces">
        <name>JCR_ACTIVITY</name>
        <full_name>JCR_ACTIVITY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}activity"]]></value>
        <docblock line="420">
          <description><![CDATA[A constant for the property name jcr:activity (in extended form),
declared in node types mix:versionable and nt:version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="420" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="432" package="phpcr\interfaces">
        <name>JCR_CONFIGURATION</name>
        <full_name>JCR_CONFIGURATION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}configuration"]]></value>
        <docblock line="427">
          <description><![CDATA[A constant for the property name jcr:configuration (in extended form),
declared in node type mix:versionable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="427" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="439" package="phpcr\interfaces">
        <name>JCR_VERSIONABLE_UUID</name>
        <full_name>JCR_VERSIONABLE_UUID</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}versionableUuid"]]></value>
        <docblock line="434">
          <description><![CDATA[A constant for the property name jcr:versionableUuid (in extended form),
declared in node type nt:version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="434" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="446" package="phpcr\interfaces">
        <name>JCR_COPIED_FROM</name>
        <full_name>JCR_COPIED_FROM</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}copiedFrom"]]></value>
        <docblock line="441">
          <description><![CDATA[A constant for the property name jcr:copiedFrom (in extended form),
declared in node type nt:version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="441" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="453" package="phpcr\interfaces">
        <name>JCR_SUCCESSORS</name>
        <full_name>JCR_SUCCESSORS</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}successors"]]></value>
        <docblock line="448">
          <description><![CDATA[A constant for the property name jcr:successors (in extended form),
declared in node type nt:version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="448" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="460" package="phpcr\interfaces">
        <name>JCR_CHILD_VERSION_HISTORY</name>
        <full_name>JCR_CHILD_VERSION_HISTORY</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}childVersionHistory"]]></value>
        <docblock line="455">
          <description><![CDATA[A constant for the property name jcr:childVersionHistory (in extended form),
declared in node type nt:versionedChild.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="455" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="467" package="phpcr\interfaces">
        <name>JCR_ROOT</name>
        <full_name>JCR_ROOT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}root"]]></value>
        <docblock line="462">
          <description><![CDATA[A constant for the property name jcr:root (in extended form),
declared in node type nt:configuration.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="462" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="474" package="phpcr\interfaces">
        <name>JCR_STATEMENT</name>
        <full_name>JCR_STATEMENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}statement"]]></value>
        <docblock line="469">
          <description><![CDATA[A constant for the property name jcr:statement (in extended form),
declared in node type nt:query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="469" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="557" package="phpcr\interfaces">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="476">
          <description><![CDATA[Sets the value of this property to the value.]]></description>
          <long-description><![CDATA[<p>If the type parameter is present and this implementation supports
dynamic re-binding of properties, this property changes its type.
First, a conversion of value into that type is attempted with
PropertyType::convertType() and if there is no ValueFormatException,
the property type changes to the new type.
If the node type does not allow the requested type, a
ConstraintViolationException is thrown.
If the implementation does not support dynamic re-binding, an
UnsupportedRepositoryException is thrown if the type parameter is
present and different from the current type.</p>

<p>If no explicit type is given, then the type is derived from the value.
(First value in case of multi-valuedproperty.)
If the node type allows the type of the parameter, this property changes
its type to the type of the value. Otherwise, a conversion of the value
into the required type is attempted with PropertyType::convertType()</p>

<p>If value is of type PropertyInterface, the value of the property is
copied into this property. (If type is set, the property value is
converted into this type, otherwise the type of the property is used
as in the case of no explicit type).
This can be used to copy a binary from one property into another without
getting the stream. The implemenation should take care to detect the
case and copy the binary data directly in the backend for optimal
performance.</p>

<p>The type detection follows PropertyType::determineType. Thus, passing a
Node object without an explicit type (REFERENCE or WEAKREFERENCE) will
create a REFERENCE property. If the specified node is not referenceable,
a ValueFormatException is thrown.</p>

<p>To create a PATH property with a reference to an other property, you can
call setValue with the return value of getPath called on the other
property and the PATH type constant. Passing the property itself and the
PATH type will convert the <em>value</em> of the property to a path.</p>

<p>When assigning a stream resource to write a binary property, the client
application must leave the stream alone afterwards. The PHPCR
implementation is responsible for closing it after saving.</p>

<p>This method is a session-write and therefore requires a</p>

<pre><code>save</code></pre>

<p>to dispatch the change.</p>

<p>If value is an array:
If this property is not multi-valued then a ValueFormatException is
thrown immediately.</p>

<p><strong>PHPCR Note:</strong> The Java API defines this method with
     multiple differing signatures.
<strong>PHPCR Note:</strong> Because we removed the Value interface,
     this method replaces ValueFactory::createValue.</p>]]></long-description>
          <tag line="476" name="param" description="The value to set" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="476" name="param" description="Type request for the property, optional. Must be a constant from PropertyType" type="integer" variable="$type">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="476" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="476" name="throws" description="if the type or format of the&#10;     specified value is incompatible with the type of this property." type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="476" name="throws" description="if this property belongs to a&#10;     node that is read-only due to a checked-in node and this&#10;     implementation performs this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="476" name="throws" description="if a lock prevents the setting of the&#10;     value and this implementation performs this validation immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="476" name="throws" description="if the change would&#10;     violate a node-type or other constraint and this implementation&#10;     performs this validation immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="476" name="throws" description="if the type&#10;     parameter is set and different from the current type and this&#10;     implementation does not support dynamic re-binding" type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="476" name="throws" description="if the specified DateTime value&#10;     cannot be expressed in the ISO 8601-based format defined in the JCR&#10;     2.0 specification and the implementation does not support dates&#10;     incompatible with that format." type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="476" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="476" name="api" description=""/>
        </docblock>
        <argument line="557">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="557">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="571" package="phpcr\interfaces">
        <name>addValue</name>
        <full_name>addValue</full_name>
        <docblock line="559">
          <description><![CDATA[Appends a value to a multi-value property.]]></description>
          <long-description><![CDATA[<p>It is added at the end of the
list.</p>

<p><strong>PHPCR Note:</strong> This is a new method not found in Java JCR.
In PHP appending to strings is easy and this is more convenient than
getting the property and appending to the array and setting again.</p>]]></long-description>
          <tag line="559" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="559" name="throws" description="if the property is not multi-value." type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
        </docblock>
        <argument line="571">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="586" package="phpcr\interfaces">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="573">
          <description><![CDATA[Get the value in format default for the PropertyType of this property.]]></description>
          <long-description><![CDATA[<p>In case of a (WEAK)REFERENCE, the node is dereferenced and returned. For
all other cases including PATH, the value is returned as is. If you want
to dereference a PATH to a property or node, you need to explicitly call
getNode() resp. getProperty().</p>

<p><b>PHPCR Note:</b> We dropped the Value interface as its unnecessary
with weak typing.</p>]]></long-description>
          <tag line="573" name="return" description="value of this property, or array in case of multi-value." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="598" package="phpcr\interfaces">
        <name>getString</name>
        <full_name>getString</full_name>
        <docblock line="588">
          <description><![CDATA[Returns a String representation of the value of this property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="588" name="return" description="A string representation of the value of this property, or&#10;     an array of string for multi-valued properties." type="\PHPCR\string\array">
            <type by_reference="false">\PHPCR\string\array</type>
          </tag>
          <tag line="588" name="throws" description="if conversion to a String is not possible" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="588" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="588" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="611" package="phpcr\interfaces">
        <name>getBinary</name>
        <full_name>getBinary</full_name>
        <docblock line="600">
          <description><![CDATA[Returns a Binary representation of the value of this property.]]></description>
          <long-description><![CDATA[<p>The Binary object in turn provides methods to access the binary data
itself. Uses the standard conversion to binary (see JCR specification).</p>]]></long-description>
          <tag line="600" name="return" description="A stream resource if the underlying binary" type="resource|array">
            <type by_reference="false">resource</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="600" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="600" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="625" package="phpcr\interfaces">
        <name>getLong</name>
        <full_name>getLong</full_name>
        <docblock line="613">
          <description><![CDATA[Returns an integer representation of the value of this property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="613" name="return" description="An integer representation of the value of this property,&#10;     or an array of integer for multi-valued properties." type="integer|array">
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="613" name="throws" description="if conversion to integer is not&#10;     possible" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="613" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="613" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="638" package="phpcr\interfaces">
        <name>getDouble</name>
        <full_name>getDouble</full_name>
        <docblock line="627">
          <description><![CDATA[Returns a float representation of the value of this property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="627" name="return" description="A float representation of the value of this property, or&#10;     an array of float for multi-valued properties." type="float|array">
            <type by_reference="false">float</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="627" name="throws" description="if conversion to a double is not possible" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="627" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="627" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="656" package="phpcr\interfaces">
        <name>getDecimal</name>
        <full_name>getDecimal</full_name>
        <docblock line="640">
          <description><![CDATA[Returns an arbitrary precision number (encoded as string) representation
of this value (a BigDecimal in Java).]]></description>
          <long-description><![CDATA[<p>The string must be encoded with the C locale because of
http://bugs.php.net/bug.php?id=16532</p>]]></long-description>
          <tag line="640" name="return" description="A string representation of the value of this property, or&#10;     an array of strings for multi-valued properties." type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="640" name="throws" description="if conversion to a number string is&#10;     not possible" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="640" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="640" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="673" package="phpcr\interfaces">
        <name>getDate</name>
        <full_name>getDate</full_name>
        <docblock line="658">
          <description><![CDATA[Returns a \DateTime representation of the value of this property.]]></description>
          <long-description><![CDATA[<p>The object returned is a copy of the stored value, so changes to it are
not reflected in internal storage.</p>]]></long-description>
          <tag line="658" name="return" description="A date representation of the value of this property,&#10;     or an array of DateTime for multi-valued properties." type="\DateTime|array">
            <type by_reference="false">\DateTime</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="658" name="throws" description="if conversion to \DateTime is not&#10;     possible" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="658" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="658" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="693" package="phpcr\interfaces">
        <name>getBoolean</name>
        <full_name>getBoolean</full_name>
        <docblock line="675">
          <description><![CDATA[Returns a boolean representation of the value of this property.]]></description>
          <long-description><![CDATA[<p><b>PHP Note:</b>Keep in mind that according to the specification, not
all property types can be converted to boolean. Most actually can not
be converted - see PropertyType::convertType().
If you want to know if a value is empty in the PHP sense, use
getString() and do your checks on the string.</p>]]></long-description>
          <tag line="675" name="return" description="A boolean representation of the value of this property,&#10;     or an array of boolean for multi-valued properties." type="boolean|array">
            <type by_reference="false">boolean</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="675" name="throws" description="if conversion to a boolean is not&#10;     possible" type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="675" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="675" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="729" package="phpcr\interfaces">
        <name>getNode</name>
        <full_name>getNode</full_name>
        <docblock line="695">
          <description><![CDATA[Gets the node the property refers to by its type.]]></description>
          <long-description><![CDATA[<p>If this property is of type REFERENCE, WEAKREFERENCE or PATH (or
convertible to one of these types) this method returns the Node to
which this property refers.
If this property is of type PATH and it contains a relative path, it is
interpreted relative to the parent node of this property. For example "."
refers to the parent node itself, ".." to the parent of the parent node
and "foo" to a sibling node of this property.</p>

<p>If you do not want to dereference the nodes yet, you can use getString
to get the unique ids and use the SessionInterface::getNodeByIdentifier
as all referenced nodes are referenciable and thus must have a uuid.
If its a PATH property, you will need the node of this property and use
getNodes to get the nodes with relative or absolute path.</p>]]></long-description>
          <tag line="695" name="return" description="the referenced Node, or an array of Nodes&#10;     for multi-valued properties." type="\PHPCR\NodeInterface|array">
            <type by_reference="false">\PHPCR\NodeInterface</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="695" name="throws" description="if this property cannot be converted&#10;     to a referring type (REFERENCE, WEAKREFERENCE or PATH) or if this&#10;     property is a referring type but is currently part of the frozen&#10;     state of a version in version storage." type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="695" name="throws" description="If this property is of type PATH or&#10;     WEAKREFERENCE and no target node accessible by the current Session&#10;     exists in this workspace. Note that this applies even if the&#10;     property is a PATH and a property exists at the specified location.&#10;     To dereference to a target property (as opposed to a target node),&#10;     the method PropertyInterface::getProperty() is used." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="695" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="695" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="760" package="phpcr\interfaces">
        <name>getProperty</name>
        <full_name>getProperty</full_name>
        <docblock line="731">
          <description><![CDATA[Gets the property the property refers to by its type.]]></description>
          <long-description><![CDATA[<p>If this property is of type PATH (or convertible to this type) this
method returns the Property to which this property refers.
If this property contains a relative path, it is interpreted relative
to the parent node of this property. Therefore, when resolving such a
relative path, the segment "." refers to the parent node itself, ".." to
the parent of the parent node and "foo" to a sibling property of this
property or this property itself.</p>

<p>For example, if this property is located at /a/b/c and it has a value of
"../d" then this method will return the property at /a/d if such exists.</p>]]></long-description>
          <tag line="731" name="return" description="the referenced property, or an array of&#10;     properties for multi-valued properties." type="\PHPCR\PropertyInterface|array">
            <type by_reference="false">\PHPCR\PropertyInterface</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="731" name="throws" description="if this property cannot be converted&#10;     to a PATH or if this property is a referring type but is currently&#10;     part of the frozen state of a version in version storage." type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="731" name="throws" description="If no property accessible by the&#10;     current Session exists in this workspace at the specified path.&#10;     Note that this applies even if a node exists at the specified&#10;     location. To dereference to a target node, the method&#10;     PropertyInterface::getNode() is used." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="731" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="731" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="782" package="phpcr\interfaces">
        <name>getLength</name>
        <full_name>getLength</full_name>
        <docblock line="762">
          <description><![CDATA[Returns the length(s) of the value(s) of this property.]]></description>
          <long-description><![CDATA[<p>For a BINARY property, getLength returns the number of bytes.
For other property types, getLength returns the same value that would be
returned by calling strlen() on the value when it has been converted to
a STRING according to standard JCR propety type conversion.</p>

<p>Returns -1 if the implementation cannot determine the length.</p>

<p>For multi-valuedproperties, the same rules apply, but returns an array of
lengths with the same order as the values have in getValue.</p>]]></long-description>
          <tag line="762" name="return" description="the length of this value, or an array of lengths&#10;     for multi-valued properties" type="integer|array">
            <type by_reference="false">integer</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="762" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="762" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="802" package="phpcr\interfaces">
        <name>getDefinition</name>
        <full_name>getDefinition</full_name>
        <docblock line="784">
          <description><![CDATA[Returns the property definition that applies to this property.]]></description>
          <long-description><![CDATA[<p>In some cases there may appear to be more than one definition that could
apply to this node. However, it is assumed that upon creation or change
of this property, a single particular definition is chosen by the
implementation. It is that definition that this method returns. How this
governing definition is selected upon property creation or change from
among others which may have been applicable is an implementation issue
and is not covered by this specification.</p>]]></long-description>
          <tag line="784" name="return" description="a PropertyDefinition&#10;     object." type="\PHPCR\NodeType\PropertyDefinitionInterface">
            <type by_reference="false">\PHPCR\NodeType\PropertyDefinitionInterface</type>
          </tag>
          <tag line="784" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="784" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="835" package="phpcr\interfaces">
        <name>getType</name>
        <full_name>getType</full_name>
        <docblock line="804">
          <description><![CDATA[Returns the type of this Property.]]></description>
          <long-description><![CDATA[<p>Following property types are available:</p>

<ul>
<li>PropertyType::STRING</li>
<li>PropertyType::BINARY</li>
<li>PropertyType::DATE</li>
<li>PropertyType::DOUBLE</li>
<li>PropertyType::LONG</li>
<li>PropertyType::BOOLEAN</li>
<li>PropertyType::NAME</li>
<li>PropertyType::PATH</li>
<li>PropertyType::REFERENCE</li>
<li>PropertyType::WEAKREFERENCE</li>
<li>PropertyType::URI</li>
</ul>

<p>The type returned is that which was set at property creation. Note that
for some property p, the type returned by $p->getType() will differ from
the type returned by $p->getDefinition()->getRequiredType() only in the
case where the latter returns UNDEFINED. The type of a property instance
is never UNDEFINED (it must always have some actual type).</p>]]></long-description>
          <tag line="804" name="return" description="The numerical representation of a property type." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="804" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="804" name="see" description="\PHPCR\PropertyType" refers="\PHPCR\PropertyType"/>
          <tag line="804" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="849" package="phpcr\interfaces">
        <name>isMultiple</name>
        <full_name>isMultiple</full_name>
        <docblock line="837">
          <description><![CDATA[Determines if the current property is multi-valued.]]></description>
          <long-description><![CDATA[<p>Returns true if this property is multi-valued and false if this property
is single-valued.</p>]]></long-description>
          <tag line="837" name="return" description="true if this property is multi-valued; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="837" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="837" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/InvalidItemStateException.php" hash="0c74816ef59cfece3f13b2d1dfa2a824" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="44" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>InvalidItemStateException</name>
      <full_name>\PHPCR\InvalidItemStateException</full_name>
      <docblock line="27">
        <description><![CDATA[This exception shall be thrown in case of an issue of a state of an element.]]></description>
        <long-description><![CDATA[<p>An element might either be a Node or Property.</p>

<p>This exception is thrown by the write methods of Node and Property and by
SessionInterface::save() and SessionInterface::refresh if an attempted
change would conflict with a change to the persistent workspace made through
another Session.</p>

<p>Also thrown by methods of Node and Property if that object represents an
item that has been removed from the workspace.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/RepositoryFactoryInterface.php" hash="eacaa249cbca0355f33bca5c1f305f89" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="42" package="phpcr\interfaces">
      <name>RepositoryFactoryInterface</name>
      <full_name>\PHPCR\RepositoryFactoryInterface</full_name>
      <docblock line="27">
        <description><![CDATA[RepositoryFactory is an interface for factory class implementations for
Repositories.]]></description>
        <long-description><![CDATA[<p>Examples how to obtain repository instances</p>

<pre>
   $parameters = array('com.vendor.address' => 'vendor://localhost:9999/myrepo');
   $repository = \SomeRepository\RepositoryFactory::getRepository($parameters);
</pre>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR" line="73" package="phpcr\interfaces">
        <name>getRepository</name>
        <full_name>getRepository</full_name>
        <docblock line="44">
          <description><![CDATA[Attempts to establish a connection to a repository using the given
parameters.]]></description>
          <long-description><![CDATA[<p>Parameters are passed in an array of key/value pairs. The keys are not
specified by JCR and are implementation specific.
However, vendors should use keys that are namespace qualified in the
php style to distinguish their key names. For example an address
parameter might be jackalope.jackrabbit_url.</p>

<p>The implementation must return null if it does not understand
the given parameters. The implementation may also return null if a
default repository instance is requested (indicated by null parameters)
and this factory is not able to identify a default repository. An
implementation should throw an RepositoryException if it is the right
factory but has trouble connecting to the repository.</p>]]></long-description>
          <tag line="44" name="param" description="string key/value pairs as repository arguments or null if a client wishes to connect to a default repository." type="array|null" variable="$parameters">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="44" name="return" description="a repository instance or null if this&#10;     implementation does not understand the passed parameters" type="\PHPCR\RepositoryInterface">
            <type by_reference="false">\PHPCR\RepositoryInterface</type>
          </tag>
          <tag line="44" name="throws" description="if no suitable repository is found or&#10;     another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="44" name="api" description=""/>
        </docblock>
        <argument line="73">
          <name>$parameters</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR" line="86" package="phpcr\interfaces">
        <name>getConfigurationKeys</name>
        <full_name>getConfigurationKeys</full_name>
        <docblock line="75">
          <description><![CDATA[Get the list of configuration options that can be passed to
RepositoryFactoryInterface::getRepository()]]></description>
          <long-description><![CDATA[<p>The description string should include whether the key is mandatory or
optional.</p>]]></long-description>
          <tag line="75" name="return" description="hash map of configuration key =&gt; english description" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="75" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Retention/HoldInterface.php" hash="834df2e6654eb99f78d0c56f3a265488" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Retention" line="39" package="phpcr\interfaces">
      <name>HoldInterface</name>
      <full_name>\PHPCR\Retention\HoldInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Hold represents a hold that can be applied to an existing node in order to
prevent the node from being modified or removed.]]></description>
        <long-description><![CDATA[<p>The format and interpretation
of the name are not specified. They are application-dependent.</p>

<p>If isDeep() is true, the hold applies to the node and its entire subgraph.
Otherwise the hold applies to the node and its properties only.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="49" package="phpcr\interfaces">
        <name>isDeep</name>
        <full_name>isDeep</full_name>
        <docblock line="41">
          <description><![CDATA[Returns true if this Hold is deep.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="return" description="true if this Hold is deep." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="41" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="41" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="59" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="51">
          <description><![CDATA[Returns the name of this Hold.]]></description>
          <long-description><![CDATA[<p>A JCR name.</p>]]></long-description>
          <tag line="51" name="return" description="the name of this Hold. A JCR name." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="51" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Retention/RetentionPolicyInterface.php" hash="42d81bb4026f3ce67d6a0433c4f156c0" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Retention" line="34" package="phpcr\interfaces">
      <name>RetentionPolicyInterface</name>
      <full_name>\PHPCR\Retention\RetentionPolicyInterface</full_name>
      <docblock line="27">
        <description><![CDATA[A RetentionPolicy is an object with a name and an optional description.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="44" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="36">
          <description><![CDATA[Returns the name of the retention policy.]]></description>
          <long-description><![CDATA[<p>A JCR name.</p>]]></long-description>
          <tag line="36" name="return" description="the name of the access control policy. A JCR name." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Retention/RetentionManagerInterface.php" hash="31b02dc51544b3559786f739fd8688bc" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Retention" line="34" package="phpcr\interfaces">
      <name>RetentionManagerInterface</name>
      <full_name>\PHPCR\Retention\RetentionManagerInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The RetentionManager object is accessed via SessionInterface::getRetentionManager().]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="56" package="phpcr\interfaces">
        <name>getHolds</name>
        <full_name>getHolds</full_name>
        <docblock line="36">
          <description><![CDATA[Returns all hold objects that have been added through this API to the
existing node at $absPath.]]></description>
          <long-description><![CDATA[<p>If no hold has been set before, this method returns an empty array.</p>]]></long-description>
          <tag line="36" name="param" description="The absolute path to a node." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="return" description="All hold objects that have been added to the existing node&#10;     at absPath through this API or an empty array if no hold has been&#10;     set." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="36" name="throws" description="if no node at absPath exists or the&#10;     session does not have sufficient access to retrieve the node." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="36" name="throws" description="if the current session does not&#10;     have sufficient access to retrieve the holds." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="36" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
        <argument line="56">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="87" package="phpcr\interfaces">
        <name>addHold</name>
        <full_name>addHold</full_name>
        <docblock line="58">
          <description><![CDATA[Places a hold on the existing node at $absPath.]]></description>
          <long-description><![CDATA[<p>If $isDeep is true the hold applies to this node and its subgraph. The
hold does not take effect until a save is performed. A node may have
more than one hold. The format and interpretation of the name are not
specified. They are application-dependent.</p>]]></long-description>
          <tag line="58" name="param" description="The absolute path to a node." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="An application-dependent string." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="A boolean indicating if the hold applies to the subgraph." type="boolean" variable="$isDeep">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="58" name="return" description="The Hold applied." type="\PHPCR\Retention\HoldInterface">
            <type by_reference="false">\PHPCR\Retention\HoldInterface</type>
          </tag>
          <tag line="58" name="throws" description="if no node at $absPath exists or&#10;     the session does not have sufficient access to retrieve the node." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="58" name="throws" description="if the current session does not&#10;     have sufficient access to perform the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="58" name="throws" description="if a lock applies at the node at&#10;     $absPath and this implementation performs this validation&#10;     immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="58" name="throws" description="if the node at $absPath is&#10;     read-only due to a checked-in node and this implementation performs&#10;     this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="58" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="58" name="api" description=""/>
        </docblock>
        <argument line="87">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="87">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="87">
          <name>$isDeep</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="113" package="phpcr\interfaces">
        <name>removeHold</name>
        <full_name>removeHold</full_name>
        <docblock line="89">
          <description><![CDATA[Removes the specified hold from the node at $absPath.]]></description>
          <long-description><![CDATA[<p>The removal does not take effect until a save is performed.</p>]]></long-description>
          <tag line="89" name="param" description="an absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="param" description="the hold to be removed." type="\PHPCR\Retention\HoldInterface" variable="$hold">
            <type by_reference="false">\PHPCR\Retention\HoldInterface</type>
          </tag>
          <tag line="89" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="89" name="throws" description="if no node at $absPath exists or&#10;     the session does not have sufficient access to retrieve the node." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="89" name="throws" description="if the current session does not&#10;     have sufficient access to perform the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="89" name="throws" description="if a lock applies at the node at&#10;     $absPath and this implementation performs this validation&#10;     immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="89" name="throws" description="if the node at $absPath is&#10;     read-only due to a checked-in node and this implementation performs&#10;     this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="89" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="89" name="api" description=""/>
        </docblock>
        <argument line="113">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$hold</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Retention\HoldInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="136" package="phpcr\interfaces">
        <name>getRetentionPolicy</name>
        <full_name>getRetentionPolicy</full_name>
        <docblock line="115">
          <description><![CDATA[Gets the retention poilcy of a node identified by its path.]]></description>
          <long-description><![CDATA[<p>Returns the retention policy that has been set using
setRetentionPolicy() on the node at $absPath or null if no policy has
been set.</p>]]></long-description>
          <tag line="115" name="param" description="an absolute path to an existing node." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="115" name="return" description="The retention policy&#10;     that applies to the existing node at $absPath or null if no policy&#10;     applies." type="\PHPCR\Retention\RetentionPolicyInterface">
            <type by_reference="false">\PHPCR\Retention\RetentionPolicyInterface</type>
          </tag>
          <tag line="115" name="throws" description="if no node at $absPath exists or&#10;     the session does not have sufficient access to retrieve the node." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="115" name="throws" description="if the current session does not&#10;     have sufficient access to retrieve the policy." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="115" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="115" name="api" description=""/>
        </docblock>
        <argument line="136">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="166" package="phpcr\interfaces">
        <name>setRetentionPolicy</name>
        <full_name>setRetentionPolicy</full_name>
        <docblock line="138">
          <description><![CDATA[Sets a retention policy of a node identified by the given path.]]></description>
          <long-description><![CDATA[<p>Sets the retention policy of the node at $absPath to that defined in the
specified policy node. Interpretation and enforcement of this policy is
an implementation issue. In any case the policy does does not take
effect until a save is performed.</p>]]></long-description>
          <tag line="138" name="param" description="an absolute path to an existing node." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="138" name="param" description="a retention policy." type="\PHPCR\Retention\RetentionPolicyInterface" variable="$retentionPolicy">
            <type by_reference="false">\PHPCR\Retention\RetentionPolicyInterface</type>
          </tag>
          <tag line="138" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="138" name="throws" description="if no node at $absPath exists or&#10;     the session does not have sufficient access to retrieve the node." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="138" name="throws" description="if the current session does not&#10;     have sufficient access to perform the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="138" name="throws" description="if a lock applies at the node at&#10;     $absPath and this implementation performs this validation&#10;     immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="138" name="throws" description="if the node at $absPath is&#10;     read-only due to a checked-in node and this implementation performs&#10;     this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="138" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="138" name="api" description=""/>
        </docblock>
        <argument line="166">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="166">
          <name>$retentionPolicy</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Retention\RetentionPolicyInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Retention" line="192" package="phpcr\interfaces">
        <name>removeRetentionPolicy</name>
        <full_name>removeRetentionPolicy</full_name>
        <docblock line="168">
          <description><![CDATA[Removes a previously set retention policy.]]></description>
          <long-description><![CDATA[<p>Causes the current retention policy on the node at $absPath to no longer
apply. The removal does not take effect until a save is performed.</p>]]></long-description>
          <tag line="168" name="param" description="an absolute path to an existing node." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="168" name="throws" description="if no node at $absPath exists or&#10;     the session does not have sufficient access to retrieve the node." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="168" name="throws" description="if the current session does not&#10;     have sufficient access to perform the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="168" name="throws" description="if a lock applies at the node at&#10;     $absPath and this implementation performs this validation&#10;     immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="168" name="throws" description="if the node at $absPath is&#10;     read-only due to a checked-in node and this implementation performs&#10;     this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="168" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="168" name="api" description=""/>
        </docblock>
        <argument line="192">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/PathNotFoundException.php" hash="a4cf17b587a24321a83470b9b9f3226a" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="35" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>PathNotFoundException</name>
      <full_name>\PHPCR\PathNotFoundException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown when no Item exists at the specified path or when the
specified path implies intermediary Nodes that do not exist.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/NamespaceRegistryInterface.php" hash="a1260f164accd105268385aa8d83a7b7" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="48" package="phpcr\interfaces">
      <name>NamespaceRegistryInterface</name>
      <full_name>\PHPCR\NamespaceRegistryInterface</full_name>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[Defines an interface to implement a single namespace registry.]]></description>
        <long-description><![CDATA[<p>Each repository has a single, persistent namespace registry represented by
the NamespaceRegistry object, accessed via WorkspaceInterface::getNamespaceRegistry().
The namespace registry contains the default prefixes of the registered
namespaces. The namespace registry may contain namespaces that are not used
in repository content, and there may be repository content with namespaces
that are not included n the registry.</p>

<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. NamespaceRegistry has to implement either \IteratorAggregate
or \Iterator.
The iterator lets you iterate over all namespaces, with the prefixes as keys
and corresponding url as value.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="54" package="phpcr\interfaces">
        <name>PREFIX_JCR</name>
        <full_name>PREFIX_JCR</full_name>
        <value><![CDATA["jcr"]]></value>
        <docblock line="50">
          <description><![CDATA[A constant for the predefined namespace prefix "jcr".]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="60" package="phpcr\interfaces">
        <name>PREFIX_NT</name>
        <full_name>PREFIX_NT</full_name>
        <value><![CDATA["nt"]]></value>
        <docblock line="56">
          <description><![CDATA[A constant for the predefined namespace prefix "nt".]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="66" package="phpcr\interfaces">
        <name>PREFIX_SV</name>
        <full_name>PREFIX_SV</full_name>
        <value><![CDATA["sv"]]></value>
        <docblock line="62">
          <description><![CDATA[A constant for the predefined namespace prefix "sv"]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="72" package="phpcr\interfaces">
        <name>PREFIX_MIX</name>
        <full_name>PREFIX_MIX</full_name>
        <value><![CDATA["mix"]]></value>
        <docblock line="68">
          <description><![CDATA[A constant for the predefined namespace prefix "mix".]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="78" package="phpcr\interfaces">
        <name>PREFIX_XML</name>
        <full_name>PREFIX_XML</full_name>
        <value><![CDATA["xml"]]></value>
        <docblock line="74">
          <description><![CDATA[A constant for the predefined namespace prefix "xml".]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="84" package="phpcr\interfaces">
        <name>PREFIX_EMPTY</name>
        <full_name>PREFIX_EMPTY</full_name>
        <value><![CDATA[""]]></value>
        <docblock line="80">
          <description><![CDATA[A constant for the predefined namespace prefix "" (the empty prefix).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="90" package="phpcr\interfaces">
        <name>NAMESPACE_JCR</name>
        <full_name>NAMESPACE_JCR</full_name>
        <value><![CDATA["http://www.jcp.org/jcr/1.0"]]></value>
        <docblock line="86">
          <description><![CDATA[A constant for the predefined namespace mapped by default to the prefix "jcr"]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="96" package="phpcr\interfaces">
        <name>NAMESPACE_NT</name>
        <full_name>NAMESPACE_NT</full_name>
        <value><![CDATA["http://www.jcp.org/jcr/nt/1.0"]]></value>
        <docblock line="92">
          <description><![CDATA[A constant for the predefined namespace mapped by default to the prefix "nt"]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="102" package="phpcr\interfaces">
        <name>NAMESPACE_SV</name>
        <full_name>NAMESPACE_SV</full_name>
        <value><![CDATA["http://www.jcp.org/jcr/sv/1.0"]]></value>
        <docblock line="98">
          <description><![CDATA[A constant for the predefined namespace mapped by default to the prefix "sv"]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="108" package="phpcr\interfaces">
        <name>NAMESPACE_MIX</name>
        <full_name>NAMESPACE_MIX</full_name>
        <value><![CDATA["http://www.jcp.org/jcr/mix/1.0"]]></value>
        <docblock line="104">
          <description><![CDATA[A constant for the predefined namespace mapped by default to the prefix "mix"]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="114" package="phpcr\interfaces">
        <name>NAMESPACE_XML</name>
        <full_name>NAMESPACE_XML</full_name>
        <value><![CDATA["http://www.w3.org/XML/1998/namespace"]]></value>
        <docblock line="110">
          <description><![CDATA[A constant for the predefined namespace mapped by default to the prefix "xml"]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="120" package="phpcr\interfaces">
        <name>NAMESPACE_EMPTY</name>
        <full_name>NAMESPACE_EMPTY</full_name>
        <value><![CDATA[""]]></value>
        <docblock line="116">
          <description><![CDATA[A constant for the predefined namespace mapped by default to the prefix "" (the empty prefix)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="164" package="phpcr\interfaces">
        <name>registerNamespace</name>
        <full_name>registerNamespace</full_name>
        <docblock line="122">
          <description><![CDATA[Sets a one-to-one mapping between prefix and uri in the global namespace
registry of this repository.]]></description>
          <long-description><![CDATA[<p>Assigning a new prefix to a URI that already exists in the namespace
registry erases the old prefix. In general this can almost always be
done, though an implementation is free to prevent particular
remappings by throwing a NamespaceException.</p>

<p>On the other hand, taking a prefix that is already assigned to a URI
and re-assigning it to a new URI in effect unregisters that URI.
Therefore, the same restrictions apply to this operation as to
NamespaceRegistryInterface::unregisterNamespace():</p>

<ul>
<li>Attempting to re-assign a built-in prefix (jcr, nt, mix, sv, xml,
or the empty prefix) to a new URI will throw a
NamespaceException.</li>
<li>Attempting to register a namespace with a prefix that begins with
the characters "xml" (in any combination of case) will throw a
NamespaceException.</li>
<li>An implementation may prevent the re-assignment of any other namespace
prefixes for implementation-specific reasons by throwing a
NamespaceException.</li>
</ul>]]></long-description>
          <tag line="122" name="param" description="The prefix to be mapped." type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="122" name="param" description="The URI to be mapped." type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="122" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="122" name="throws" description="If an attempt is made to re-assign a&#10;     built-in prefix to a new URI or, to register a namespace with a&#10;     prefix that begins with the characters &quot;xml&quot; (in any combination of&#10;     case) or an attempt is made to perform a prefix re-assignment that&#10;     is forbidden for implementation-specific reasons." type="\PHPCR\NamespaceException">
            <type by_reference="false">\PHPCR\NamespaceException</type>
          </tag>
          <tag line="122" name="throws" description="if this&#10;     repository does not support namespace registry changes." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="122" name="throws" description="if the current session does not&#10;     have sufficient access to register the namespace." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="122" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="122" name="api" description=""/>
        </docblock>
        <argument line="164">
          <name>$prefix</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="164">
          <name>$uri</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="194" package="phpcr\interfaces">
        <name>unregisterNamespace</name>
        <full_name>unregisterNamespace</full_name>
        <docblock line="166">
          <description><![CDATA[Removes a namespace mapping from the registry.]]></description>
          <long-description><![CDATA[<p>The following restrictions apply:</p>

<ul>
<li>Attempting to unregister a built-in namespace (jcr, nt, mix, sv, xml or
the empty namespace) will throw a NamespaceException.</li>
<li>An attempt to unregister a namespace that is not currently registered
will throw a NamespaceException.</li>
<li>An implementation may prevent the unregistering of any other namespace
for implementation-specific reasons by throwing a
NamespaceException.</li>
</ul>]]></long-description>
          <tag line="166" name="param" description="The prefix of the mapping to be removed." type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="166" name="throws" description="unregister a built-in namespace or a&#10;     namespace that is not currently registered or a namespace whose&#10;     unregistration is forbidden for implementation-specific reasons." type="\PHPCR\NamespaceException">
            <type by_reference="false">\PHPCR\NamespaceException</type>
          </tag>
          <tag line="166" name="throws" description="if this&#10;     repository does not support namespace registry changes." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="166" name="throws" description="if the current session does not&#10;     have sufficient access to unregister the namespace." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="166" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="166" name="api" description=""/>
        </docblock>
        <argument line="194">
          <name>$prefix</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="205" package="phpcr\interfaces">
        <name>getPrefixes</name>
        <full_name>getPrefixes</full_name>
        <docblock line="196">
          <description><![CDATA[Returns an array holding all currently registered namespace prefixes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="return" description="a string array" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="196" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="196" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="216" package="phpcr\interfaces">
        <name>getURIs</name>
        <full_name>getURIs</full_name>
        <docblock line="207">
          <description><![CDATA[Returns an array holding all currently registered namespace URIs.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="207" name="return" description="a string array" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="207" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="207" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="231" package="phpcr\interfaces">
        <name>getURI</name>
        <full_name>getURI</full_name>
        <docblock line="218">
          <description><![CDATA[Returns the namespace URI to which the given prefix is mapped.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="218" name="param" description="a string" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="218" name="return" description="a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="218" name="throws" description="if a mapping with the specified prefix&#10;     does not exist." type="\PHPCR\NamespaceException">
            <type by_reference="false">\PHPCR\NamespaceException</type>
          </tag>
          <tag line="218" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="218" name="api" description=""/>
        </docblock>
        <argument line="231">
          <name>$prefix</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="246" package="phpcr\interfaces">
        <name>getPrefix</name>
        <full_name>getPrefix</full_name>
        <docblock line="233">
          <description><![CDATA[Returns the prefix which is mapped to the given uri.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="233" name="param" description="a string" type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="return" description="a string" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="233" name="throws" description="if a mapping with the specified uri&#10;     does not exist." type="\PHPCR\NamespaceException">
            <type by_reference="false">\PHPCR\NamespaceException</type>
          </tag>
          <tag line="233" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="233" name="api" description=""/>
        </docblock>
        <argument line="246">
          <name>$uri</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/NodeInterface.php" hash="161eaf5d1963f02bd0cdb455eb28d314" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="41" package="phpcr\interfaces">
      <name>NodeInterface</name>
      <full_name>\PHPCR\NodeInterface</full_name>
      <extends>\PHPCR\ItemInterface</extends>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[The Node interface represents a node in a workspace.]]></description>
        <long-description><![CDATA[<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. Nodes have to implement either \IteratorAggregate or
\Iterator.
The iterator is equivalent to <b>getNodes()</b> with no filter, returning
a list of all child nodes. Keys are the node names, values the node
instances.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="49" package="phpcr\interfaces">
        <name>JCR_CONTENT</name>
        <full_name>JCR_CONTENT</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}content"]]></value>
        <docblock line="43">
          <description><![CDATA[A constant for the JCR name jcr:content.]]></description>
          <long-description><![CDATA[<p>This is the name of
a child node declared in NodeType nt:file and a property declared in
nt:linkedFile.</p>]]></long-description>
          <tag line="43" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="55" package="phpcr\interfaces">
        <name>JCR_PROPERTY_DEFINITION</name>
        <full_name>JCR_PROPERTY_DEFINITION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}propertyDefinition"]]></value>
        <docblock line="51">
          <description><![CDATA[A constant for the node name jcr:propertyDefinition declared in nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="61" package="phpcr\interfaces">
        <name>JCR_CHILD_NODE_DEFINITION</name>
        <full_name>JCR_CHILD_NODE_DEFINITION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}childNodeDefinition"]]></value>
        <docblock line="57">
          <description><![CDATA[A constant for the node name jcr:childNodeDefinition declared in nt:nodeType.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="67" package="phpcr\interfaces">
        <name>JCR_ROOT_VERSION</name>
        <full_name>JCR_ROOT_VERSION</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}rootVersion"]]></value>
        <docblock line="63">
          <description><![CDATA[A constant for the node name jcr:rootVersion declared in nt:versionHistory.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="73" package="phpcr\interfaces">
        <name>JCR_VERSION_LABELS</name>
        <full_name>JCR_VERSION_LABELS</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}versionLabels"]]></value>
        <docblock line="69">
          <description><![CDATA[A constant for the node name jcr:versionLabels declared in nt:versionHistory.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="79" package="phpcr\interfaces">
        <name>JCR_FROZEN_NODE</name>
        <full_name>JCR_FROZEN_NODE</full_name>
        <value><![CDATA["{http://www.jcp.org/jcr/1.0}frozenNode"]]></value>
        <docblock line="75">
          <description><![CDATA[A constant for the node name jcr:frozenNode declared in nt:version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="130" package="phpcr\interfaces">
        <name>addNode</name>
        <full_name>addNode</full_name>
        <docblock line="81">
          <description><![CDATA[Creates a new node at the specified $relPath]]></description>
          <long-description><![CDATA[<p>This is session-write method, meaning that the addition of the new node
is dispatched upon SessionInterface::save().</p>

<p>The $relPath provided must not have an index on its final element,
otherwise a RepositoryException is thrown.</p>

<p>If ordering is supported by the node type of the parent node of the new
node then the new node is appended to the end of the child node list.</p>

<p>If $primaryNodeTypeName is specified, this type will be used (or a
ConstraintViolationException thrown if this child type is not allowed).
Otherwise the new node's primary node type will be determined by the
child node definitions in the node types of its parent. This may occur
either immediately, on dispatch (save, whether within or without
transactions) or on persist (save without transactions, commit within
a transaction), depending on the implementation.</p>]]></long-description>
          <tag line="81" name="param" description="The path of the new node to be created." type="string" variable="$relPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="param" description="The name of the primary node type of the new node. Optional." type="string" variable="$primaryNodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="return" description="The node that was added." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="81" name="throws" description="if an item at the specified path&#10;     already exists, same-name siblings are not allowed and this&#10;     implementation performs this validation immediately." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="81" name="throws" description="if the specified path implies&#10;     intermediary Nodes that do not exist or the last element of relPath&#10;     has an index, and this implementation performs this validation&#10;     immediately." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="81" name="throws" description="if a node type or&#10;     implementation-specific constraint is violated or if an attempt is&#10;     made to add a node as the child of a property and this&#10;     implementation performs this validation immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="81" name="throws" description="if the node to which the new&#10;     child is being added is read-only due to a checked-in node and this&#10;     implementation performs this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="81" name="throws" description="if a lock prevents the addition of the&#10;     node and this implementation performs this validation immediately&#10;     instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="81" name="throws" description="if $relPath is an absolute path" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="81" name="throws" description="if the last element of relPath has an&#10;     index or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="81" name="api" description=""/>
        </docblock>
        <argument line="130">
          <name>$relPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="130">
          <name>$primaryNodeTypeName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="179" package="phpcr\interfaces">
        <name>orderBefore</name>
        <full_name>orderBefore</full_name>
        <docblock line="132">
          <description><![CDATA[Insert a child node before another child identified by its path.]]></description>
          <long-description><![CDATA[<p>If this node supports child node ordering, this method inserts the child
node at srcChildRelPath into the child node list at the position
immediately before destChildRelPath.</p>

<p>To place the node srcChildRelPath at the end of the list, a
destChildRelPath of null is used.</p>

<p>Note that (apart from the case where destChildRelPath is null) both of
these arguments must be relative paths of depth one, in other words they
are the names of the child nodes, possibly suffixed with an index.</p>

<p>If srcChildRelPath and destChildRelPath are the same, then no change is
made.</p>

<p>This is session-write method, meaning that a change made by this method
is dispatched on save.</p>]]></long-description>
          <tag line="132" name="param" description="the relative path to the child node (that is, name plus possible index) to be moved in the ordering" type="string" variable="$srcChildRelPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="param" description="the the relative path to the child node (that is, name plus possible index) before which the node srcChildRelPath will be placed." type="string" variable="$destChildRelPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="132" name="throws" description="if ordering is&#10;     not supported on this node." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="132" name="throws" description="if an implementation-&#10;     specific ordering restriction is violated and this implementation&#10;     performs this validation immediately instead of waiting until save." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="132" name="throws" description="if either parameter is not the&#10;     relative path of a child node of this node." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="132" name="throws" description="if this node is read-only due to&#10;     a checked-in node and this implementation performs this validation&#10;     immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="132" name="throws" description="if a lock prevents the re-ordering and&#10;     this implementation performs this validation immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="132" name="throws" description="if $srcChildRelPath is an absolute path&#10;     or $destChildRelPath is non-null and any of the two paths is of&#10;     depth more than 1." type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="132" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="132" name="api" description=""/>
        </docblock>
        <argument line="179">
          <name>$srcChildRelPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="179">
          <name>$destChildRelPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="253" package="phpcr\interfaces">
        <name>setProperty</name>
        <full_name>setProperty</full_name>
        <docblock line="181">
          <description><![CDATA[Defines a value for a property identified by its name.]]></description>
          <long-description><![CDATA[<p>Sets the property of this node called $name to the specified value.
This method works as factory method to create new properties and as a
shortcut for PropertyInterface::setValue()</p>

<p>The type detection logic is exactly the same as in
PropertyInterface::setValue</p>

<p>If the property does not yet exist, it is created and its property type
determined by the node type of this node. If, based on the name and
value passed, there is more than one property definition that applies,
the repository chooses one definition according to some implementation-
specific criteria.</p>

<p>Once property with name P has been created, the behavior of a subsequent
setProperty($p,$v) may differ across implementations. Some repositories
may allow P to be dynamically re-bound to a different property
definition (based for example, on the new value being of a different
type than the original value) while other repositories may not allow
such dynamic re-binding.</p>

<p>Passing a null as the second parameter removes the property. It is
equivalent to calling remove on the Property object itself. For example,
$n->setProperty("P", null) would remove property called "P" of the
node $n.</p>

<p>This is a session-write method, meaning that changes made through this
method are dispatched on SessionInterface::save().</p>

<p>If $type is given:
The behavior of this method is identical to that of setProperty($name,
$value) except that the intended property type is explicitly specified.</p>

<p><b>Note:</b>
Have a look at the JSR-283 spec and/or API documentation for more details
on what is supposed to happen for different types of values being passed
to this method.</p>]]></long-description>
          <tag line="181" name="param" description="The name of a property of this node" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="181" name="param" description="The value to be assigned" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="181" name="param" description="The type to set for the property, optional. Must be a constant from {@link PropertyType}" type="integer" variable="$type">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="181" name="return" description="The new resp. updated Property object" type="\PHPCR\PropertyInterface">
            <type by_reference="false">\PHPCR\PropertyInterface</type>
          </tag>
          <tag line="181" name="throws" description="if the specified property is a DATE&#10;     but the value cannot be expressed in the ISO 8601-based format&#10;     defined in the JCR 2.0 specification and the implementation does&#10;     not support dates incompatible with that format or if value cannot&#10;     be converted to the type of the specified property or if the&#10;     property already exists and is multi-valued." type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="181" name="throws" description="if this node is versionable and&#10;     checked-in or is non-versionable but its nearest versionable&#10;     ancestor is checked-in and this implementation performs this&#10;     validation immediately instead of waiting until save." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="181" name="throws" description="if a lock prevents the setting of the&#10;     property and this implementation performs this validation&#10;     immediately instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="181" name="throws" description="if the change would violate&#10;     a node-type or other constraint and this implementation performs&#10;     this validation immediately instead of waiting until save." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="181" name="throws" description="if the type&#10;     parameter is set and different from the current type and this&#10;     implementation does not support dynamic re-binding" type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="181" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="181" name="see" description="\PHPCR\PropertyInterface::setValue()" refers="\PHPCR\PropertyInterface::setValue()"/>
          <tag line="181" name="api" description=""/>
        </docblock>
        <argument line="253">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="253">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="253">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="281" package="phpcr\interfaces">
        <name>getNode</name>
        <full_name>getNode</full_name>
        <docblock line="255">
          <description><![CDATA[Returns the node at relPath relative to this node.]]></description>
          <long-description><![CDATA[<p>If relPath contains a path element that refers to a node with same-name
sibling nodes without explicitly including an index using the
array-style notation ([x]), then the index [1] is assumed (indexing of
same name siblings begins at 1, not 0, in order to preserve
compatibility with XPath).</p>

<p>Within the scope of a single Session object, if a Node object has been
acquired, any subsequent call of getNode reacquiring the same node must
return a Node object reflecting the same state as the earlier Node
object. Whether this object is actually the same Node instance, or
simply one wrapping the same state, is up to the implementation.</p>]]></long-description>
          <tag line="255" name="param" description="The relative path of the node to retrieve." type="string" variable="$relPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="255" name="return" description="The node at relPath." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="255" name="throws" description="if no node exists at the specified&#10;     path or the current Session does not read access to the node at&#10;     the specified path, or if $relPath is an absolute path" type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="255" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="255" name="api" description=""/>
        </docblock>
        <argument line="281">
          <name>$relPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="342" package="phpcr\interfaces">
        <name>getNodes</name>
        <full_name>getNodes</full_name>
        <docblock line="283">
          <description><![CDATA[Get a set of nodes gathered by the definition of a filter.]]></description>
          <long-description><![CDATA[<p>If $filter is a string:
Gets all child nodes of this node accessible through the current Session
that match namePattern (if no pattern is given, all accessible child
nodes are returned). Does not include properties of this Node. The
pattern may be a full name or a partial name with one or more wildcard
characters ("*"), or a disjunction (using the "|" character to represent
logical OR) of these.
For example,</p>

<pre><code>N->getNodes("jcr:* | myapp:report | my doc")</code></pre>

<p>would return an iterator holding all accessible child nodes of N that
are either called 'myapp:report', begin with the prefix 'jcr:' or are
called 'my doc'.</p>

<p>The substrings within the pattern that are delimited by "|" characters
and which may contain wildcard characters ("*") are called "globs".</p>

<p>Note that leading and trailing whitespace around a glob is ignored, but
whitespace within a disjunct forms part of the pattern to be matched.</p>

<p>If $filter is an array:
Gets all child nodes of this node accessible through the current
Session that match one or more of the $filter strings in the passed
array.</p>

<p>A glob may be a full name or a partial name with one or more wildcard
characters ("<em>"). For example,
 N->getNodes(array("jcr:</em>", "myapp:report", "my doc"))
would return an iterator holding all accessible child nodes of N that
are either called 'myapp:report', begin with the prefix 'jcr:' or are
called 'my doc'.</p>

<p>Note that unlike in the case of the getNodes(<string>) leading and
trailing whitespace around a glob is not ignored.</p>

<p>The pattern is matched against the names (not the paths) of the
immediate child nodes of this node.</p>

<p>If this node has no accessible matching child nodes, then an empty
iterator is returned.</p>

<p>The same reacquisition semantics apply as with getNode($relPath).</p>]]></long-description>
          <tag line="283" name="param" description="a name pattern or an array of globbing strings." type="string|array" variable="$filter">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="283" name="return" description="over all (matching) child Nodes implementing&#10;     &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;. Keys are the Node&#10;     names, values the corresponding NodeInterface instances." type="\Iterator">
            <type by_reference="false">\Iterator</type>
          </tag>
          <tag line="283" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="283" name="api" description=""/>
        </docblock>
        <argument line="342">
          <name>$filter</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="361" package="phpcr\interfaces">
        <name>getProperty</name>
        <full_name>getProperty</full_name>
        <docblock line="344">
          <description><![CDATA[Returns the property at relPath relative to this node.]]></description>
          <long-description><![CDATA[<p>The same reacquisition semantics apply as with getNode(String).</p>]]></long-description>
          <tag line="344" name="param" description="The relative path of the property to retrieve." type="string" variable="$relPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="344" name="return" description="The property at relPath." type="\PHPCR\PropertyInterface">
            <type by_reference="false">\PHPCR\PropertyInterface</type>
          </tag>
          <tag line="344" name="throws" description="if no property exists at the&#10;     specified path or if the current Session does not have read access&#10;     to the specified property." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="344" name="throws" description="if $relPath is an absolute path" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="344" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="344" name="api" description=""/>
        </docblock>
        <argument line="361">
          <name>$relPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="384" package="phpcr\interfaces">
        <name>getPropertyValue</name>
        <full_name>getPropertyValue</full_name>
        <docblock line="363">
          <description><![CDATA[Returns the property of this node with name $name.]]></description>
          <long-description><![CDATA[<p>If $type is set, attempts to convert the value to the specified type.
This is a shortcut for getProperty()->getXX()</p>]]></long-description>
          <tag line="363" name="param" description="Name of this property" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="363" name="param" description="Type conversion request, optional. Must be a constant from {@link PropertyType}" type="integer" variable="$type">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="363" name="return" description="The value of the property with $name." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="363" name="throws" description="if no property exists at the&#10;     specified path or if the current Session does not have read access&#10;     to the specified property." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="363" name="throws" description="if the type or format of the&#10;     property can not be converted to the specified type." type="\PHPCR\ValueFormatException">
            <type by_reference="false">\PHPCR\ValueFormatException</type>
          </tag>
          <tag line="363" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="363" name="api" description=""/>
        </docblock>
        <argument line="384">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="384">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="443" package="phpcr\interfaces">
        <name>getProperties</name>
        <full_name>getProperties</full_name>
        <docblock line="386">
          <description><![CDATA[Get an iteratable set of properties gathered on behalf of a filter.]]></description>
          <long-description><![CDATA[<p>If $filter is a string:
Gets all properties of this node accessible through the current Session
that match namePattern (if no pattern is given, all accessible
properties are returned). Does not include child nodes of this node. The
pattern may be a full name or a partial name with one or more wildcard
characters ("*"), or a disjunction (using the "|" character to represent
logical OR) of these. For example,</p>

<pre><code>$n->getProperties("jcr:* | myapp:name | my doc")</code></pre>

<p>would return an iterator holding all accessible properties of N
that are either called 'myapp:name', begin with the prefix 'jcr:' or are
called 'my doc'.</p>

<p>The substrings within the pattern that are delimited by "|" characters
and which may contain wildcard characters ("*") are called globs.</p>

<p>Note that leading and trailing whitespace around a glob is ignored, but
whitespace within a disjunct forms part of the pattern to be matched.</p>

<p>If $filter is an array:
Gets all properties of this node accessible through the current
Session that match one or more of the $filter strings in the passed
array.</p>

<p>A glob may be a full name or a partial name with one or more wildcard
characters ("<em>"). For example,
 N->getProperties(array("jcr:</em>", "myapp:report", "my doc"))
would return an iterator holding all accessible properties of N
that are either called 'myapp:report', begin with the prefix 'jcr:' or
are called 'my doc'.</p>

<p>Note that unlike in the case of getProperties(<string>) leading and
trailing whitespace around a glob is not ignored.</p>

<p>The pattern is matched against the names (not the paths) of the
immediate child properties of this node.</p>

<p>If this node has no accessible matching properties, then an empty
iterator is returned.</p>

<p>The same reacquisition semantics apply as with getNode(String).</p>]]></long-description>
          <tag line="386" name="param" description="a name pattern" type="string|array" variable="$filter">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="386" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Keys are the property names, values the&#10;     corresponding PropertyInterface instances." type="\Iterator">
            <type by_reference="false">\Iterator</type>
          </tag>
          <tag line="386" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="386" name="api" description=""/>
        </docblock>
        <argument line="443">
          <name>$filter</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="469" package="phpcr\interfaces">
        <name>getPropertiesValues</name>
        <full_name>getPropertiesValues</full_name>
        <docblock line="445">
          <description><![CDATA[Shortcut for getProperties and then getting the values of the properties.]]></description>
          <long-description><![CDATA[<p>Apart from returning php native values instead of properties, this
method has the same semantics as getProperties()</p>

<p>To improve performance, implementations should avoid instantiating the
property objects for this method</p>]]></long-description>
          <tag line="445" name="param" description="a name pattern" type="string|array" variable="$filter">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="445" name="param" description="whether to dereference REFERENCE, WEAKREFERENCE and PATH properties or just return id/path strings" type="boolean" variable="$dereference">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="445" name="return" description="Keys are the property names, values the corresponding&#10;  property value (or array of values in case of multi-valued properties)&#10;  If $dereference is false, reference properties are uuid strings and&#10;  path properties path strings instead of the referenced node instances." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="445" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="445" name="see" description="\PHPCR\NodeInterface::getProperties()" refers="\PHPCR\NodeInterface::getProperties()"/>
          <tag line="445" name="api" description=""/>
        </docblock>
        <argument line="469">
          <name>$filter</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="469">
          <name>$dereference</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="494" package="phpcr\interfaces">
        <name>getPrimaryItem</name>
        <full_name>getPrimaryItem</full_name>
        <docblock line="471">
          <description><![CDATA[Returns the primary child item of the current node.]]></description>
          <long-description><![CDATA[<p>The primary node type of this node may specify one child item (child
node or property) of this node as the primary child item. This method
returns that item.</p>

<p>In cases where the primary child item specifies the name of a set
same-name sibling child nodes, the node returned will be the one among
the same-name siblings with index [1].</p>

<p>The same reacquisition semantics apply as with getNode(String).</p>]]></long-description>
          <tag line="471" name="return" description="the primary child item." type="\PHPCR\ItemInterface">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="471" name="throws" description="if this node does not have a&#10;     primary child item, either because none is declared in the node&#10;     type or because a declared primary item is not present on this node&#10;     instance, or because none accessible through the current Session" type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="471" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="471" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="507" package="phpcr\interfaces">
        <name>getIdentifier</name>
        <full_name>getIdentifier</full_name>
        <docblock line="496">
          <description><![CDATA[Returns the identifier of the current node.]]></description>
          <long-description><![CDATA[<p>Applies to both referenceable and non-referenceable nodes.</p>]]></long-description>
          <tag line="496" name="return" description="the identifier of this node" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="496" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="496" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="526" package="phpcr\interfaces">
        <name>getIndex</name>
        <full_name>getIndex</full_name>
        <docblock line="509">
          <description><![CDATA[This method returns the index of this node within the ordered set of its
same-name sibling nodes.]]></description>
          <long-description><![CDATA[<p>This index is the one used to address same-name siblings using the
square-bracket notation, e.g., /a[3]/b[4]. Note that the index always
starts at 1 (not 0), for compatibility with XPath. As a result, for
nodes that do not have same-name-siblings, this method will always
return 1.</p>]]></long-description>
          <tag line="509" name="return" description="The index of this node within the ordered set of its&#10;     same-name sibling nodes." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="509" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="509" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="561" package="phpcr\interfaces">
        <name>getReferences</name>
        <full_name>getReferences</full_name>
        <docblock line="528">
          <description><![CDATA[This method returns all REFERENCE properties that refer to this node,
have the specified name and that are accessible through the current
Session.]]></description>
          <long-description><![CDATA[<p>If the name parameter is null then all referring REFERENCES are returned
regardless of name.</p>

<p>Some implementations may only return properties that have been
persisted. Some may return both properties that have been persisted and
those that have been dispatched but not persisted (for example, those
saved within a transaction but not yet committed) while others
implementations may return these two categories of property as well as
properties that are still pending and not yet dispatched.</p>

<p>In implementations that support versioning, this method does not return
properties that are part of the frozen state of a version in version
storage.</p>

<p>If this node has no referring properties with the specified name, an
empty iterator is returned.</p>]]></long-description>
          <tag line="528" name="param" description="Name of referring REFERENCE properties to be returned; if null then all referring REFERENCEs are returned." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="528" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Keys are the property names, values the&#10;     corresponding PropertyInterface instances." type="\Iterator">
            <type by_reference="false">\Iterator</type>
          </tag>
          <tag line="528" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="528" name="api" description=""/>
        </docblock>
        <argument line="561">
          <name>$name</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="596" package="phpcr\interfaces">
        <name>getWeakReferences</name>
        <full_name>getWeakReferences</full_name>
        <docblock line="563">
          <description><![CDATA[This method returns all WEAKREFERENCE properties that refer to this
node, have the specified name and that are accessible through the
current Session.]]></description>
          <long-description><![CDATA[<p>If the name parameter is null then all referring WEAKREFERENCE are
returned regardless of name.</p>

<p>Some level 2 implementations may only return properties that have been
saved (in a transactional setting this includes both those properties
that have been saved but not yet committed, as well as properties that
have been committed). Other level 2 implementations may additionally
return properties that have been added within the current Session but
are not yet saved.</p>

<p>In implementations that support versioning, this method does not return
properties that are part of the frozen state of a version in version
storage.</p>

<p>If this node has no referring properties with the specified name, an
empty iterator is returned.</p>]]></long-description>
          <tag line="563" name="param" description="name of referring WEAKREFERENCE properties to be returned; if null then all referring WEAKREFERENCEs are returned" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="563" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Keys are the property names, values the&#10;     corresponding PropertyInterface instances." type="\Iterator">
            <type by_reference="false">\Iterator</type>
          </tag>
          <tag line="563" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="563" name="api" description=""/>
        </docblock>
        <argument line="596">
          <name>$name</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="613" package="phpcr\interfaces">
        <name>hasNode</name>
        <full_name>hasNode</full_name>
        <docblock line="598">
          <description><![CDATA[Indicates whether a node exists at relPath]]></description>
          <long-description><![CDATA[<p>Returns true if a node accessible through the current Session exists at
relPath and false otherwise.</p>]]></long-description>
          <tag line="598" name="param" description="The path of a (possible) node." type="string" variable="$relPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="598" name="return" description="true if a node exists at relPath; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="598" name="throws" description="if $relPath is an absolute path" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="598" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="598" name="api" description=""/>
        </docblock>
        <argument line="613">
          <name>$relPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="630" package="phpcr\interfaces">
        <name>hasProperty</name>
        <full_name>hasProperty</full_name>
        <docblock line="615">
          <description><![CDATA[Indicates whether a property exists at relPath.]]></description>
          <long-description><![CDATA[<p>Returns true if a property accessible through the current Session exists
at relPath and false otherwise.</p>]]></long-description>
          <tag line="615" name="param" description="The path of a (possible) property." type="string" variable="$relPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="615" name="return" description="true if a property exists at relPath; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="615" name="throws" description="if $relPath is an absolute path" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="615" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="615" name="api" description=""/>
        </docblock>
        <argument line="630">
          <name>$relPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="645" package="phpcr\interfaces">
        <name>hasNodes</name>
        <full_name>hasNodes</full_name>
        <docblock line="632">
          <description><![CDATA[Indicates whether this node has any child nodes.]]></description>
          <long-description><![CDATA[<p>Returns true if this node has one or more child nodes accessible through
the current Session; false otherwise.</p>]]></long-description>
          <tag line="632" name="return" description="true if this node has one or more child nodes; false&#10;     otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="632" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="632" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="660" package="phpcr\interfaces">
        <name>hasProperties</name>
        <full_name>hasProperties</full_name>
        <docblock line="647">
          <description><![CDATA[Indicates whether this node has properties.]]></description>
          <long-description><![CDATA[<p>Returns true if this node has one or more properties accessible through
the current Session; false otherwise.</p>]]></long-description>
          <tag line="647" name="return" description="true if this node has one or more properties; false&#10;     otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="647" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="647" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="674" package="phpcr\interfaces">
        <name>getPrimaryNodeType</name>
        <full_name>getPrimaryNodeType</full_name>
        <docblock line="662">
          <description><![CDATA[Returns the primary node type in effect for this node.]]></description>
          <long-description><![CDATA[<p>Which NodeType is returned when this method is called on the root node
of a workspace is up to the implementation.</p>]]></long-description>
          <tag line="662" name="return" description="a NodeType object." type="\PHPCR\NodeType\NodeTypeInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeInterface</type>
          </tag>
          <tag line="662" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="662" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="691" package="phpcr\interfaces">
        <name>getMixinNodeTypes</name>
        <full_name>getMixinNodeTypes</full_name>
        <docblock line="676">
          <description><![CDATA[Returns an array of NodeType objects representing the mixin node types
in effect for this node.]]></description>
          <long-description><![CDATA[<p>This includes only those mixin types explicitly assigned to this node.
It does not include mixin types inherited through the addition of
supertypes to the primary type hierarchy or through the addition of
supertypes to the type hierarchy of any of the declared mixin types.</p>]]></long-description>
          <tag line="676" name="return" description="of \PHPCR\NodeType\NodeTypeInterface objects." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="676" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="676" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="709" package="phpcr\interfaces">
        <name>isNodeType</name>
        <full_name>isNodeType</full_name>
        <docblock line="693">
          <description><![CDATA[Returns true if this node is of the specified primary node type or mixin
type, or a subtype thereof.]]></description>
          <long-description><![CDATA[<p>Returns false otherwise. This method respects the effective node type of
the node.</p>]]></long-description>
          <tag line="693" name="param" description="the name of a node type." type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="693" name="return" description="true if this node is of the specified primary node type&#10;           or mixin type, or a subtype thereof. Returns false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="693" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="693" name="api" description=""/>
        </docblock>
        <argument line="709">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="741" package="phpcr\interfaces">
        <name>setPrimaryType</name>
        <full_name>setPrimaryType</full_name>
        <docblock line="711">
          <description><![CDATA[Changes the primary node type of this node to nodeTypeName.]]></description>
          <long-description><![CDATA[<p>Also immediately changes this node's jcr:primaryType property
appropriately. Semantically, the new node type may take effect
immediately or on dispatch but must take effect on persist. Whichever
behavior is adopted it must be the same as the behavior adopted for
addMixin() (see below) and the behavior that occurs when a node is first
created.</p>]]></long-description>
          <tag line="711" name="param" description="the name of the new node type." type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="711" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="711" name="throws" description="if the specified primary&#10;     node type creates a type conflict and this implementation performs&#10;     this validation immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="711" name="throws" description="if the specified&#10;     nodeTypeName is not recognized and this implementation performs&#10;     this validation immediately." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="711" name="throws" description="if this node is read-only due to&#10;     a checked-in node and this implementation performs this validation&#10;     immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="711" name="throws" description="if a lock prevents the change of the&#10;     primary node type and this implementation performs this validation&#10;     immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="711" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="711" name="api" description=""/>
        </docblock>
        <argument line="741">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="786" package="phpcr\interfaces">
        <name>addMixin</name>
        <full_name>addMixin</full_name>
        <docblock line="743">
          <description><![CDATA[Adds the mixin node type named $mixinName to this node.]]></description>
          <long-description><![CDATA[<p>If this node is already of type $mixinName (either due to a previously
added mixin or due to its primary type, through inheritance) then this
method has no effect. Otherwise $mixinName is added to this node's
jcr:mixinTypes property.</p>

<p>Semantically, the new node type may take effect immediately, on dispatch
or on persist. The behavior is adopted must be the same as the behavior
adopted for NodeInterface::setPrimaryType() and the behavior that
occurs when a node is first created.</p>

<p>A ConstraintViolationException is thrown either immediately or on save
if a conflict with another assigned mixin or the primary node type or
for an implementation-specific reason. Implementations may differ on
when this validation is done.</p>

<p>In some implementations it may only be possible to add mixin types
before a a node is persisted for the first time. In such cases any
later calls to $addMixin will throw a ConstraintViolationException
either immediately, on dispatch or on persist.</p>]]></long-description>
          <tag line="743" name="param" description="the name of the mixin node type to be added" type="string" variable="$mixinName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="743" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="743" name="throws" description="if the specified&#10;     mixinName is not recognized and this implementation performs this&#10;     validation immediately instead of waiting until save." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="743" name="throws" description="if the specified mixin node&#10;     type is prevented from being assigned." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="743" name="throws" description="if this node is versionable and&#10;     checked-in or is non-versionable but its nearest versionable&#10;     ancestor is checked-in and this implementation performs this&#10;     validation immediately instead of waiting until save." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="743" name="throws" description="if a lock prevents the addition of the&#10;     mixin and this implementation performs this validation immediately&#10;     instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="743" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="743" name="api" description=""/>
        </docblock>
        <argument line="786">
          <name>$mixinName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="814" package="phpcr\interfaces">
        <name>removeMixin</name>
        <full_name>removeMixin</full_name>
        <docblock line="788">
          <description><![CDATA[Removes the specified mixin node type from this node and removes
mixinName from this node's jcr:mixinTypes property.]]></description>
          <long-description><![CDATA[<p>Both the semantic change in effective node type and the persistence of
the change to the jcr:mixinTypes  property occur on persist.</p>]]></long-description>
          <tag line="788" name="param" description="the name of the mixin node type to be removed." type="string" variable="$mixinName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="788" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="788" name="throws" description="if the specified&#10;     mixinName is not currently assigned to this node and this&#10;     implementation performs this validation immediately." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="788" name="throws" description="if the specified mixin node&#10;     type is prevented from being removed and this implementation&#10;     performs this validation immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="788" name="throws" description="if this node is read-only due to&#10;     a checked-in node and this implementation performs this validation&#10;     immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="788" name="throws" description="if a lock prevents the removal of the&#10;     mixin and this implementation performs this validation immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="788" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="788" name="api" description=""/>
        </docblock>
        <argument line="814">
          <name>$mixinName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="845" package="phpcr\interfaces">
        <name>canAddMixin</name>
        <full_name>canAddMixin</full_name>
        <docblock line="816">
          <description><![CDATA[Determine if a mixin node type may be added to the current node.]]></description>
          <long-description><![CDATA[<p>Returns true if the specified mixin node type called $mixinName can be
added to this node. Returns false otherwise. A result of false must be
returned in each of the following cases:</p>

<ul>
<li>The mixin's definition conflicts with an existing primary or mixin
node type of this node.</li>
<li>This node is versionable and checked-in or is non-versionable and
its nearest versionable ancestor is checked-in.</li>
<li>This node is protected (as defined in this node's NodeDefinition,
found in the node type of this node's parent).</li>
<li>An access control restriction would prevent the addition of the mixin.</li>
<li>A lock would prevent the addition of the mixin.</li>
<li>An implementation-specific restriction would prevent the addition of
the mixin.</li>
</ul>]]></long-description>
          <tag line="816" name="param" description="The name of the mixin to be tested." type="string" variable="$mixinName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="816" name="return" description="true if the specified mixin node type, mixinName, can be&#10;     added to this node; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="816" name="throws" description="if the specified mixin&#10;     node type name is not recognized." type="\PHPCR\NodeType\NoSuchNodeTypeException">
            <type by_reference="false">\PHPCR\NodeType\NoSuchNodeTypeException</type>
          </tag>
          <tag line="816" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="816" name="api" description=""/>
        </docblock>
        <argument line="845">
          <name>$mixinName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="866" package="phpcr\interfaces">
        <name>getDefinition</name>
        <full_name>getDefinition</full_name>
        <docblock line="847">
          <description><![CDATA[Returns the node definition that applies to this node.]]></description>
          <long-description><![CDATA[<p>In some cases there may appear to be more than one definition that could
apply to this node.
However, it is assumed that upon creation of this node, a single particular
definition was used and it is that definition that this method returns.
How this governing definition is selected upon node creation from among
others which may have been applicable is an implementation issue and is
not covered by this specification. The NodeDefinition returned when this
method is called on the root node of a workspace is also up to the
implementation.</p>]]></long-description>
          <tag line="847" name="return" description="a NodeDefinition object." type="\PHPCR\NodeType\NodeDefinitionInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeDefinitionInterface</type>
          </tag>
          <tag line="847" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="847" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="898" package="phpcr\interfaces">
        <name>update</name>
        <full_name>update</full_name>
        <docblock line="868">
          <description><![CDATA[Updates a node corresponding to the current one in the given workspace.]]></description>
          <long-description><![CDATA[<p>If this node does have a corresponding node in the workspace
srcWorkspace, then this replaces this node and its subgraph with a clone
of the corresponding node and its subgraph.
If this node does not have a corresponding node in the workspace
srcWorkspace, then the update method has no effect.</p>

<p>If the update succeeds the changes made are persisted immediately, there
is no need to call save.</p>

<p>Note that update does not respect the checked-in status of nodes. An
update may change a node even if it is currently checked-in (This fact
is only relevant in an implementation that supports versioning).</p>]]></long-description>
          <tag line="868" name="param" description="the name of the source workspace." type="string" variable="$srcWorkspace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="868" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="868" name="throws" description="if srcWorkspace does not exist." type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="868" name="throws" description="if this Session (not&#10;     necessarily this Node) has pending unsaved changes." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="868" name="throws" description="if the current session does not&#10;     have sufficient access to perform the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="868" name="throws" description="if a lock prevents the update." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="868" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="868" name="api" description=""/>
        </docblock>
        <argument line="898">
          <name>$srcWorkspace</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="916" package="phpcr\interfaces">
        <name>getCorrespondingNodePath</name>
        <full_name>getCorrespondingNodePath</full_name>
        <docblock line="900">
          <description><![CDATA[Returns the absolute path of the node in the specified workspace that
corresponds to this node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="900" name="param" description="the name of the workspace." type="string" variable="$workspaceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="900" name="return" description="the absolute path to the corresponding node." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="900" name="throws" description="if no corresponding node is found." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="900" name="throws" description="if the workspace is unknown." type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="900" name="throws" description="if the current session has&#10;     insufficient access capabilities to perform this operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="900" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="900" name="api" description=""/>
        </docblock>
        <argument line="916">
          <name>$workspaceName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="933" package="phpcr\interfaces">
        <name>getSharedSet</name>
        <full_name>getSharedSet</full_name>
        <docblock line="918">
          <description><![CDATA[Returns an iterator over all nodes that are in the shared set of this
node.]]></description>
          <long-description><![CDATA[<p>If this node is not shared then the returned iterator contains only this
node.</p>]]></long-description>
          <tag line="918" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and&#10;     &lt;b&gt;Countable&lt;/b&gt;. Keys are the Node names, values the corresponding&#10;     NodeInterface instances." type="\Iterator">
            <type by_reference="false">\Iterator</type>
          </tag>
          <tag line="918" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="918" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="963" package="phpcr\interfaces">
        <name>removeSharedSet</name>
        <full_name>removeSharedSet</full_name>
        <docblock line="935">
          <description><![CDATA[Removes this node and every other node in the shared set of this node.]]></description>
          <long-description><![CDATA[<p>This removal must be done atomically, i.e., if one of the nodes cannot
be removed, the method throws the exception NodeInterface::remove()
would have thrown in that case, and none of the nodes are removed.</p>

<p>If this node is not shared this method removes only this node.</p>]]></long-description>
          <tag line="935" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="935" name="throws" description="if the parent node of this item&#10;     is versionable and checked-in or is non-versionable but its nearest&#10;     versionable ancestor is checked-in and this implementation performs&#10;     this validation immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="935" name="throws" description="if a lock prevents the removal of this&#10;     item and this implementation performs this validation immediately." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="935" name="throws" description="if removing the&#10;     specified item would violate a node type or implementation-specific&#10;     constraint and this implementation performs this validation immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="935" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="935" name="see" description="\PHPCR\removeShare()" refers="\PHPCR\removeShare()"/>
          <tag line="935" name="see" description="\PHPCR\Item::remove()" refers="\PHPCR\Item::remove()"/>
          <tag line="935" name="see" description="\PHPCR\SessionInterface::removeItem()" refers="\PHPCR\SessionInterface::removeItem()"/>
          <tag line="935" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="992" package="phpcr\interfaces">
        <name>removeShare</name>
        <full_name>removeShare</full_name>
        <docblock line="965">
          <description><![CDATA[Removes this node, but does not remove any other node in the shared set
of this node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="965" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="965" name="throws" description="if the parent node of this item&#10;     is versionable and checked-in or is non-versionable but its nearest&#10;     versionable ancestor is checked-in and this implementation performs&#10;     this validation immediately instead of waiting until save." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="965" name="throws" description="if a lock prevents the removal of this&#10;     item and this implementation performs this validation immediately&#10;     instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="965" name="throws" description="if removing the&#10;     specified item would violate a node type or implementation-specific&#10;     constraint and this implementation performs this validation&#10;     immediately instead of waiting until save." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="965" name="throws" description="if this node cannot be removed&#10;     without removing another node in the shared set of this node or&#10;     another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="965" name="see" description="\PHPCR\removeSharedSet()" refers="\PHPCR\removeSharedSet()"/>
          <tag line="965" name="see" description="\PHPCR\Item::remove()" refers="\PHPCR\Item::remove()"/>
          <tag line="965" name="see" description="\PHPCR\SessionInterface::removeItem" refers="\PHPCR\SessionInterface::removeItem"/>
          <tag line="965" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1010" package="phpcr\interfaces">
        <name>isCheckedOut</name>
        <full_name>isCheckedOut</full_name>
        <docblock line="994">
          <description><![CDATA[Determine if the current node is currently checked out.]]></description>
          <long-description><![CDATA[<p>Returns false if this node is currently in the checked-in state (either
due to its own status as a versionable node or due to the effect of
a versionable node being checked in above it). Otherwise this method
returns true. This includes the case where the repository does not
support versioning (and therefore all nodes are always "checked-out",
by default).</p>]]></long-description>
          <tag line="994" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="994" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="994" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1026" package="phpcr\interfaces">
        <name>isLocked</name>
        <full_name>isLocked</full_name>
        <docblock line="1012">
          <description><![CDATA[Determine if the current node has been locked.]]></description>
          <long-description><![CDATA[<p>Returns true if this node is locked either as a result of a lock held
by this node or by a deep lock on a node above this node;
otherwise returns false. This includes the case where a repository does
not support locking (in which case all nodes are "unlocked" by default).</p>]]></long-description>
          <tag line="1012" name="return" description="" type="\PHPCR\boolean.">
            <type by_reference="false">\PHPCR\boolean.</type>
          </tag>
          <tag line="1012" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1012" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1052" package="phpcr\interfaces">
        <name>followLifecycleTransition</name>
        <full_name>followLifecycleTransition</full_name>
        <docblock line="1028">
          <description><![CDATA[Causes the lifecycle state of this node to undergo the specified
transition.]]></description>
          <long-description><![CDATA[<p>This method may change the value of the jcr:currentLifecycleState
property, in most cases it is expected that the implementation will
change the value to that of the passed transition parameter, though this
is an implementation-specific issue. If the jcr:currentLifecycleState
property is changed the change is persisted immediately, there is no
need to call save.</p>]]></long-description>
          <tag line="1028" name="param" description="a state transition" type="string" variable="$transition">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1028" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="1028" name="throws" description="if this&#10;     implementation does not support lifecycle actions or if this node&#10;     does not have the mix:lifecycle mixin." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="1028" name="throws" description="if the lifecycle&#10;     transition is not successful." type="\PHPCR\InvalidLifecycleTransitionException">
            <type by_reference="false">\PHPCR\InvalidLifecycleTransitionException</type>
          </tag>
          <tag line="1028" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1028" name="api" description=""/>
        </docblock>
        <argument line="1052">
          <name>$transition</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="1066" package="phpcr\interfaces">
        <name>getAllowedLifecycleTransitions</name>
        <full_name>getAllowedLifecycleTransitions</full_name>
        <docblock line="1054">
          <description><![CDATA[Returns the list of valid state transitions for this node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1054" name="return" description="a string array." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1054" name="throws" description="if this&#10;     implementation does not support lifecycle actions or if this node&#10;     does not have the mix:lifecycle mixin." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="1054" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="1054" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/ItemVisitorInterface.php" hash="7c9b56ee5bd820275623f6869e9bc5b9" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="43" package="phpcr\interfaces">
      <name>ItemVisitorInterface</name>
      <full_name>\PHPCR\ItemVisitorInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Interface to define a visitor on an item.]]></description>
        <long-description><![CDATA[<p>This interface defines two signatures of the visit method; one taking a
Node, the other a Property. When an object implementing this interface is
passed to Item->accept(ItemVisitor) the appropriate visit method is
automatically called, depending on whether the Item in question is a Node
or a Property. Different implementations of this interface can be written
for different purposes. It is, for example, possible for the visit(Node)
method to call accept on the children of the passed node and thus recurse
through the tree performing some operation on each Item.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="61" package="phpcr\interfaces">
        <name>visit</name>
        <full_name>visit</full_name>
        <docblock line="45">
          <description><![CDATA[This method is called when the ItemVisitor is passed to the accept
method of a Node or Property.]]></description>
          <long-description><![CDATA[<p>If this method throws an exception the visiting process is aborted.</p>

<p>PHPCR Note: you need to distinguish between Node and Property objects
being visited in your implementation.</p>]]></long-description>
          <tag line="45" name="param" description="a node or property accepting this visitor" type="\PHPCR\ItemInterface" variable="$item">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="45" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="45" name="api" description=""/>
        </docblock>
        <argument line="61">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/ItemInterface.php" hash="841c2e9b08a1bd13bfa58389848402fb" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="34" package="phpcr\interfaces">
      <name>ItemInterface</name>
      <full_name>\PHPCR\ItemInterface</full_name>
      <docblock line="27">
        <description><![CDATA[The Item is the base interface of Node and Property.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="43" package="phpcr\interfaces">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="36">
          <description><![CDATA[Returns the normalized absolute path to this item.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="return" description="the normalized absolute path of this Item." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="57" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="45">
          <description><![CDATA[Returns the name of this Item in qualified form.]]></description>
          <long-description><![CDATA[<p>If this Item is the root node of the workspace, an empty string is returned.</p>]]></long-description>
          <tag line="45" name="return" description="the name of this Item in qualified form or an empty&#10;     string if this Item is the root node of a workspace." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="45" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="91" package="phpcr\interfaces">
        <name>getAncestor</name>
        <full_name>getAncestor</full_name>
        <docblock line="59">
          <description><![CDATA[Returns the ancestor of this Item at the specified depth.]]></description>
          <long-description><![CDATA[<p>An ancestor of depth x is the Item that is x levels down along the path
from the root node to this Item.</p>

<ul>
<li>depth = 0 returns the root node of a workspace.</li>
<li>depth = 1 returns the child of the root node along the path to this
 Item.</li>
<li>depth = 2 returns the grandchild of the root node along the path to
 this Item.</li>
<li>And so on to depth = n, where n is the depth of this Item, which
 returns this Item itself.</li>
</ul>

<p>If this node has more than one path (i.e., if it is a descendant of a
shared node) then the path used to define the ancestor is implementaion-
dependent.</p>]]></long-description>
          <tag line="59" name="param" description="An integer, 0 &lt;= depth &lt;= n where n is the depth of this Item." type="integer" variable="$depth">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="59" name="return" description="The ancestor of this Item at the specified&#10;     depth." type="\PHPCR\ItemInterface">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="59" name="throws" description="if depth &lt; 0 or depth &gt; n&#10;     where n is the depth of this item." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="59" name="throws" description="if the current session does not&#10;     have sufficient access to retrieve the specified node." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="59" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="59" name="api" description=""/>
        </docblock>
        <argument line="91">
          <name>$depth</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="106" package="phpcr\interfaces">
        <name>getParent</name>
        <full_name>getParent</full_name>
        <docblock line="93">
          <description><![CDATA[Returns the parent of this Item.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="return" description="The parent of this Item." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="93" name="throws" description="if this Item is the root node of a&#10;     workspace." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="93" name="throws" description="if the current session does not&#10;     have sufficent access to retrieve the parent of this item." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="93" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="93" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="122" package="phpcr\interfaces">
        <name>getDepth</name>
        <full_name>getDepth</full_name>
        <docblock line="108">
          <description><![CDATA[Returns the depth of this Item in the workspace item graph.]]></description>
          <long-description><![CDATA[<ul>
<li>The root node returns 0.</li>
<li>A property or child node of the root node returns 1.</li>
<li>A property or child node of a child node of the root returns 2.</li>
<li>And so on to this Item.</li>
</ul>]]></long-description>
          <tag line="108" name="return" description="The depth of this Item in the workspace item graph." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="108" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="108" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="133" package="phpcr\interfaces">
        <name>getSession</name>
        <full_name>getSession</full_name>
        <docblock line="124">
          <description><![CDATA[Returns the Session through which this Item was acquired.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="return" description="the Session through which this Item was&#10;     acquired." type="\PHPCR\SessionInterface">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
          <tag line="124" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="124" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="145" package="phpcr\interfaces">
        <name>isNode</name>
        <full_name>isNode</full_name>
        <docblock line="135">
          <description><![CDATA[Indicates whether this Item is a Node or a Property.]]></description>
          <long-description><![CDATA[<p>Returns true if this Item is a Node; Returns false if this Item is a
Property.</p>]]></long-description>
          <tag line="135" name="return" description="true if this Item is a Node, false if it is a Property." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="135" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="166" package="phpcr\interfaces">
        <name>isNew</name>
        <full_name>isNew</full_name>
        <docblock line="147">
          <description><![CDATA[Determines if the current item is a new one.]]></description>
          <long-description><![CDATA[<p>Returns true if this is a new item, meaning that it exists only in
transient storage on the Session and has not yet been saved. Within a
transaction, isNew on an Item may return false (because the item has
been saved) even if that Item is not in persistent storage (because the
transaction has not yet been committed).</p>

<p>Note that if an item returns true on isNew, then by definition is parent
will return true on isModified.</p>

<p>Note that in read-only implementations, this method will always return
false.</p>]]></long-description>
          <tag line="147" name="return" description="true if this item is new; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="147" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="186" package="phpcr\interfaces">
        <name>isModified</name>
        <full_name>isModified</full_name>
        <docblock line="168">
          <description><![CDATA[Indicates if the current item has been modified.]]></description>
          <long-description><![CDATA[<p>Returns true if this Item has been saved but has subsequently been
modified through the current session and therefore the state of this
item as recorded in the session differs from the state of this item as
saved. Within a transaction, isModified on an Item may return false
(because the Item has been saved since the modification) even if the
modification in question is not in persistent storage (because the
transaction has not yet been committed).</p>

<p>Note that in read-only implementations, this method will always return
false.</p>]]></long-description>
          <tag line="168" name="return" description="true if this item is modified; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="168" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="223" package="phpcr\interfaces">
        <name>isSame</name>
        <full_name>isSame</full_name>
        <docblock line="188">
          <description><![CDATA[Determines if this Item object represents the same actual workspace item
as the object otherItem.]]></description>
          <long-description><![CDATA[<p>Two Item objects represent the same workspace item if all the following
are true:</p>

<ul>
<li>Both objects were acquired through Session objects that were created
by the same Repository object.</li>
<li>Both objects were acquired through Session objects bound to the same
repository workspace.</li>
<li>The objects are either both Node objects or both Property
objects.</li>
<li>If they are Node objects, they have the same identifier.</li>
<li>If they are Property objects they have identical names and
isSame() is true of their parent nodes.</li>
</ul>

<p>This method does not compare the states of the two items. For example, if
two Item objects representing the same actual workspace item have been
retrieved through two different sessions and one has been modified, then
this method will still return true when comparing these two objects.
Note that if two Item objects representing the same workspace item are
retrieved through the same session they will always reflect the same
state.</p>]]></long-description>
          <tag line="188" name="param" description="the Item object to be tested for identity with this Item." type="\PHPCR\ItemInterface" variable="$otherItem">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="188" name="return" description="true if this Item object and otherItem represent the&#10;     same actual repository item; false otherwise." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="188" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="188" name="api" description=""/>
        </docblock>
        <argument line="223">
          <name>$otherItem</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="239" package="phpcr\interfaces">
        <name>accept</name>
        <full_name>accept</full_name>
        <docblock line="225">
          <description><![CDATA[Call the ItemVisitor::visit() method.]]></description>
          <long-description><![CDATA[<p>This is less relevant in PHP (Java had it to avoid typecasting in the
visitor). We leave it here, to allow sanity checks or other operations
an implementation might wants to do.</p>]]></long-description>
          <tag line="225" name="param" description="The ItemVisitor to be accepted." type="\PHPCR\ItemVisitorInterface" variable="$visitor">
            <type by_reference="false">\PHPCR\ItemVisitorInterface</type>
          </tag>
          <tag line="225" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="225" name="api" description=""/>
        </docblock>
        <argument line="239">
          <name>$visitor</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemVisitorInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="269" package="phpcr\interfaces">
        <name>refresh</name>
        <full_name>refresh</full_name>
        <docblock line="241">
          <description><![CDATA[Updates the state of the current item.]]></description>
          <long-description><![CDATA[<p>If keepChanges is false, this method discards all pending changes
currently recorded in this Session that apply to this Item or any
of its descendants (that is, the subgraph rooted at this Item) and
returns all items to reflect the current saved state. Outside a
transaction this state is simple the current state of persistent
storage. Within a transaction, this state will reflect persistent
storage as modified by changes that have been saved but not yet
committed.</p>

<p>If keepChanges is true then pending change are not discarded but
items that do not have changes pending have their state refreshed
to reflect the current saved state, thus revealing changes made by
other sessions.</p>]]></long-description>
          <tag line="241" name="param" description="a boolean" type="boolean" variable="$keepChanges">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="241" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="241" name="throws" description="if this Item object represents&#10;     a workspace item that has been removed (either by this session or&#10;     another)." type="\PHPCR\InvalidItemStateException">
            <type by_reference="false">\PHPCR\InvalidItemStateException</type>
          </tag>
          <tag line="241" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="241" name="api" description=""/>
        </docblock>
        <argument line="269">
          <name>$keepChanges</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="308" package="phpcr\interfaces">
        <name>remove</name>
        <full_name>remove</full_name>
        <docblock line="271">
          <description><![CDATA[Removes this item (and its subgraph).]]></description>
          <long-description><![CDATA[<p>To persist a removal, a save must be performed that includes the (former)
parent of the removed item within its scope.</p>

<p>If a node with same-name siblings is removed, this decrements by one the
indices of all the siblings with indices greater than that of the removed
node. In other words, a removal compacts the array of same-name siblings
and causes the minimal re-numbering required to maintain the original
order but leave no gaps in the numbering.</p>]]></long-description>
          <tag line="271" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="271" name="throws" description="if the parent node of this item&#10;     is versionable and checked-in or is non-versionable but its nearest&#10;     versionable ancestor is checked-in and this implementation performs&#10;     this validation immediately instead of waiting until save." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="271" name="throws" description="if a lock prevents the removal of this&#10;     item and this implementation performs this validation immediately&#10;     instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="271" name="throws" description="if removing the&#10;     specified item would violate a node type or implementation-specific&#10;     constraint and this implementation performs this validation&#10;     immediately instead of waiting until save." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="271" name="throws" description="if this item or an item in its&#10;     subgraph is currently the target of a REFERENCE property located in&#10;     this workspace but outside this item's subgraph and the current&#10;     Session does not have read access to that REFERENCE property or if&#10;     the current Session does not have sufficent privileges to remove&#10;     the item." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="271" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="271" name="see" description="\PHPCR\SessionInterface::removeItem(String)" refers="\PHPCR\SessionInterface::removeItem(String)"/>
          <tag line="271" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/AccessDeniedException.php" hash="680d4e5f5557875711d4634295f70cec" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <namespace-alias name="AccessControlException">PHPCR\Security\AccessControlException</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR" line="36" package="phpcr\exceptions">
      <extends>\PHPCR\Security\AccessControlException</extends>
      <name>AccessDeniedException</name>
      <full_name>\PHPCR\AccessDeniedException</full_name>
      <docblock line="29">
        <description><![CDATA[Exception to be thrown by access-related methods.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="package" description="phpcr"/>
        <tag line="29" name="subpackage" description="exceptions"/>
        <tag line="29" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Query/QueryInterface.php" hash="584b14764adbaa9bbafc7c7dbc9cf2e6" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query" line="36" package="phpcr\interfaces">
      <name>QueryInterface</name>
      <full_name>\PHPCR\Query\QueryInterface</full_name>
      <docblock line="27">
        <description><![CDATA[A Query object.]]></description>
        <long-description><![CDATA[<p><b>PHPCR Note:</b> Instead of the dropped ValueInterface, bindValue uses native php variables</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR\Query" line="46" package="phpcr\interfaces">
        <name>JCR_JQOM</name>
        <full_name>JCR_JQOM</full_name>
        <value><![CDATA['JCR-JQOM']]></value>
        <docblock line="42">
          <description><![CDATA[A string constant representing the JCR-JQOM query language.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query" line="52" package="phpcr\interfaces">
        <name>JCR_SQL2</name>
        <full_name>JCR_SQL2</full_name>
        <value><![CDATA['JCR-SQL2']]></value>
        <docblock line="48">
          <description><![CDATA[A string constant representing the JCR-SQL2 query language.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query" line="58" package="phpcr\interfaces">
        <name>XPATH</name>
        <full_name>XPATH</full_name>
        <value><![CDATA['xpath']]></value>
        <docblock line="54">
          <description><![CDATA[A string constant representing the (deprecated in JSR-283) XPATH query language.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query" line="64" package="phpcr\interfaces">
        <name>SQL</name>
        <full_name>SQL</full_name>
        <value><![CDATA['sql']]></value>
        <docblock line="60">
          <description><![CDATA[A string constant representing the (deprecated in JSR-283) SQL query language.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="78" package="phpcr\interfaces">
        <name>bindValue</name>
        <full_name>bindValue</full_name>
        <docblock line="67">
          <description><![CDATA[Binds the given value to the variable named $varName.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="name of variable in query" type="string" variable="$varName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="67" name="param" description="value to bind" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="67" name="throws" description="if $varName is not a valid variable in this query." type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="67" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="67" name="api" description=""/>
        </docblock>
        <argument line="78">
          <name>$varName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="78">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="89" package="phpcr\interfaces">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="80">
          <description><![CDATA[Executes this query and returns a QueryResult object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="return" description="a QueryResult object" type="\PHPCR\Query\QueryResultInterface">
            <type by_reference="false">\PHPCR\Query\QueryResultInterface</type>
          </tag>
          <tag line="80" name="throws" description="if the query contains an unbound variable." type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="80" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="80" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="101" package="phpcr\interfaces">
        <name>getBindVariableNames</name>
        <full_name>getBindVariableNames</full_name>
        <docblock line="91">
          <description><![CDATA[Returns the names of the bind variables in this query.]]></description>
          <long-description><![CDATA[<p>If this query does not contains any bind variables then an empty array is returned.</p>]]></long-description>
          <tag line="91" name="return" description="the names of the bind variables in this query." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="91" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="91" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="110" package="phpcr\interfaces">
        <name>setLimit</name>
        <full_name>setLimit</full_name>
        <docblock line="103">
          <description><![CDATA[Sets the maximum size of the result set to limit.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="The amount of result items to be fetched." type="integer" variable="$limit">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="103" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="103" name="api" description=""/>
        </docblock>
        <argument line="110">
          <name>$limit</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="119" package="phpcr\interfaces">
        <name>setOffset</name>
        <full_name>setOffset</full_name>
        <docblock line="112">
          <description><![CDATA[Sets the start offset of the result set to offset.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="The start point of the result set from when the item shall be fetched." type="integer" variable="$offset">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="112" name="api" description=""/>
        </docblock>
        <argument line="119">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="136" package="phpcr\interfaces">
        <name>getStatement</name>
        <full_name>getStatement</full_name>
        <docblock line="121">
          <description><![CDATA[Returns the statement defined for this query.]]></description>
          <long-description><![CDATA[<p>If the language of this query is string-based (like JCR-SQL2), this method
will return the statement that was used to create this query.</p>

<p>If the language of this query is JCR-JQOM, this method will return the
JCR-SQL2 equivalent of the JCR-JQOM object tree.</p>

<p>This is the standard serialization of JCR-JQOM and is also the string stored
in the jcr:statement property if the query is persisted. See storeAsNode($absPath).</p>]]></long-description>
          <tag line="121" name="return" description="The query statement." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="121" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="147" package="phpcr\interfaces">
        <name>getLanguage</name>
        <full_name>getLanguage</full_name>
        <docblock line="138">
          <description><![CDATA[Returns the language set for this query.]]></description>
          <long-description><![CDATA[<p>This will be one of the query language constants returned by
QueryManagerInterface::getSupportedQueryLanguages().</p>]]></long-description>
          <tag line="138" name="return" description="The query language." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="138" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="163" package="phpcr\interfaces">
        <name>getStoredQueryPath</name>
        <full_name>getStoredQueryPath</full_name>
        <docblock line="149">
          <description><![CDATA[Fetches the path of the node representing this query.]]></description>
          <long-description><![CDATA[<p>If this is a Query object that has been stored using QueryInterface::storeAsNode()
(regardless of whether it has been saved yet) or retrieved using
QueryManagerInterface::getQuery()), then this method returns the path
of the nt:query node that stores the query.</p>]]></long-description>
          <tag line="149" name="return" description="Path of the node representing this query." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="149" name="throws" description="if this query is not a stored query." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="149" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="149" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="199" package="phpcr\interfaces">
        <name>storeAsNode</name>
        <full_name>storeAsNode</full_name>
        <docblock line="165">
          <description><![CDATA[Creates a node of type nt:query holding this query at $absPath and
returns that node.]]></description>
          <long-description><![CDATA[<p>This is  a session-write method and therefore requires a
SessionInterface::save() to dispatch the change.</p>

<p>The $absPath provided must not have an index on its final element. If
ordering is supported by the node type of the parent node then the new
node is appended to the end of the child node list.</p>]]></long-description>
          <tag line="165" name="param" description="absolute path the query should be stored at" type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="165" name="return" description="the newly created node." type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="165" name="throws" description="if an item at the specified path already exists,&#10;                                   same-name siblings are not allowed and this implementation performs&#10;                                   this validation immediately." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="165" name="throws" description="if the specified path implies intermediary Nodes that do not exist&#10;                                     or the last element of relPath has an index, and this implementation&#10;                                     performs this validation immediately." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="165" name="throws" description="if a node type or implementation-specific constraint&#10;                                                     is violated or if an attempt is made to add a node as&#10;                                                     the child of a property and this implementation&#10;                                                     performs this validation immediately." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="165" name="throws" description="if the node to which the new child is being added is read-only due to&#10;                                        a checked-in node and this implementation performs this validation&#10;                                        immediately." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="165" name="throws" description="if a lock prevents the addition of the node and this implementation performs&#10;                                  this validation immediately instead of waiting until save." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="165" name="throws" description="in a level 1 implementation." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="165" name="throws" description="if another error occurs or if the absPath provided has an index on its final&#10;                                   element." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="165" name="api" description=""/>
        </docblock>
        <argument line="199">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/JoinInterface.php" hash="a9caa57bff6fc9c35a55321dee13ff9e" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>JoinInterface</name>
      <full_name>\PHPCR\Query\QOM\JoinInterface</full_name>
      <extends>\PHPCR\Query\QOM\SourceInterface</extends>
      <docblock line="27">
        <description><![CDATA[Performs a join between two node-tuple sources.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="43" package="phpcr\interfaces">
        <name>getLeft</name>
        <full_name>getLeft</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the left node-tuple source.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="return" description="the left source; non-null" type="\PHPCR\Query\QOM\SourceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="52" package="phpcr\interfaces">
        <name>getRight</name>
        <full_name>getRight</full_name>
        <docblock line="45">
          <description><![CDATA[Gets the right node-tuple source.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="return" description="the right source; non-null" type="\PHPCR\Query\QOM\SourceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="45" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="61" package="phpcr\interfaces">
        <name>getJoinType</name>
        <full_name>getJoinType</full_name>
        <docblock line="54">
          <description><![CDATA[Gets the join type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="return" description="one of QueryObjectModelConstants.JCR_JOIN_TYPE_*" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="70" package="phpcr\interfaces">
        <name>getJoinCondition</name>
        <full_name>getJoinCondition</full_name>
        <docblock line="63">
          <description><![CDATA[Gets the join condition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="the join condition; non-null" type="\PHPCR\Query\QOM\JoinCondition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinCondition</type>
          </tag>
          <tag line="63" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/QueryObjectModelFactoryInterface.php" hash="86e49300b6d04054f50a5082089669d7" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="37" package="phpcr\interfaces">
      <name>QueryObjectModelFactoryInterface</name>
      <full_name>\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</full_name>
      <extends>\PHPCR\Query\QOM\QueryObjectModelConstantsInterface</extends>
      <docblock line="27">
        <description><![CDATA[A QueryObjectModelFactory creates instances of the JCR query object model.]]></description>
        <long-description><![CDATA[<p>Refer to QueryObjectModelInterface for a description of the query object
model.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="69" package="phpcr\interfaces">
        <name>createQuery</name>
        <full_name>createQuery</full_name>
        <docblock line="39">
          <description><![CDATA[Creates a query with one or more selectors.]]></description>
          <long-description><![CDATA[<p>If source is a selector, that selector is the default selector of the
query. Otherwise the query does not have a default selector.</p>

<p>If the query is invalid, this method throws an InvalidQueryException.
See the individual QOM factory methods for the validity criteria of each
query element.</p>]]></long-description>
          <tag line="39" name="param" description="the Selector or the node-tuple Source; non-null" type="\PHPCR\Query\QOM\SourceInterface" variable="$source">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="39" name="param" description="the constraint, or null if none" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="39" name="param" description="zero (empty array) or more instances of Ordering" type="array" variable="$orderings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="39" name="param" description="the array of Column definitions to return in the result. empty array is equivalent to the * in SQL2, meaning some fields." type="array" variable="$columns">
            <type by_reference="false">array</type>
          </tag>
          <tag line="39" name="return" description="the query; non-null" type="\PHPCR\Query\QOM\QueryObjectModelInterface">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelInterface</type>
          </tag>
          <tag line="39" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test and the parameters given fail that test. See the&#10;     individual QOM factory methods for the validity criteria of each&#10;     query element." type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="39" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="39" name="api" description=""/>
        </docblock>
        <argument line="69">
          <name>$source</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="70">
          <name>$constraint</name>
          <default><![CDATA[null]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
        <argument line="71">
          <name>$orderings</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
        <argument line="72">
          <name>$columns</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="100" package="phpcr\interfaces">
        <name>selector</name>
        <full_name>selector</full_name>
        <docblock line="74">
          <description><![CDATA[Selects a subset of the nodes in the repository based on node type.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $nodeTypeName or $selectorName is not a
syntactically valid JCR name.</p>

<p>The query is invalid if $selectorName is identical to the name of
another selector in the query.</p>

<p>If $nodeTypeName is a valid JCR name but not the name of a node type
available in the repository, the query is valid but the selector selects
no nodes.</p>]]></long-description>
          <tag line="74" name="param" description="the name of the required node type; non-null" type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="return" description="the selector; non-null" type="\PHPCR\Query\QOM\SelectorInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SelectorInterface</type>
          </tag>
          <tag line="74" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="74" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="74" name="api" description=""/>
        </docblock>
        <argument line="100">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="125" package="phpcr\interfaces">
        <name>join</name>
        <full_name>join</full_name>
        <docblock line="102">
          <description><![CDATA[Performs a join between two node-tuple sources.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $left is the same source as $right.</p>]]></long-description>
          <tag line="102" name="param" description="the left node-tuple source; non-null" type="\PHPCR\Query\QOM\SourceInterface" variable="$left">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="102" name="param" description="the right node-tuple source; non-null" type="\PHPCR\Query\QOM\SourceInterface" variable="$right">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="102" name="param" description="one of QueryObjectModelConstants.JCR_JOIN_TYPE_*" type="string" variable="$joinType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="102" name="param" description="the join condition; non-null" type="\PHPCR\Query\QOM\JoinConditionInterface" variable="$joinCondition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
          <tag line="102" name="return" description="the join; non-null" type="\PHPCR\Query\QOM\JoinInterface">
            <type by_reference="false">\PHPCR\Query\QOM\JoinInterface</type>
          </tag>
          <tag line="102" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="102" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="102" name="api" description=""/>
        </docblock>
        <argument line="125">
          <name>$left</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="125">
          <name>$right</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="126">
          <name>$joinType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="126">
          <name>$joinCondition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="164" package="phpcr\interfaces">
        <name>equiJoinCondition</name>
        <full_name>equiJoinCondition</full_name>
        <docblock line="128">
          <description><![CDATA[Tests whether the value of a property in a first selector is equal to
the value of a property in a second selector.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$selector1 is not the name of a selector in the query, or</li>
<li>$selector2 is not the name of a selector in the query, or</li>
<li>$selector1 is the same as $selector2, or</li>
<li>$property1 is not a syntactically valid JCR name, or</li>
<li>$property2 is not a syntactically valid JCR name, or</li>
<li>the value of $property1 is not the same property type as the value of
$property2, or</li>
<li>$property1 is a multi-valued property, or</li>
<li>$property2 is a multi-valued property, or</li>
<li>$property1 is a BINARY property, or</li>
<li>$property2 is a BINARY property.</li>
</ul>]]></long-description>
          <tag line="128" name="param" description="the name of the first selector; non-null" type="string" variable="$selector1Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="param" description="the property name in the first selector; non-null" type="string" variable="$property1Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="param" description="the name of the second selector; non-null" type="string" variable="$selector2Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="param" description="the property name in the second selector; non-null" type="string" variable="$property2Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="return" description="the constraint;&#10;     non-null" type="\PHPCR\Query\QOM\EquiJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\EquiJoinConditionInterface</type>
          </tag>
          <tag line="128" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="128" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="128" name="api" description=""/>
        </docblock>
        <argument line="164">
          <name>$selector1Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="164">
          <name>$property1Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="164">
          <name>$selector2Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="164">
          <name>$property2Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="197" package="phpcr\interfaces">
        <name>sameNodeJoinCondition</name>
        <full_name>sameNodeJoinCondition</full_name>
        <docblock line="166">
          <description><![CDATA[Tests whether a first selector's node is the same as a node identified
by relative path from a second selector's node.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$selector1 is not the name of a selector in the query, or</li>
<li>$selector2 is not the name of a selector in the query, or</li>
<li>$selector1 is the same as $selector2, or</li>
<li>$selector2Path is not a syntactically valid relative path.
<b>Note:</b>
however, that if the path is syntactically valid but does not identify
a node visible to the current session, the query is valid but the
constraint is not satisfied.</li>
</ul>]]></long-description>
          <tag line="166" name="param" description="the name of the first selector; non-null" type="string" variable="$selector1Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="param" description="the name of the second selector; non-null" type="string" variable="$selector2Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="param" description="the path relative to the second selector; non-null" type="string" variable="$selector2Path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="return" description="the constraint;&#10;     non-null" type="\PHPCR\Query\QOM\SameNodeJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SameNodeJoinConditionInterface</type>
          </tag>
          <tag line="166" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="166" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="166" name="api" description=""/>
        </docblock>
        <argument line="197">
          <name>$selector1Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="197">
          <name>$selector2Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="197">
          <name>$selector2Path</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="226" package="phpcr\interfaces">
        <name>childNodeJoinCondition</name>
        <full_name>childNodeJoinCondition</full_name>
        <docblock line="199">
          <description><![CDATA[Tests whether a first selector's node is a child of a second selector's
node.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$childSelector is not the name of a selector in the query</li>
<li>$parentSelector is not the name of a selector in the query</li>
<li>$childSelector is the same as $parentSelector</li>
</ul>]]></long-description>
          <tag line="199" name="param" description="the name of the child selector; non-null" type="string" variable="$childSelectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="199" name="param" description="the name of the parent selector; non-null" type="string" variable="$parentSelectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="199" name="return" description="the constraint;&#10;     non-null" type="\PHPCR\Query\QOM\ChildNodeJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ChildNodeJoinConditionInterface</type>
          </tag>
          <tag line="199" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="199" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="199" name="api" description=""/>
        </docblock>
        <argument line="226">
          <name>$childSelectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="226">
          <name>$parentSelectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="254" package="phpcr\interfaces">
        <name>descendantNodeJoinCondition</name>
        <full_name>descendantNodeJoinCondition</full_name>
        <docblock line="228">
          <description><![CDATA[Tests whether a first selector's node is a descendant of a second
selector's node.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$descendantSelector is not the name of a selector in the query</li>
<li>$ancestorSelector is not the name of a selector in the query</li>
<li>$descendantSelector is the same as $ancestorSelector</li>
</ul>]]></long-description>
          <tag line="228" name="param" description="the name of the descendant selector; non-null" type="string" variable="$descendantSelectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="param" description="the name of the ancestor selector; non-null" type="string" variable="$ancestorSelectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="return" description="the&#10;     constraint; non-null" type="\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface</type>
          </tag>
          <tag line="228" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="228" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="228" name="api" description=""/>
        </docblock>
        <argument line="254">
          <name>$descendantSelectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="254">
          <name>$ancestorSelectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="274" package="phpcr\interfaces">
        <name>andConstraint</name>
        <full_name>andConstraint</full_name>
        <docblock line="256">
          <description><![CDATA[Performs a logical conjunction of two other constraints.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="256" name="param" description="the first constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint1">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="256" name="param" description="the second constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint2">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="256" name="return" description="the And constraint; non-null" type="\PHPCR\Query\QOM\AndInterface">
            <type by_reference="false">\PHPCR\Query\QOM\AndInterface</type>
          </tag>
          <tag line="256" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="256" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="256" name="api" description=""/>
        </docblock>
        <argument line="274">
          <name>$constraint1</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
        <argument line="275">
          <name>$constraint2</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="296" package="phpcr\interfaces">
        <name>orConstraint</name>
        <full_name>orConstraint</full_name>
        <docblock line="277">
          <description><![CDATA[Performs a logical disjunction of two other constraints.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="277" name="param" description="the first constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint1">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="277" name="param" description="the second constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint2">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="277" name="return" description="the Or constraint; non-null" type="\PHPCR\Query\QOM\OrInterface">
            <type by_reference="false">\PHPCR\Query\QOM\OrInterface</type>
          </tag>
          <tag line="277" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="277" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="277" name="api" description=""/>
        </docblock>
        <argument line="296">
          <name>$constraint1</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
        <argument line="297">
          <name>$constraint2</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="315" package="phpcr\interfaces">
        <name>notConstraint</name>
        <full_name>notConstraint</full_name>
        <docblock line="299">
          <description><![CDATA[Performs a logical negation of another constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="299" name="param" description="the constraint to be negated; non-null" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="299" name="return" description="the Not constraint; non-null" type="\PHPCR\Query\QOM\NotInterface">
            <type by_reference="false">\PHPCR\Query\QOM\NotInterface</type>
          </tag>
          <tag line="299" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="299" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="299" name="api" description=""/>
        </docblock>
        <argument line="315">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="337" package="phpcr\interfaces">
        <name>comparison</name>
        <full_name>comparison</full_name>
        <docblock line="317">
          <description><![CDATA[Filters node-tuples based on the outcome of a binary operation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="317" name="param" description="the first operand; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$operand1">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="317" name="param" description="the operator; one of QueryObjectModelConstants.JCR_OPERATOR_*" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="317" name="param" description="the second operand; non-null" type="\PHPCR\Query\QOM\StaticOperandInterface" variable="$operand2">
            <type by_reference="false">\PHPCR\Query\QOM\StaticOperandInterface</type>
          </tag>
          <tag line="317" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\ComparisonInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ComparisonInterface</type>
          </tag>
          <tag line="317" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="317" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="317" name="api" description=""/>
        </docblock>
        <argument line="337">
          <name>$operand1</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
        <argument line="337">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="338">
          <name>$operand2</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\StaticOperandInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="362" package="phpcr\interfaces">
        <name>propertyExistence</name>
        <full_name>propertyExistence</full_name>
        <docblock line="340">
          <description><![CDATA[Tests the existence of a property in the specified or default selector.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$propertyName is not a syntactically valid JCR name</li>
<li>$selectorName is not the name of a selector in the query</li>
</ul>]]></long-description>
          <tag line="340" name="param" description="the property name; non-null" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="340" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="340" name="return" description="the constraint;&#10;     non-null" type="\PHPCR\Query\QOM\PropertyExistenceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyExistenceInterface</type>
          </tag>
          <tag line="340" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="340" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="340" name="api" description=""/>
        </docblock>
        <argument line="362">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="362">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="396" package="phpcr\interfaces">
        <name>fullTextSearch</name>
        <full_name>fullTextSearch</full_name>
        <docblock line="364">
          <description><![CDATA[Performs a full-text search against the specified or default selector.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$selectorName is not the name of a selector in the query</li>
<li>$propertyName is specified but is not a syntactically valid JCR name</li>
<li>$fullTextSearchExpression does not conform to the full text search
grammar</li>
</ul>

<p>If $propertyName is specified but, for a node-tuple, the selector node
does not have a property named $propertyName, the query is valid but the
constraint is not satisfied.</p>]]></long-description>
          <tag line="364" name="param" description="the property name, or null to search all full-text indexed properties of the node (or node subgraph, in some implementations);" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="364" name="param" description="the full-text search expression; non-null" type="string" variable="$fullTextSearchExpression">
            <type by_reference="false">string</type>
          </tag>
          <tag line="364" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="364" name="return" description="the constraint;&#10;     non-null" type="\PHPCR\Query\QOM\FullTextSearchInterface">
            <type by_reference="false">\PHPCR\Query\QOM\FullTextSearchInterface</type>
          </tag>
          <tag line="364" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="364" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="364" name="api" description=""/>
        </docblock>
        <argument line="396">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="396">
          <name>$fullTextSearchExpression</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="396">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="422" package="phpcr\interfaces">
        <name>sameNode</name>
        <full_name>sameNode</full_name>
        <docblock line="398">
          <description><![CDATA[Tests whether a node in the specified or default selector is reachable
by a specified absolute path.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$selectorName is not the name of a selector in the query</li>
<li>$path is not a syntactically valid absolute path.
<b>Note:</b>
however, that if the path is syntactically valid but does not identify a
node in the repository (or the node is not visible to this session,
because of access control constraints), the query is valid but the
constraint is not satisfied.</li>
</ul>]]></long-description>
          <tag line="398" name="param" description="an absolute path; non-null" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="398" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="398" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\SameNodeInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SameNodeInterface</type>
          </tag>
          <tag line="398" name="throws" description="if the query is invalid" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="398" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="398" name="api" description=""/>
        </docblock>
        <argument line="422">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="422">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="451" package="phpcr\interfaces">
        <name>childNode</name>
        <full_name>childNode</full_name>
        <docblock line="424">
          <description><![CDATA[Tests whether a node in the specified or default selector is a child of
a node reachable by a specified absolute path.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$selectorName is not the name of a selector in the query</li>
<li>$path is not a syntactically valid absolute path
<b>Note:</b>
however, that if the path is syntactically valid but does not identify a
node in the repository (or the node is not visible to this session,
because of access control constraints), the query is valid but the
constraint is not satisfied.</li>
</ul>]]></long-description>
          <tag line="424" name="param" description="an absolute path; non-null" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="424" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="424" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\ChildNodeInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ChildNodeInterface</type>
          </tag>
          <tag line="424" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="424" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="424" name="api" description=""/>
        </docblock>
        <argument line="451">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="451">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="481" package="phpcr\interfaces">
        <name>descendantNode</name>
        <full_name>descendantNode</full_name>
        <docblock line="453">
          <description><![CDATA[Tests whether a node in the specified or default selector is a
descendant of a node reachable by a specified absolute path.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:</p>

<ul>
<li>$selectorName is not the name of a selector in the query</li>
<li>$path is not a syntactically valid absolute path
<b>Note:</b>
however, that if the path is syntactically valid but does not identify a
node in the repository (or the node is not visible to this session,
because of access control constraints), the query is valid but the
constraint is not satisfied.</li>
</ul>]]></long-description>
          <tag line="453" name="param" description="an absolute path; non-null" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="453" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="453" name="return" description="the constraint;&#10;     non-null" type="\PHPCR\Query\QOM\DescendantNodeInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DescendantNodeInterface</type>
          </tag>
          <tag line="453" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="453" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="453" name="api" description=""/>
        </docblock>
        <argument line="481">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="481">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="501" package="phpcr\interfaces">
        <name>propertyValue</name>
        <full_name>propertyValue</full_name>
        <docblock line="483">
          <description><![CDATA[Evaluates to the value (or values, if multi-valued) of a property in the
specified or default selector.]]></description>
          <long-description><![CDATA[<p>The query is invalid if:
- $selectorName is not the name of a selector in the query
- $propertyName is not a syntactically valid JCR name</p>]]></long-description>
          <tag line="483" name="param" description="the property name; non-null" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="483" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="483" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\PropertyValueInterface">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyValueInterface</type>
          </tag>
          <tag line="483" name="throws" description="if the query is invalid" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="483" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="483" name="api" description=""/>
        </docblock>
        <argument line="501">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="501">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="519" package="phpcr\interfaces">
        <name>length</name>
        <full_name>length</full_name>
        <docblock line="503">
          <description><![CDATA[Evaluates to the length (or lengths, if multi-valued) of a property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="503" name="param" description="the property value for which to compute the length; non-null" type="\PHPCR\Query\QOM\PropertyValueInterface" variable="$propertyValue">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyValueInterface</type>
          </tag>
          <tag line="503" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\LengthInterface">
            <type by_reference="false">\PHPCR\Query\QOM\LengthInterface</type>
          </tag>
          <tag line="503" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="503" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="503" name="api" description=""/>
        </docblock>
        <argument line="519">
          <name>$propertyValue</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\PropertyValueInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="540" package="phpcr\interfaces">
        <name>nodeName</name>
        <full_name>nodeName</full_name>
        <docblock line="521">
          <description><![CDATA[Evaluates to a NAME value equal to the prefix-qualified name of a node
in the specified or default selector.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $selectorName is not the name of a selector in
the query.</p>]]></long-description>
          <tag line="521" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="521" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\NodeNameInterface">
            <type by_reference="false">\PHPCR\Query\QOM\NodeNameInterface</type>
          </tag>
          <tag line="521" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="521" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="521" name="api" description=""/>
        </docblock>
        <argument line="540">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="558" package="phpcr\interfaces">
        <name>nodeLocalName</name>
        <full_name>nodeLocalName</full_name>
        <docblock line="542">
          <description><![CDATA[Evaluates to a NAME value equal to the local (unprefixed) name of a node
in the specified or default selector.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $selectorName is not the name of a selector in
the query.</p>]]></long-description>
          <tag line="542" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="542" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\NodeLocalNameInterface">
            <type by_reference="false">\PHPCR\Query\QOM\NodeLocalNameInterface</type>
          </tag>
          <tag line="542" name="throws" description="if the query is invalid" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="542" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="542" name="api" description=""/>
        </docblock>
        <argument line="558">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="580" package="phpcr\interfaces">
        <name>fullTextSearchScore</name>
        <full_name>fullTextSearchScore</full_name>
        <docblock line="560">
          <description><![CDATA[Evaluates to a DOUBLE value equal to the full-text search score of a
node in the specified or default selector.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $selectorName is not the name of a selector in
the query.</p>]]></long-description>
          <tag line="560" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="560" name="return" description="the operand;&#10;     non-null" type="\PHPCR\Query\QOM\FullTextSearchScoreInterface">
            <type by_reference="false">\PHPCR\Query\QOM\FullTextSearchScoreInterface</type>
          </tag>
          <tag line="560" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="560" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="560" name="api" description=""/>
        </docblock>
        <argument line="580">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="598" package="phpcr\interfaces">
        <name>lowerCase</name>
        <full_name>lowerCase</full_name>
        <docblock line="582">
          <description><![CDATA[Evaluates to the lower-case string value (or values, if multi-valued) of an operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="582" name="param" description="the operand whose value is converted to a lower-case string; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$operand">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="582" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\LowerCaseInterface">
            <type by_reference="false">\PHPCR\Query\QOM\LowerCaseInterface</type>
          </tag>
          <tag line="582" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="582" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="582" name="api" description=""/>
        </docblock>
        <argument line="598">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="617" package="phpcr\interfaces">
        <name>upperCase</name>
        <full_name>upperCase</full_name>
        <docblock line="600">
          <description><![CDATA[Evaluates to the upper-case string value (or values, if multi-valued) of
an operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="600" name="param" description="the operand whose value is converted to a upper-case string; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$operand">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="600" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\UpperCaseInterface">
            <type by_reference="false">\PHPCR\Query\QOM\UpperCaseInterface</type>
          </tag>
          <tag line="600" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="600" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="600" name="api" description=""/>
        </docblock>
        <argument line="617">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="637" package="phpcr\interfaces">
        <name>bindVariable</name>
        <full_name>bindVariable</full_name>
        <docblock line="619">
          <description><![CDATA[Evaluates to the value of a bind variable.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $bindVariableName is not a valid JCR prefix.</p>]]></long-description>
          <tag line="619" name="param" description="the bind variable name; non-null" type="string" variable="$bindVariableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="619" name="return" description="the operand;&#10;     non-null" type="\PHPCR\Query\QOM\BindVariableValueInterface">
            <type by_reference="false">\PHPCR\Query\QOM\BindVariableValueInterface</type>
          </tag>
          <tag line="619" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="619" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="619" name="api" description=""/>
        </docblock>
        <argument line="637">
          <name>$bindVariableName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="656" package="phpcr\interfaces">
        <name>literal</name>
        <full_name>literal</full_name>
        <docblock line="639">
          <description><![CDATA[Evaluates to a literal value.]]></description>
          <long-description><![CDATA[<p>The query is invalid if no value is bound to $literalValue.</p>]]></long-description>
          <tag line="639" name="param" description="the value" type="mixed" variable="$literalValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="639" name="return" description="the operand; non-null" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="639" name="throws" description="if a particular validity test&#10;     is possible on this method, the implemention chooses to perform&#10;     that test (and not leave it until later) on createQuery, and the&#10;     parameters given fail that test" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="639" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="639" name="api" description=""/>
        </docblock>
        <argument line="656">
          <name>$literalValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="673" package="phpcr\interfaces">
        <name>ascending</name>
        <full_name>ascending</full_name>
        <docblock line="658">
          <description><![CDATA[Orders by the value of the specified operand, in ascending order.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $operand does not evaluate to a scalar value.</p>]]></long-description>
          <tag line="658" name="param" description="the operand by which to order; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$operand">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="658" name="return" description="the ordering" type="\PHPCR\Query\QOM\OrderingInterface">
            <type by_reference="false">\PHPCR\Query\QOM\OrderingInterface</type>
          </tag>
          <tag line="658" name="throws" description="if the query is invalid" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="658" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="658" name="api" description=""/>
        </docblock>
        <argument line="673">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="690" package="phpcr\interfaces">
        <name>descending</name>
        <full_name>descending</full_name>
        <docblock line="675">
          <description><![CDATA[Orders by the value of the specified operand, in descending order.]]></description>
          <long-description><![CDATA[<p>The query is invalid if $operand does not evaluate to a scalar value.</p>]]></long-description>
          <tag line="675" name="param" description="the operand by which to order; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$operand">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="675" name="return" description="the ordering" type="\PHPCR\Query\QOM\OrderingInterface">
            <type by_reference="false">\PHPCR\Query\QOM\OrderingInterface</type>
          </tag>
          <tag line="675" name="throws" description="if the query is invalid" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="675" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="675" name="api" description=""/>
        </docblock>
        <argument line="690">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="728" package="phpcr\interfaces">
        <name>column</name>
        <full_name>column</full_name>
        <docblock line="692">
          <description><![CDATA[Identifies a property in the specified or default selector to include in
the tabular view of query results.]]></description>
          <long-description><![CDATA[<p>The column name is the property name if not given.</p>

<p>The query is invalid if:</p>

<ul>
<li>$selectorName is not the name of a selector in the query</li>
<li>$propertyName is specified but it is not a syntactically valid JCR name</li>
<li>$propertyName is specified but does not evaluate to a scalar value</li>
<li>$propertyName is specified but $columnName is omitted</li>
<li>$propertyName is omitted but $columnName is specified</li>
<li>the columns in the tabular view are not uniquely named, whether those
column names are specified by $columnName (if $propertyName is
specified) or generated as described above (if $propertyName is
omitted).</li>
</ul>

<p>If $propertyName is specified but, for a node-tuple, the selector node
does not have a property named $propertyName, the query is valid and the
column has null value.</p>]]></long-description>
          <tag line="692" name="param" description="the property name, or null to include a column for each single-value non-residual property of the selector's node type" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="692" name="param" description="the column name; must be null if propertyName is null" type="string" variable="$columnName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="692" name="param" description="the selector name; non-null" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="692" name="return" description="the column; non-null" type="\PHPCR\Query\QOM\ColumnInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ColumnInterface</type>
          </tag>
          <tag line="692" name="throws" description="if the query has no default&#10;     selector or is otherwise invalid" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="692" name="throws" description="if the operation otherwise fails" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="692" name="api" description=""/>
        </docblock>
        <argument line="728">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="728">
          <name>$columnName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="728">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/DescendantNodeJoinConditionInterface.php" hash="c02a44fa0dc408a0fffa0db5845fc7db" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="41" package="phpcr\interfaces">
      <name>DescendantNodeJoinConditionInterface</name>
      <full_name>\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface</full_name>
      <extends>\PHPCR\Query\QOM\JoinConditionInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests whether the descendantSelector node is a descendant of the
ancestorSelector node.]]></description>
        <long-description><![CDATA[<p>A node-tuple satisfies the constraint only if:</p>

<pre><code>$descendantSelectorNode->getAncestor($n)->isSame($ancestorSelectorNode) && $descendantSelectorNode->getDepth() > $n</code></pre>

<p>would return true some some non-negative integer $n, where
$descendantSelectorNode is the node for descendantSelector and
$ancestorSelectorNode is the node for ancestorSelector.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="50" package="phpcr\interfaces">
        <name>getDescendantSelectorName</name>
        <full_name>getDescendantSelectorName</full_name>
        <docblock line="43">
          <description><![CDATA[Gets the name of the descendant selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="59" package="phpcr\interfaces">
        <name>getAncestorSelectorName</name>
        <full_name>getAncestorSelectorName</full_name>
        <docblock line="52">
          <description><![CDATA[Gets the name of the ancestor selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/LengthInterface.php" hash="11de2f0820bccef88a4c74bda04a54be" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="39" package="phpcr\interfaces">
      <name>LengthInterface</name>
      <full_name>\PHPCR\Query\QOM\LengthInterface</full_name>
      <extends>\PHPCR\Query\QOM\DynamicOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to the length (or lengths, if multi-valued) of a property.]]></description>
        <long-description><![CDATA[<p>The length should be computed as though the getLength method of
\PHPCR\PropertyInterface were called.</p>

<p>If propertyValue evaluates to null, the Length operand also evaluates to null.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="49" package="phpcr\interfaces">
        <name>getPropertyValue</name>
        <full_name>getPropertyValue</full_name>
        <docblock line="41">
          <description><![CDATA[Gets the property value for which to compute the length.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="return" description="the property value;&#10;     non-null" type="\PHPCR\Query\QOM\PropertyValueInterface">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyValueInterface</type>
          </tag>
          <tag line="41" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/NodeLocalNameInterface.php" hash="4ac13f06cd66adeaa39e3936873b4f7e" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>NodeLocalNameInterface</name>
      <full_name>\PHPCR\Query\QOM\NodeLocalNameInterface</full_name>
      <extends>\PHPCR\Query\QOM\DynamicOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to a NAME value equal to the local (unprefixed) name of a node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the name of the selector against which to evaluate this operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/AndInterface.php" hash="ad2ec78a8ef1786ff72a77492f02ebbc" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="37" package="phpcr\interfaces">
      <name>AndInterface</name>
      <full_name>\PHPCR\Query\QOM\AndInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Performs a logical conjunction of two other constraints.]]></description>
        <long-description><![CDATA[<p>To satisfy the And constraint, a node-tuple must satisfy both constraint1 and
constraint2.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="45" package="phpcr\interfaces">
        <name>getConstraint1</name>
        <full_name>getConstraint1</full_name>
        <docblock line="39">
          <description><![CDATA[Gets the first constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="39" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="53" package="phpcr\interfaces">
        <name>getConstraint2</name>
        <full_name>getConstraint2</full_name>
        <docblock line="47">
          <description><![CDATA[Gets the second constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="47" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/PropertyExistenceInterface.php" hash="ba68a70187fc37c94b665d8b3296f23a" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="37" package="phpcr\interfaces">
      <name>PropertyExistenceInterface</name>
      <full_name>\PHPCR\Query\QOM\PropertyExistenceInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests the existence of a property.]]></description>
        <long-description><![CDATA[<p>A node-tuple satisfies the constraint if the selector node has a property
named property.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="45" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="39">
          <description><![CDATA[Gets the name of the selector against which to apply this constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="53" package="phpcr\interfaces">
        <name>getPropertyName</name>
        <full_name>getPropertyName</full_name>
        <docblock line="47">
          <description><![CDATA[Gets the name of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="return" description="the property name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/EquiJoinConditionInterface.php" hash="8a6c9d9729c838d3655f586d0128c8e7" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="40" package="phpcr\interfaces">
      <name>EquiJoinConditionInterface</name>
      <full_name>\PHPCR\Query\QOM\EquiJoinConditionInterface</full_name>
      <extends>\PHPCR\Query\QOM\JoinConditionInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests whether the value of a property in a first selector is equal to the
value of a property in a second selector.]]></description>
        <long-description><![CDATA[<p>A node-tuple satisfies the constraint only if:
 selector1 has a property named property1, and
 selector2 has a property named property2, and
 the value of property1 equals the value of property2</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="49" package="phpcr\interfaces">
        <name>getSelector1Name</name>
        <full_name>getSelector1Name</full_name>
        <docblock line="42">
          <description><![CDATA[Gets the name of the first selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="58" package="phpcr\interfaces">
        <name>getProperty1Name</name>
        <full_name>getProperty1Name</full_name>
        <docblock line="51">
          <description><![CDATA[Gets the property name in the first selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="return" description="the property name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="67" package="phpcr\interfaces">
        <name>getSelector2Name</name>
        <full_name>getSelector2Name</full_name>
        <docblock line="60">
          <description><![CDATA[Gets the name of the second selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="60" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="76" package="phpcr\interfaces">
        <name>getProperty2Name</name>
        <full_name>getProperty2Name</full_name>
        <docblock line="69">
          <description><![CDATA[Gets the property name in the second selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="return" description="the property name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/LowerCaseInterface.php" hash="995495a75e053ca491a8285fd5c81e16" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="40" package="phpcr\interfaces">
      <name>LowerCaseInterface</name>
      <full_name>\PHPCR\Query\QOM\LowerCaseInterface</full_name>
      <extends>\PHPCR\Query\QOM\DynamicOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to the lower-case string value (or values, if multi-valued) of
operand.]]></description>
        <long-description><![CDATA[<p>If operand does not evaluate to a string value, its value is first converted
to a string.</p>

<p>If operand evaluates to null, the LowerCase operand also evaluates to null.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="48" package="phpcr\interfaces">
        <name>getOperand</name>
        <full_name>getOperand</full_name>
        <docblock line="42">
          <description><![CDATA[Gets the operand whose value is converted to a lower-case string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/OrInterface.php" hash="4e03349c739d07702ee8d8b814d74ff3" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="40" package="phpcr\interfaces">
      <name>OrInterface</name>
      <full_name>\PHPCR\Query\QOM\OrInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Performs a logical disjunction of two other constraints.]]></description>
        <long-description><![CDATA[<p>To satisfy the Or constraint, the node-tuple must either:</p>

<ul>
<li>satisfy constraint1 but not constraint2, or</li>
<li>satisfy constraint2 but not constraint1, or</li>
<li>satisfy both constraint1 and constraint2.</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="49" package="phpcr\interfaces">
        <name>getConstraint1</name>
        <full_name>getConstraint1</full_name>
        <docblock line="42">
          <description><![CDATA[Gets the first constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="58" package="phpcr\interfaces">
        <name>getConstraint2</name>
        <full_name>getConstraint2</full_name>
        <docblock line="51">
          <description><![CDATA[Gets the second constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="51" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/SelectorInterface.php" hash="d48d0487cc41fe182c5e2752c3fb01c3" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
      <name>SelectorInterface</name>
      <full_name>\PHPCR\Query\QOM\SelectorInterface</full_name>
      <extends>\PHPCR\Query\QOM\SourceInterface</extends>
      <docblock line="27">
        <description><![CDATA[Selects a subset of the nodes in the repository based on node type.]]></description>
        <long-description><![CDATA[<p>A selector selects every node in the repository, subject to access control
constraints, that satisfies at least one of the following conditions:</p>

<ul>
<li>the node's primary node type is nodeType</li>
<li>the node's primary node type is a subtype of nodeType</li>
<li>the node has a mixin node type that is nodeType</li>
<li>the node has a mixin node type that is a subtype of nodeType</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="50" package="phpcr\interfaces">
        <name>getNodeTypeName</name>
        <full_name>getNodeTypeName</full_name>
        <docblock line="44">
          <description><![CDATA[Gets the name of the required node type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="the node type name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="61" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="52">
          <description><![CDATA[Gets the selector name.]]></description>
          <long-description><![CDATA[<p>A selector's name can be used elsewhere in the query to identify the
selector.</p>]]></long-description>
          <tag line="52" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/OrderingInterface.php" hash="238c781d98792892bcbcee76b7728202" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="60" package="phpcr\interfaces">
      <name>OrderingInterface</name>
      <full_name>\PHPCR\Query\QOM\OrderingInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Determines the relative order of two node-tuples by evaluating operand for
each.]]></description>
        <long-description><![CDATA[<p>For a first node-tuple, nt1, for which operand evaluates to v1, and a second
node-tuple, nt2, for which operand evaluates to v2:</p>

<p>If order is Ascending, then:</p>

<ul>
<li>if either v1 is null, v2 is null, or both v1 and v2 are null, the relative
order of nt1 and nt2 isimplementation determined, otherwise</li>
<li>if v1 is a different property type than v2, the relative order of nt1 and
nt2 is implementation determined, otherwise</li>
<li>if v1 is ordered before v2, then nt1 precedes nt2, otherwise</li>
<li>if v1 is ordered after v2, then nt2 precedes nt1, otherwise
the relative order of nt1 and nt2 is implementation determined and may be
arbitrary.</li>
</ul>

<p>Otherwise, if order is Descending, then:</p>

<ul>
<li>if either v1 is null, v2 is null, or both v1 and v2 are null, the relative
order of nt1 and nt2 is implementation determined, otherwise</li>
<li>if v1 is a different property type than v2, the relative order of nt1 and
nt2 is implementation determined, otherwise</li>
<li>if v1 is ordered before v2, then nt2 precedes nt1, otherwise</li>
<li>if v1 is ordered after v2, then nt1 precedes nt2, otherwise
the relative order of nt1 and nt2 is implementation determined and may be
arbitrary.</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="68" package="phpcr\interfaces">
        <name>getOperand</name>
        <full_name>getOperand</full_name>
        <docblock line="62">
          <description><![CDATA[The operand by which to order.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="62" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="77" package="phpcr\interfaces">
        <name>getOrder</name>
        <full_name>getOrder</full_name>
        <docblock line="70">
          <description><![CDATA[Gets the order.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="return" description="either QueryObjectModelConstants.JCR_ORDER_ASCENDING or&#10;     QueryObjectModelConstants.JCR_ORDER_DESCENDING" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/FullTextSearchScoreInterface.php" hash="36300de9d96fad55940ca0c486e60722" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="41" package="phpcr\interfaces">
      <name>FullTextSearchScoreInterface</name>
      <full_name>\PHPCR\Query\QOM\FullTextSearchScoreInterface</full_name>
      <extends>\PHPCR\Query\QOM\DynamicOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to a DOUBLE value equal to the full-text search score of a node.]]></description>
        <long-description><![CDATA[<p>Full-text search score ranks a selector's nodes by their relevance to the
fullTextSearchExpression specified in a FullTextSearch. The values to which
FullTextSearchScore evaluates and the interpretation of those values are
implementation specific. FullTextSearchScore may evaluate to a constant value
in a repository that does not support full-text search scoring or has no
full-text indexed properties.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="50" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="43">
          <description><![CDATA[Gets the name of the selector against which to evaluate this operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/FullTextSearchInterface.php" hash="b2c9c00edd2c946dd06ddbf64ecf980c" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="76" package="phpcr\interfaces">
      <name>FullTextSearchInterface</name>
      <full_name>\PHPCR\Query\QOM\FullTextSearchInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Performs a full-text search.]]></description>
        <long-description><![CDATA[<p>The full-text search expression is evaluated against the set of full-text
indexed properties within the full-text search scope. If property is
specified, the full-text search scope is the property of that name on the
selector node in the node-tuple; otherwise the full-text search scope is all
properties of the selector node (or, in some implementations, all properties
in the node subgraph).</p>

<p>Which properties (if any) in a repository are full-text indexed is
implementation determined.</p>

<p>It is also implementation determined whether fullTextSearchExpression is
independently evaluated against each full-text indexed property in the
full-text search scope, or collectively evaluated against the set of such
properties using some implementation-determined mechanism.</p>

<p>Similarly, for multi-valued properties, it is implementation determined
whether fullTextSearchExpression is independently evaluated against each
element in the array of values, or collectively evaluated against the array
of values using some implementation-determined mechanism.</p>

<p>At minimum, an implementation must support the following
fullTextSearchExpression grammar:</p>

<ul>
<li>fullTextSearchExpression ::= [-]term {whitespace [OR] whitespace [-]term}</li>
<li>term ::= word | '"' word {whitespace word} '"'</li>
<li>word ::= (A string containing no whitespace)</li>
<li>whitespace ::= (A string of only whitespace)</li>
</ul>

<p>A query satisfies a FullTextSearch constraint if the value (or values) of the
full-text indexed properties within the full-text search scope satisfy the
specified fullTextSearchExpression, evaluated as follows:</p>

<ul>
<li>A term not preceded with "-" (minus sign) is satisfied only if the value
 contains that term.</li>
<li>A term preceded with "-" (minus sign) is satisfied only if the value does
 not contain that term.</li>
<li>Terms separated by whitespace are implicitly "ANDed".</li>
<li>Terms separated by "OR" are "ORed".</li>
<li>"AND" has higher precedence than "OR".</li>
<li>Within a term, each double quote ("), "-" (minus sign), and "\"
 (backslash) must be escaped by a preceding "\" (backslash).</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="85" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="78">
          <description><![CDATA[Gets the name of the selector against which to apply this constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="96" package="phpcr\interfaces">
        <name>getPropertyName</name>
        <full_name>getPropertyName</full_name>
        <docblock line="87">
          <description><![CDATA[Gets the name of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="return" description="the property name if the full-text search scope is a&#10;     property, otherwise null if the full-text search scope is the node&#10;     (or node subgraph, in some implementations)." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="106" package="phpcr\interfaces">
        <name>getFullTextSearchExpression</name>
        <full_name>getFullTextSearchExpression</full_name>
        <docblock line="98">
          <description><![CDATA[Gets the full-text search expression.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="return" description="the full-text search&#10;     expression; non-null" type="\PHPCR\Query\QOM\StaticOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\StaticOperandInterface</type>
          </tag>
          <tag line="98" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/ConstraintInterface.php" hash="7bdcf521eda64ef25474b7fa56e1e247" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="36" package="phpcr\interfaces">
      <name>ConstraintInterface</name>
      <full_name>\PHPCR\Query\QOM\ConstraintInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Filters the set of node-tuples formed by evaluating the query's selectors and
the joins between them.]]></description>
        <long-description><![CDATA[<p>To be included in the query results, a node-tuple must satisfy the constraint.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/ChildNodeJoinConditionInterface.php" hash="9c66cb0670e898b2a94c589946c87fb2" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="39" package="phpcr\interfaces">
      <name>ChildNodeJoinConditionInterface</name>
      <full_name>\PHPCR\Query\QOM\ChildNodeJoinConditionInterface</full_name>
      <extends>\PHPCR\Query\QOM\JoinConditionInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests whether the childSelector node is a child of the parentSelector node.]]></description>
        <long-description><![CDATA[<p>A node-tuple satisfies the constraint only if:</p>

<pre><code>$childSelectorNode->getParent()->isSame($parentSelectorNode)</code></pre>

<p>would return true, where $childSelectorNode is the node for childSelector
and $parentSelectorNode is the node for parentSelector.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="48" package="phpcr\interfaces">
        <name>getChildSelectorName</name>
        <full_name>getChildSelectorName</full_name>
        <docblock line="41">
          <description><![CDATA[Gets the name of the child selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="41" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="57" package="phpcr\interfaces">
        <name>getParentSelectorName</name>
        <full_name>getParentSelectorName</full_name>
        <docblock line="50">
          <description><![CDATA[Gets the name of the parent selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/SameNodeJoinConditionInterface.php" hash="076f0350548bdb49a6819a5d5152db46" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="50" package="phpcr\interfaces">
      <name>SameNodeJoinConditionInterface</name>
      <full_name>\PHPCR\Query\QOM\SameNodeJoinConditionInterface</full_name>
      <extends>\PHPCR\Query\QOM\JoinConditionInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests whether two nodes are "the same" according to
\PHPCR\ItemInterface::isSame()]]></description>
        <long-description><![CDATA[<p>If selector2Path is omitted:
 Tests whether the selector1 node is the same as the selector2 node.
 A node-tuple satisfies the constraint only if:</p>

<pre><code>$selector1Node->isSame($selector2Node)</code></pre>

<p>would return true, where $selector1Node is the node for selector1 and
 $selector2Node is the node for selector2.</p>

<p>Otherwise, if selector2Path is specified:
 Tests whether the selector1 node is the same as a node identified by
 relative path from the selector2 node. A node-tuple satisfies the
 constraint only if:</p>

<pre><code>$selector1Node->isSame($selector2Node->getNode($selector2Path))</code></pre>

<p>would return true, where $selector1Node is the node for selector1 and
 $selector2Node is the node for selector2.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="58" package="phpcr\interfaces">
        <name>getSelector1Name</name>
        <full_name>getSelector1Name</full_name>
        <docblock line="52">
          <description><![CDATA[Gets the name of the first selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="66" package="phpcr\interfaces">
        <name>getSelector2Name</name>
        <full_name>getSelector2Name</full_name>
        <docblock line="60">
          <description><![CDATA[Gets the name of the second selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="60" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="74" package="phpcr\interfaces">
        <name>getSelector2Path</name>
        <full_name>getSelector2Path</full_name>
        <docblock line="68">
          <description><![CDATA[Gets the path relative to the second selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="return" description="the relative path, or null for none" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/NodeNameInterface.php" hash="77da64de65be55ebb3bb5b5cdefeb648" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>NodeNameInterface</name>
      <full_name>\PHPCR\Query\QOM\NodeNameInterface</full_name>
      <extends>\PHPCR\Query\QOM\DynamicOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to a NAME value equal to the namespace-qualified name of a node.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the name of the selector against which to evaluate this operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/UpperCaseInterface.php" hash="45588ad2d39ad902390fc2dbdab2d410" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="40" package="phpcr\interfaces">
      <name>UpperCaseInterface</name>
      <full_name>\PHPCR\Query\QOM\UpperCaseInterface</full_name>
      <extends>\PHPCR\Query\QOM\DynamicOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to the upper-case string value (or values, if multi-valued) of
operand.]]></description>
        <long-description><![CDATA[<p>If operand does not evaluate to a string value, its value is first converted
to a string.</p>

<p>If operand evaluates to null, the UpperCase operand also evaluates to null.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="48" package="phpcr\interfaces">
        <name>getOperand</name>
        <full_name>getOperand</full_name>
        <docblock line="42">
          <description><![CDATA[Gets the operand whose value is converted to a upper-case string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/JoinConditionInterface.php" hash="113c25aa042a3e9075e4a4660f942bd3" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>JoinConditionInterface</name>
      <full_name>\PHPCR\Query\QOM\JoinConditionInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Filters the set of node-tuples formed from a join.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/OperandInterface.php" hash="e0a17c8a5ff580c2e3c74a6c046125f7" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>OperandInterface</name>
      <full_name>\PHPCR\Query\QOM\OperandInterface</full_name>
      <docblock line="27">
        <description><![CDATA[An operand to a binary operation specified by a Comparison.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/BindVariableValueInterface.php" hash="5d1844f9ea1bbd410fc3b3918f2e29e7" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>BindVariableValueInterface</name>
      <full_name>\PHPCR\Query\QOM\BindVariableValueInterface</full_name>
      <extends>\PHPCR\Query\QOM\StaticOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to the value of a bind variable.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
        <name>getBindVariableName</name>
        <full_name>getBindVariableName</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the name of the bind variable.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="return" description="the bind variable name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/QueryObjectModelInterface.php" hash="c91b8a9b486ec9746cffbf03daeb878e" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="63" package="phpcr\interfaces">
      <name>QueryObjectModelInterface</name>
      <full_name>\PHPCR\Query\QOM\QueryObjectModelInterface</full_name>
      <extends>\PHPCR\Query\QueryInterface</extends>
      <docblock line="27">
        <description><![CDATA[A query in the JCR/PHPCR query object model.]]></description>
        <long-description><![CDATA[<p>The JCR query object model describes the queries that can be evaluated by a
JCR repository independent of any particular query language, such as SQL.</p>

<p>A query consists of:</p>

<ul>
<li>a source. When the query is evaluated, the source evaluates its selectors
and the joins between them to produce a (possibly empty) set of
node-tuples. This is a set of 1-tuples if the query has one selector (and
therefore no joins), a set of 2-tuples if the query has two selectors (and
therefore one join), a set of 3-tuples if the query has three selectors
(two joins), and so forth.</li>
<li>an optional constraint. When the query is evaluated, the constraint
filters the set of node-tuples.</li>
<li>a list of zero or more orderings. The orderings specify the order in which
the node-tuples appear in the query results. The relative order of two
node-tuples is determined by evaluating the specified orderings, in list
order, untilencountering an ordering for which one node-tuple precedes the
other. If no orderings are specified, or if for none of the specified
orderings does one node-tuple precede the other, then the relative order
of the node-tuples is implementation determined (and may be arbitrary).</li>
<li>a list of zero or more columns to include in the tabular view of the query
results. If no columns are specified, the columns available in the tabular
view are implementation determined, but minimally include, for each
selector, a column for each single-valued non-residual property of the
selector's node type.</li>
</ul>

<p>The query object model representation of a query is created by factory
methods in the QueryObjectModelFactory.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="71" package="phpcr\interfaces">
        <name>getSource</name>
        <full_name>getSource</full_name>
        <docblock line="65">
          <description><![CDATA[Gets the node-tuple source for this query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="the node-tuple source; non-null" type="\PHPCR\Query\QOM\SourceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="65" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="81" package="phpcr\interfaces">
        <name>getConstraint</name>
        <full_name>getConstraint</full_name>
        <docblock line="73">
          <description><![CDATA[Gets the constraint for this query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="return" description="the constraint, or null if&#10;     none" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="73" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="89" package="phpcr\interfaces">
        <name>getOrderings</name>
        <full_name>getOrderings</full_name>
        <docblock line="83">
          <description><![CDATA[Gets the orderings for this query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="return" description="a list of zero or more OrderingInterface; non-null" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="83" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="97" package="phpcr\interfaces">
        <name>getColumns</name>
        <full_name>getColumns</full_name>
        <docblock line="91">
          <description><![CDATA[Gets the columns for this query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="return" description="a list of zero or more ColumnInterface; non-null" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="91" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/ComparisonInterface.php" hash="c3c4b27d4afd65554a36ee1d6a5a664a" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="77" package="phpcr\interfaces">
      <name>ComparisonInterface</name>
      <full_name>\PHPCR\Query\QOM\ComparisonInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Filters node-tuples based on the outcome of a binary operation.]]></description>
        <long-description><![CDATA[<p>For any comparison, operand2 always evaluates to a scalar value. In
contrast, operand1 may evaluate to an array of values (for example, the
value of a multi-valued property), in which case the comparison is
separately performed for each element of the array, and the Comparison
constraint is satisfied as a whole if the comparison against any element of
the array is satisfied.</p>

<p>If operand1 and operand2 evaluate to values of different property types, the
value of operand2 is converted to the property type of the value of operand1.
If the type conversion fails, the query is invalid.</p>

<p>If operator is not supported for the property type of operand1, the query is
invalid.</p>

<p>If operand1 evaluates to null (for example, if the operand evaluates the
value of a property which does not exist), the constraint is not satisfied.</p>

<p>The JCR_OPERATOR_EQUAL_TO operator is satisfied only if the value of
operand1 equals the value of operand2.</p>

<p>The JCR_OPERATOR_NOT_EQUAL_TO operator is satisfied unless the value of
operand1 equals the value of operand2.</p>

<p>The JCR_OPERATOR_LESSS_THAN operator is satisfied only if the value of
operand1 is ordered before the value of operand2.</p>

<p>The JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO operator is satisfied unless the value
of operand1 is ordered after the value of operand2.</p>

<p>The JCR_OPERATOR_GREATER_THAN operator is satisfied only if the value of
operand1 is ordered after the value of operand2.</p>

<p>The JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO operator is satisfied unless the
value of operand1 is ordered before the value of operand2.</p>

<p>The JCR_OPERATOR_LIKE operator is satisfied only if the value of operand1
matches the pattern specified by the value of operand2, where in the pattern:</p>

<ul>
<li>the character "%" matches zero or more characters, and</li>
<li>the character "_" (underscore) matches exactly one character, and</li>
<li>the string "\x" matches the character "x", and</li>
<li>all other characters match themselves.</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="87" package="phpcr\interfaces">
        <name>getOperand1</name>
        <full_name>getOperand1</full_name>
        <docblock line="79">
          <description><![CDATA[Gets the first operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\DynamicOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="79" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="97" package="phpcr\interfaces">
        <name>getOperator</name>
        <full_name>getOperator</full_name>
        <docblock line="89">
          <description><![CDATA[Gets the operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="return" description="one of&#10;     \PHPCR\Query\QOM\QueryObjectModelConstantsInterface.JCR_OPERATOR_*" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="106" package="phpcr\interfaces">
        <name>getOperand2</name>
        <full_name>getOperand2</full_name>
        <docblock line="99">
          <description><![CDATA[Gets the second operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="return" description="the operand; non-null" type="\PHPCR\Query\QOM\StaticOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\StaticOperandInterface</type>
          </tag>
          <tag line="99" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/SameNodeInterface.php" hash="20987b978a38b85b7606b46b9ffd7fb1" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="39" package="phpcr\interfaces">
      <name>SameNodeInterface</name>
      <full_name>\PHPCR\Query\QOM\SameNodeInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests whether the selector node is reachable by absolute path path.]]></description>
        <long-description><![CDATA[<p>A node-tuple satisfies the constraint only if:</p>

<pre><code>$selectorNode->isSame($session->getNode($path))</code></pre>

<p>would return true, where selectorNode is the node for the specified
selector.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="47" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="41">
          <description><![CDATA[Gets the name of the selector against which to apply this constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="41" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="55" package="phpcr\interfaces">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="49">
          <description><![CDATA[Gets the absolute path.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="return" description="the path; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/DescendantNodeInterface.php" hash="41f09b764e0efa271a040d7c7a251331" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
      <name>DescendantNodeInterface</name>
      <full_name>\PHPCR\Query\QOM\DescendantNodeInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests whether the selector node is a descendant of a node reachable by
absolute path path.]]></description>
        <long-description><![CDATA[<p>A node-tuple satisfies the constraint only if:</p>

<pre><code>$selectorNode->getAncestor($n)->isSame(session->getNode($path)) && $selectorNode->getDepth() > $n</code></pre>

<p>would return true for some non-negative integer n, where selectorNode is the
node for the specified selector.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="51" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="44">
          <description><![CDATA[Gets the name of the selector against which to apply this constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="60" package="phpcr\interfaces">
        <name>getAncestorPath</name>
        <full_name>getAncestorPath</full_name>
        <docblock line="53">
          <description><![CDATA[Gets the absolute path.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="return" description="the path; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/PropertyValueInterface.php" hash="8cb3ea4f585ba2f73106d79588a04839" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
      <name>PropertyValueInterface</name>
      <full_name>\PHPCR\Query\QOM\PropertyValueInterface</full_name>
      <extends>\PHPCR\Query\QOM\DynamicOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to the value (or values, if multi-valued) of a property.]]></description>
        <long-description><![CDATA[<p>If, for a node-tuple, the selector node does not have a property named
property, the operand evaluates to null.</p>

<p>The query is invalid if:</p>

<ul>
<li>selector is not the name of a selector in the query</li>
<li>property is not a syntactically valid JCR name</li>
</ul>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="50" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="44">
          <description><![CDATA[Gets the name of the selector against which to evaluate this operand.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="58" package="phpcr\interfaces">
        <name>getPropertyName</name>
        <full_name>getPropertyName</full_name>
        <docblock line="52">
          <description><![CDATA[Gets the name of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="return" description="the property name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/SourceInterface.php" hash="bf98721683d95e63e5f0584e6e330eb4" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>SourceInterface</name>
      <full_name>\PHPCR\Query\QOM\SourceInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Evaluates to a set of node-tuples.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/ChildNodeInterface.php" hash="67701f4b1521e60d0d6f3d89e2c0fabd" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="39" package="phpcr\interfaces">
      <name>ChildNodeInterface</name>
      <full_name>\PHPCR\Query\QOM\ChildNodeInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Tests whether the selector node is a child of a node reachable by absolute
path path.]]></description>
        <long-description><![CDATA[<p>A node-tuple satisfies the constraint only if</p>

<pre><code>$selectorNode->getParent()->isSame($session->getNode($path))</code></pre>

<p>would return true, where selectorNode is the node for the specified selector.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="48" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="41">
          <description><![CDATA[Gets the name of the selector against which to apply this constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="41" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="57" package="phpcr\interfaces">
        <name>getParentPath</name>
        <full_name>getParentPath</full_name>
        <docblock line="50">
          <description><![CDATA[Gets the absolute path.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="return" description="the path; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/QueryObjectModelConstantsInterface.php" hash="ace9f853891d7d9609296456396fb546" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>QueryObjectModelConstantsInterface</name>
      <full_name>\PHPCR\Query\QOM\QueryObjectModelConstantsInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Defines constants used in the query object model.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR\Query\QOM" line="44" package="phpcr\interfaces">
        <name>JCR_JOIN_TYPE_INNER</name>
        <full_name>JCR_JOIN_TYPE_INNER</full_name>
        <value><![CDATA['jcr.join.type.inner']]></value>
        <docblock line="40">
          <description><![CDATA[An inner join.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="50" package="phpcr\interfaces">
        <name>JCR_JOIN_TYPE_LEFT_OUTER</name>
        <full_name>JCR_JOIN_TYPE_LEFT_OUTER</full_name>
        <value><![CDATA['jcr.join.type.left.outer']]></value>
        <docblock line="46">
          <description><![CDATA[A left-outer join.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="56" package="phpcr\interfaces">
        <name>JCR_JOIN_TYPE_RIGHT_OUTER</name>
        <full_name>JCR_JOIN_TYPE_RIGHT_OUTER</full_name>
        <value><![CDATA['jcr.join.type.right.outer']]></value>
        <docblock line="52">
          <description><![CDATA[A right-outer join.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="62" package="phpcr\interfaces">
        <name>JCR_OPERATOR_EQUAL_TO</name>
        <full_name>JCR_OPERATOR_EQUAL_TO</full_name>
        <value><![CDATA['jcr.operator.equal.to']]></value>
        <docblock line="58">
          <description><![CDATA[The '=' comparison operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="68" package="phpcr\interfaces">
        <name>JCR_OPERATOR_NOT_EQUAL_TO</name>
        <full_name>JCR_OPERATOR_NOT_EQUAL_TO</full_name>
        <value><![CDATA['jcr.operator.not.equal.to']]></value>
        <docblock line="64">
          <description><![CDATA[The '!=' comparison operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="74" package="phpcr\interfaces">
        <name>JCR_OPERATOR_LESS_THAN</name>
        <full_name>JCR_OPERATOR_LESS_THAN</full_name>
        <value><![CDATA['jcr.operator.less.than']]></value>
        <docblock line="70">
          <description><![CDATA[The '<' comparison operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="80" package="phpcr\interfaces">
        <name>JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO</name>
        <full_name>JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO</full_name>
        <value><![CDATA['jcr.operator.less.than.or.equal.to']]></value>
        <docblock line="76">
          <description><![CDATA[The '<=' comparison operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="86" package="phpcr\interfaces">
        <name>JCR_OPERATOR_GREATER_THAN</name>
        <full_name>JCR_OPERATOR_GREATER_THAN</full_name>
        <value><![CDATA['jcr.operator.greater.than']]></value>
        <docblock line="82">
          <description><![CDATA[The '>' comparison operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="92" package="phpcr\interfaces">
        <name>JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO</name>
        <full_name>JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO</full_name>
        <value><![CDATA['jcr.operator.greater.than.or.equal.to']]></value>
        <docblock line="88">
          <description><![CDATA[The '>=' comparison operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="98" package="phpcr\interfaces">
        <name>JCR_OPERATOR_LIKE</name>
        <full_name>JCR_OPERATOR_LIKE</full_name>
        <value><![CDATA['jcr.operator.like']]></value>
        <docblock line="94">
          <description><![CDATA[The 'like' comparison operator.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="104" package="phpcr\interfaces">
        <name>JCR_ORDER_ASCENDING</name>
        <full_name>JCR_ORDER_ASCENDING</full_name>
        <value><![CDATA['jcr.order.ascending']]></value>
        <docblock line="100">
          <description><![CDATA[Ascending order.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Query\QOM" line="110" package="phpcr\interfaces">
        <name>JCR_ORDER_DESCENDING</name>
        <full_name>JCR_ORDER_DESCENDING</full_name>
        <value><![CDATA['jcr.order.descending']]></value>
        <docblock line="106">
          <description><![CDATA[Descending order.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="api" description=""/>
        </docblock>
      </constant>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/NotInterface.php" hash="98b803668bbb318c0f52976dd9dd6cd4" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="36" package="phpcr\interfaces">
      <name>NotInterface</name>
      <full_name>\PHPCR\Query\QOM\NotInterface</full_name>
      <extends>\PHPCR\Query\QOM\ConstraintInterface</extends>
      <docblock line="27">
        <description><![CDATA[Performs a logical negation of another constraint.]]></description>
        <long-description><![CDATA[<p>To satisfy the Not constraint, the node-tuple must not satisfy constraint.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="44" package="phpcr\interfaces">
        <name>getConstraint</name>
        <full_name>getConstraint</full_name>
        <docblock line="38">
          <description><![CDATA[Gets the constraint negated by this Not constraint.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="return" description="the constraint; non-null" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="38" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/ColumnInterface.php" hash="4389683af11204cec22bfa9c30fa1d7d" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
      <name>ColumnInterface</name>
      <full_name>\PHPCR\Query\QOM\ColumnInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Defines a column to include in the tabular view of query results.]]></description>
        <long-description><![CDATA[<p>If property is not specified, a column is included for each single-valued
non-residual property of the node type specified by the nodeType attribute
of selector.</p>

<p>If property is specified, columnName is required and used to name the column
in the tabular results. If property is not specified, columnName must not be
specified, and the included columns will be named "selector.propertyName".</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="51" package="phpcr\interfaces">
        <name>getSelectorName</name>
        <full_name>getSelectorName</full_name>
        <docblock line="44">
          <description><![CDATA[Gets the name of the selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="the selector name; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="61" package="phpcr\interfaces">
        <name>getPropertyName</name>
        <full_name>getPropertyName</full_name>
        <docblock line="53">
          <description><![CDATA[Gets the name of the property.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="return" description="the property name, or null to include a column for each&#10;     single-value non-residual property of the selector's node type" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="71" package="phpcr\interfaces">
        <name>getColumnName</name>
        <full_name>getColumnName</full_name>
        <docblock line="63">
          <description><![CDATA[Gets the column name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="the column name; must be null if getPropertyName is null&#10;     and non-null otherwise" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/LiteralInterface.php" hash="58118b5e5ab7267c1c05c85fa2e0b04b" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="34" package="phpcr\interfaces">
      <name>LiteralInterface</name>
      <full_name>\PHPCR\Query\QOM\LiteralInterface</full_name>
      <extends>\PHPCR\Query\QOM\StaticOperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[Evaluates to a literal value.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query\QOM" line="42" package="phpcr\interfaces">
        <name>getLiteralValue</name>
        <full_name>getLiteralValue</full_name>
        <docblock line="36">
          <description><![CDATA[Gets the value of the literal.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="return" description="the literal value; non-null" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/DynamicOperandInterface.php" hash="a59d25c7a99e8c40130df466ac864b9a" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="33" package="phpcr\interfaces">
      <name>DynamicOperandInterface</name>
      <full_name>\PHPCR\Query\QOM\DynamicOperandInterface</full_name>
      <extends>\PHPCR\Query\QOM\OperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[An operand whose value can only be determined in evaluating the query.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QOM/StaticOperandInterface.php" hash="4ee4d8cfb5deaaa0233586359287789e" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query\QOM" line="35" package="phpcr\interfaces">
      <name>StaticOperandInterface</name>
      <full_name>\PHPCR\Query\QOM\StaticOperandInterface</full_name>
      <extends>\PHPCR\Query\QOM\OperandInterface</extends>
      <docblock line="27">
        <description><![CDATA[An operand whose value can be determined from static analysis of the query,
prior to its evaluation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/InvalidQueryException.php" hash="1bfb7828d554744cc036e4873637da1c" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Query" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>InvalidQueryException</name>
      <full_name>\PHPCR\Query\InvalidQueryException</full_name>
      <docblock line="27">
        <description><![CDATA[Thrown by methods of Query.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Query/RowInterface.php" hash="af00b195e908f8d763be6092440a6b62" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query" line="40" package="phpcr\interfaces">
      <name>RowInterface</name>
      <full_name>\PHPCR\Query\RowInterface</full_name>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[A row in the query result table.]]></description>
        <long-description><![CDATA[<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. Rows have to implement either \RecursiveIterator or
\Iterator.
The iterator is similar to <b>getValues()</b> with keys being the column
names and the values the corresponding entry in that column for this row.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="53" package="phpcr\interfaces">
        <name>getValues</name>
        <full_name>getValues</full_name>
        <docblock line="42">
          <description><![CDATA[Returns an array of all the values in the same order as the column names
returned by QueryResultInterface::getColumnNames().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="return" description="Hashmap of column name to value of each column of the&#10;     current result row." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="68" package="phpcr\interfaces">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="55">
          <description><![CDATA[Returns the value of the indicated column in this Row.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="name of query result table column" type="string" variable="$columnName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="return" description="The value of the given column of the current result row." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="55" name="throws" description="if columnName s not among the&#10;     column names of the query result table." type="\PHPCR\ItemNotFoundException">
            <type by_reference="false">\PHPCR\ItemNotFoundException</type>
          </tag>
          <tag line="55" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="55" name="api" description=""/>
        </docblock>
        <argument line="68">
          <name>$columnName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="84" package="phpcr\interfaces">
        <name>getNode</name>
        <full_name>getNode</full_name>
        <docblock line="70">
          <description><![CDATA[Returns the Node corresponding to this Row and the specified selector,
if given.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="The selector identifying a node within the current result row." type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="return" description="a Node" type="\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="70" name="throws" description="If selectorName is not the alias of a&#10;     selector in this query or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="70" name="api" description=""/>
        </docblock>
        <argument line="84">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="104" package="phpcr\interfaces">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="86">
          <description><![CDATA[Get the path of a node identified by a selector.]]></description>
          <long-description><![CDATA[<p>Equivalent to $row->getNode($selectorName)->getPath(). However, some
implementations may be able gain efficiency by not resolving the actual
Node.</p>]]></long-description>
          <tag line="86" name="param" description="The selector identifying a node within the current result row." type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="return" description="The path representing the node identified by the given&#10;     selector." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="throws" description="if selectorName is not the alias of a&#10;     selector in this query or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="86" name="api" description=""/>
        </docblock>
        <argument line="104">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="135" package="phpcr\interfaces">
        <name>getScore</name>
        <full_name>getScore</full_name>
        <docblock line="106">
          <description><![CDATA[Returns the full text search score for this row associated with the
specified selector.]]></description>
          <long-description><![CDATA[<p>This corresponds to the score of a particular node.</p>

<ul>
<li>If no selectorName is given, the default selector is used.</li>
<li>If no FullTextSearchScore AQM object is associated with the selector
selectorName, this method will still return a value. However, in that
case the returned value may not be meaningful or may simply reflect
the minimum possible relevance level (for example, in some systems
this might be a score of 0).</li>
</ul>

<p>Note, in JCR-SQL2 a FullTextSearchScore AQM object is represented by a
SCORE() function. In JCR-JQOM it is represented by a PHP object of type
\PHPCR\Query\QOM\FullTextSearchScoreInterface.</p>]]></long-description>
          <tag line="106" name="param" description="The selector identifying a node within the current result row." type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="return" description="The full text search score for this row." type="float">
            <type by_reference="false">float</type>
          </tag>
          <tag line="106" name="throws" description="if selectorName is not the alias of a&#10;     selector in this query or (in case of no given selectorName) if&#10;     this query has more than one selector (and therefore, this Row&#10;     corresponds to more than one Node) or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="106" name="api" description=""/>
        </docblock>
        <argument line="135">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QueryResultInterface.php" hash="5a38bb2b400b4ff2bc66819526034aa4" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query" line="43" package="phpcr\interfaces">
      <name>QueryResultInterface</name>
      <full_name>\PHPCR\Query\QueryResultInterface</full_name>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[A QueryResult object.]]></description>
        <long-description><![CDATA[<p>Returned by Query->execute().</p>

<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. QueryResults have to implement either \RecursiveIterator or
\Iterator.
The iterator is equivalent to <b>getRows()</b> returning a list of the rows.
The iterator keys have no significant meaning.
Note: We use getRows and not getNodes as this is more generic. If you have a
single selector, you can either do foreach on getNodes or call getNode on the
rows.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="53" package="phpcr\interfaces">
        <name>getColumnNames</name>
        <full_name>getColumnNames</full_name>
        <docblock line="45">
          <description><![CDATA[Returns an array of all the column names in the table view of this result set.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="return" description="A list holding the column names." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="45" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="66" package="phpcr\interfaces">
        <name>getRows</name>
        <full_name>getRows</full_name>
        <docblock line="55">
          <description><![CDATA[Returns an iterator over the Rows of the result table.]]></description>
          <long-description><![CDATA[<p>The rows are returned according to the ordering specified in the query.</p>]]></long-description>
          <tag line="55" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;                 Keys are the row position in this result set, Values are the RowInterface instances." type="\PHPCR\Query\Iterator">
            <type by_reference="false">\PHPCR\Query\Iterator</type>
          </tag>
          <tag line="55" name="throws" description="if this call is the second time either getRows() or getNodes()&#10;                                   has been called on the same QueryResult object or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="55" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="83" package="phpcr\interfaces">
        <name>getNodes</name>
        <full_name>getNodes</full_name>
        <docblock line="68">
          <description><![CDATA[Returns an iterator over all nodes that match the query.]]></description>
          <long-description><![CDATA[<p>The nodes are returned according to the ordering specified in the query.</p>]]></long-description>
          <tag line="68" name="param" description="If to prefetch or not int &lt; 0/true means all, 0/false means none, int &gt; 0 means the prefetch chunk size or none" type="bool|int" variable="$prefetch">
            <type by_reference="false">bool</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="68" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;                 Keys are the paths, Values the given Node instances." type="\PHPCR\Query\Iterator">
            <type by_reference="false">\PHPCR\Query\Iterator</type>
          </tag>
          <tag line="68" name="throws" description="if the query contains more than one selector, if this call is&#10;                                   the second time either getRows() or getNodes() has been called on the&#10;                                   same QueryResult object or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="68" name="api" description=""/>
        </docblock>
        <argument line="83">
          <name>$prefetch</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="96" package="phpcr\interfaces">
        <name>getSelectorNames</name>
        <full_name>getSelectorNames</full_name>
        <docblock line="85">
          <description><![CDATA[Returns an array of all the selector names that were used in the query
that created this result.]]></description>
          <long-description><![CDATA[<p>If the query did not have a selector name then an empty array is returned.</p>]]></long-description>
          <tag line="85" name="return" description="A String array holding the selector names." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="85" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="85" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Query/QueryManagerInterface.php" hash="f7f38d296357701813e24ea97be4dad4" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Query" line="36" package="phpcr\interfaces">
      <name>QueryManagerInterface</name>
      <full_name>\PHPCR\Query\QueryManagerInterface</full_name>
      <docblock line="27">
        <description><![CDATA[This interface encapsulates methods for the management of search queries.]]></description>
        <long-description><![CDATA[<p>Provides methods for the creation and retrieval of search queries.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="56" package="phpcr\interfaces">
        <name>createQuery</name>
        <full_name>createQuery</full_name>
        <docblock line="38">
          <description><![CDATA[Creates a new query by specifying the query statement itself and the
language in which the query is stated.]]></description>
          <long-description><![CDATA[<p>The $language must be a string from among those returned by
QueryManagerInterface::getSupportedQueryLanguages().</p>]]></long-description>
          <tag line="38" name="param" description="The query statement to be executed." type="string" variable="$statement">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="The language of the query to be created." type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="a Query object" type="\PHPCR\Query\QueryInterface">
            <type by_reference="false">\PHPCR\Query\QueryInterface</type>
          </tag>
          <tag line="38" name="throws" description="if the query statement is&#10;     syntactically invalid or the specified language is not supported" type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="38" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="38" name="api" description=""/>
        </docblock>
        <argument line="56">
          <name>$statement</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="56">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="67" package="phpcr\interfaces">
        <name>getQOMFactory</name>
        <full_name>getQOMFactory</full_name>
        <docblock line="58">
          <description><![CDATA[Returns a QueryObjectModelFactory with which a JCR-JQOM query can be
built programmatically.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="return" description="a&#10;     QueryObjectModelFactory object" type="\PHPCR\Query\QOM\QueryObjectModelFactoryInterface">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
          </tag>
          <tag line="58" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="88" package="phpcr\interfaces">
        <name>getQuery</name>
        <full_name>getQuery</full_name>
        <docblock line="69">
          <description><![CDATA[Retrieves an existing persistent query.]]></description>
          <long-description><![CDATA[<p>Persistent queries are created by first using
QueryManagerInterface::createQuery() to create a Query object and then
calling QueryInterface::save() to persist the query to a location in the
workspace.</p>]]></long-description>
          <tag line="69" name="param" description="a persisted query (that is, a node of type nt:query)." type="\PHPCR\NodeInterface" variable="$node">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="69" name="return" description="a Query object." type="\PHPCR\Query\QueryInterface">
            <type by_reference="false">\PHPCR\Query\QueryInterface</type>
          </tag>
          <tag line="69" name="throws" description="If node is not a valid&#10;     persisted query (that is, a node of type nt:query)." type="\PHPCR\Query\InvalidQueryException">
            <type by_reference="false">\PHPCR\Query\InvalidQueryException</type>
          </tag>
          <tag line="69" name="throws" description="if another error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="69" name="api" description=""/>
        </docblock>
        <argument line="88">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Query" line="105" package="phpcr\interfaces">
        <name>getSupportedQueryLanguages</name>
        <full_name>getSupportedQueryLanguages</full_name>
        <docblock line="90">
          <description><![CDATA[Returns an array of strings representing all query languages supported
by this repository.]]></description>
          <long-description><![CDATA[<p>This set must include at least the strings represented by the constants
QueryInterface::JCR_SQL2 and QueryInterface::JCR_JQOM. An implementation
may also support other languages including the deprecated languages of
JCR 1.0: QueryInterface::XPATH and QueryInterface::SQL.</p>]]></long-description>
          <tag line="90" name="return" description="A list of supported languages by the query." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="90" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="90" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Observation/EventListenerInterface.php" hash="ac128acec0e2a4f71a19421772853435" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Observation" line="39" package="phpcr\interfaces">
      <name>EventListenerInterface</name>
      <full_name>\PHPCR\Observation\EventListenerInterface</full_name>
      <docblock line="27">
        <description><![CDATA[An event listener.]]></description>
        <long-description><![CDATA[<p>An EventListener can be registered via the ObservationManager object. Event
listeners are notified asynchronously, and see events after they occur and
the transaction is committed. An event listener only sees events for which
the session that registered it has sufficient access rights.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="48" package="phpcr\interfaces">
        <name>onEvent</name>
        <full_name>onEvent</full_name>
        <docblock line="41">
          <description><![CDATA[This method is called when a bundle of events is dispatched.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="The event set received." type="\Traversable" variable="$events">
            <type by_reference="false">\Traversable</type>
          </tag>
          <tag line="41" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="41" name="api" description=""/>
        </docblock>
        <argument line="48">
          <name>$events</name>
          <default><![CDATA[]]></default>
          <type>\Traversable</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Observation/EventJournalInterface.php" hash="753cbc60904f6b73b174a09ffe9a323b" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Observation" line="40" package="phpcr\interfaces">
      <name>EventJournalInterface</name>
      <full_name>\PHPCR\Observation\EventJournalInterface</full_name>
      <extends>\Countable</extends>
      <extends>\SeekableIterator</extends>
      <docblock line="27">
        <description><![CDATA[An EventJournal is an extended Iterator that provides the additional
method skipTo().]]></description>
        <long-description><![CDATA[<p>All elements in this iterator are of type EventInterface.</p>

<p><b>PHPCR Note:</b> This is the only iterator interface we kept, as it adds
additional value (performance).</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="52" package="phpcr\interfaces">
        <name>skipTo</name>
        <full_name>skipTo</full_name>
        <docblock line="42">
          <description><![CDATA[Skip all elements of the iterator earlier than date.]]></description>
          <long-description><![CDATA[<p>If an attempt is made to skip past the last element of the iterator, no
exception is thrown but the subsequent next() will fail.</p>]]></long-description>
          <tag line="42" name="param" description="Value that represents an offset in milliseconds from the epoch." type="integer" variable="$date">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="42" name="api" description=""/>
        </docblock>
        <argument line="52">
          <name>$date</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Observation/ObservationManagerInterface.php" hash="6911c2a6290d8f11dc01df40c129de96" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Observation" line="44" package="phpcr\interfaces">
      <name>ObservationManagerInterface</name>
      <full_name>\PHPCR\Observation\ObservationManagerInterface</full_name>
      <extends>\Traversable</extends>
      <docblock line="27">
        <description><![CDATA[The ObservationManager object.]]></description>
        <long-description><![CDATA[<p>Acquired via WorkspaceInterface::getObservationManager(). Allows for the
registration and deregistration of event listeners.</p>

<p>The \Traversable interface enables the implementation to be addressed with
<b>foreach</b>. ObservationManager has to implement either \IteratorAggregate
or \Iterator.
The iterator is equivalent to <b>getRegisteredEventListeners()</b> returning
a list of all registered event listeners. The iterator keys have no
significant meaning.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="100" package="phpcr\interfaces">
        <name>addEventListener</name>
        <full_name>addEventListener</full_name>
        <docblock line="46">
          <description><![CDATA[Adds an event listener that listens for the specified eventTypes (a
combination of one or more event types encoded as a bit mask value).]]></description>
          <long-description><![CDATA[<p>The set of events will be further filtered by the access rights of the c
urrent Session as well as the restrictions specified by the parameters of
this method. These restrictions are stated in terms of characteristics of the
associated parent node of the event.</p>

<p>The associated parent node of an event is the parent node of the item at (or
formerly at) the path returned by EventInterface::getPath(). The following
restrictions are available:
- <b>absPath</b>, <b>isDeep</b>: Only events whose associated parent node is at absPath (or
  within its subgraph, if isDeep is true) will be received. It is permissible
  to register a listener for a path where no node currently exists.
- <b>uuid</b>: Only events whose associated parent node has one of the identifiers in
  this list will be received. If his parameter is null then no identifier-
  related restriction is placed on events received. Note that specifying an
  empty array instead of null would result in no nodes being listened to. The
  term "UUID" is used for compatibility with JCR 1.0.
- <b>nodeTypeName</b>: Only events whose associated parent node has one of the node
  types (or a subtype of one of the node types) in this list will be received.
  If his parameter is null then no node type-related restriction is placed on
  events received. Note that specifying an empty array instead of null would
  result in no nodes types being listened to.</p>

<p>The restrictions are "ANDed" together. In other words, for a particular node
to be "listened to" it must meet all the restrictions.
Additionally, if noLocal is true, then events generated by the session
through which the listener was registered are ignored. Otherwise, they are
not ignored.</p>

<p>The filters of an already-registered EventListener can be changed at runtime
by re-registering the same EventListener object (i.e. the same actual object)
with a new set of filter arguments. The implementation must ensure that no
events are lost during the changeover.</p>

<p>In addition to the filters placed on a listener above, the scope of
observation support, in terms of which subgraphs are observable, may also be
subject to implementation-specific restrictions. For example, in some
repositories observation of changes in the jcr:system subgraph may not be
supported</p>]]></long-description>
          <tag line="46" name="param" description="An EventListener object." type="\PHPCR\Observation\EventListenerInterface" variable="$listener">
            <type by_reference="false">\PHPCR\Observation\EventListenerInterface</type>
          </tag>
          <tag line="46" name="param" description="A combination of one or more event type constants encoded as a bitmask." type="integer" variable="$eventTypes">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="46" name="param" description="The absolute path identifying the node to be observed." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="Switch to define the given path as a reference to a child node." type="boolean" variable="$isDeep">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="46" name="param" description="List of identifiers of events to be recieved." type="array" variable="$uuid">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="param" description="List of node type names to identify the events to be recieved." type="array" variable="$nodeTypeName">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="param" description="switch to handle local events." type="boolean" variable="$noLocal">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="46" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="46" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="46" name="api" description=""/>
        </docblock>
        <argument line="100">
          <name>$listener</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Observation\EventListenerInterface</type>
        </argument>
        <argument line="100">
          <name>$eventTypes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$absPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$isDeep</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$uuid</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="101">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="101">
          <name>$noLocal</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="118" package="phpcr\interfaces">
        <name>removeEventListener</name>
        <full_name>removeEventListener</full_name>
        <docblock line="103">
          <description><![CDATA[Deregisters an event listener.]]></description>
          <long-description><![CDATA[<p>A listener may be deregistered while it is being executed. The deregistration
method will block until the listener has completed executing. An exception to
this rule is a listener which deregisters itself from within the onEvent
method. In this case, the deregistration method returns immediately, but
deregistration will effectively be delayed until the listener completes.</p>]]></long-description>
          <tag line="103" name="param" description="The listener to deregister." type="\PHPCR\Observation\EventListenerInterface" variable="$listener">
            <type by_reference="false">\PHPCR\Observation\EventListenerInterface</type>
          </tag>
          <tag line="103" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="103" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="103" name="api" description=""/>
        </docblock>
        <argument line="118">
          <name>$listener</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Observation\EventListenerInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="131" package="phpcr\interfaces">
        <name>getRegisteredEventListeners</name>
        <full_name>getRegisteredEventListeners</full_name>
        <docblock line="120">
          <description><![CDATA[Returns all event listeners that have been registered through this session.]]></description>
          <long-description><![CDATA[<p>If no listeners have been registered, an empty iterator is returned.</p>]]></long-description>
          <tag line="120" name="return" description="implementing &lt;b&gt;SeekableIterator&lt;/b&gt; and &lt;b&gt;Countable&lt;/b&gt;.&#10;                 Values are the EventListenerInterface instances. Keys have no meaning." type="\PHPCR\Observation\Iterator">
            <type by_reference="false">\PHPCR\Observation\Iterator</type>
          </tag>
          <tag line="120" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="120" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="142" package="phpcr\interfaces">
        <name>setUserData</name>
        <full_name>setUserData</full_name>
        <docblock line="133">
          <description><![CDATA[Sets the user data information that will be returned by EventInterface::getUserData().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="param" description="the user data" type="string" variable="$userData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="133" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="133" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="133" name="api" description=""/>
        </docblock>
        <argument line="142">
          <name>$userData</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="168" package="phpcr\interfaces">
        <name>getEventJournal</name>
        <full_name>getEventJournal</full_name>
        <docblock line="144">
          <description><![CDATA[Retrieves the event journal for this workspace.]]></description>
          <long-description><![CDATA[<p>If journaled observation is not supported for this workspace, null is
returned.</p>

<p>Events returned in the EventJournal instance will be filtered according
to the parameters of this method, the current session's access
restrictions as well as any additional restrictions specified through
implemention-specific configuration.</p>

<p>The parameters of this method filter the event set in the same way as
they do in addEventListener().</p>]]></long-description>
          <tag line="144" name="param" description="A combination of one or more event type constants encoded as a bitmask." type="integer" variable="$eventTypes">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="144" name="param" description="an absolute path." type="string" variable="$absPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="144" name="param" description="Switch to define the given path as a reference to a child node." type="boolean" variable="$isDeep">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="144" name="param" description="array of identifiers." type="array" variable="$uuid">
            <type by_reference="false">array</type>
          </tag>
          <tag line="144" name="param" description="array of node type names." type="array" variable="$nodeTypeName">
            <type by_reference="false">array</type>
          </tag>
          <tag line="144" name="return" description="an EventJournal (or null)." type="\PHPCR\Observation\EventJournalInterface">
            <type by_reference="false">\PHPCR\Observation\EventJournalInterface</type>
          </tag>
          <tag line="144" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="144" name="api" description=""/>
        </docblock>
        <argument line="168">
          <name>$eventTypes</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$absPath</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$isDeep</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$uuid</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="169">
          <name>$nodeTypeName</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/Observation/EventInterface.php" hash="847cdaba53215e67f9aa237b65220867" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR\Observation" line="34" package="phpcr\interfaces">
      <name>EventInterface</name>
      <full_name>\PHPCR\Observation\EventInterface</full_name>
      <docblock line="27">
        <description><![CDATA[An event fired by the observation mechanism.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR\Observation" line="48" package="phpcr\interfaces">
        <name>NODE_ADDED</name>
        <full_name>NODE_ADDED</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="40">
          <description><![CDATA[Generated on persist when a node is added.]]></description>
          <long-description><![CDATA[<ul>
<li>getPath() returns the absolute path of the node that was added.</li>
<li>getIdentifier() returns the identifier of the node that was added.</li>
<li>getInfo() returns an empty array</li>
</ul>]]></long-description>
          <tag line="40" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Observation" line="58" package="phpcr\interfaces">
        <name>NODE_REMOVED</name>
        <full_name>NODE_REMOVED</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="50">
          <description><![CDATA[Generated on persist when a node is removed.]]></description>
          <long-description><![CDATA[<ul>
<li>getPath() returns the absolute path of the node that was removed.</li>
<li>getIdentifier() returns the identifier of the node that was removed.</li>
<li>getInfo() returns an empty array</li>
</ul>]]></long-description>
          <tag line="50" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Observation" line="68" package="phpcr\interfaces">
        <name>PROPERTY_ADDED</name>
        <full_name>PROPERTY_ADDED</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="60">
          <description><![CDATA[Generated on persist when a property is added.]]></description>
          <long-description><![CDATA[<ul>
<li>getPath() returns the absolute path of the property that was added.</li>
<li>getIdentifier() returns the identifier of the parent node of the property that was added.</li>
<li>getInfo() returns an empty array</li>
</ul>]]></long-description>
          <tag line="60" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Observation" line="77" package="phpcr\interfaces">
        <name>PROPERTY_REMOVED</name>
        <full_name>PROPERTY_REMOVED</full_name>
        <value><![CDATA[8]]></value>
        <docblock line="70">
          <description><![CDATA[Generated on persist when a property is removed.]]></description>
          <long-description><![CDATA[<ul>
<li>getPath() returns the absolute path of the property that was removed.</li>
<li>getIdentifier() returns the identifier of the parent node of the property that was removed.</li>
<li>getInfo() returns an empty array</li>
</ul>]]></long-description>
          <tag line="70" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Observation" line="87" package="phpcr\interfaces">
        <name>PROPERTY_CHANGED</name>
        <full_name>PROPERTY_CHANGED</full_name>
        <value><![CDATA[16]]></value>
        <docblock line="79">
          <description><![CDATA[Generated on persist when a property is changed.]]></description>
          <long-description><![CDATA[<ul>
<li>getPath() returns the absolute path of the property that was changed.</li>
<li>getIdentifier() returns the identifier of the parent node of the property that was changed.</li>
<li>getInfo() returns an empty array</li>
</ul>]]></long-description>
          <tag line="79" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Observation" line="105" package="phpcr\interfaces">
        <name>NODE_MOVED</name>
        <full_name>NODE_MOVED</full_name>
        <value><![CDATA[32]]></value>
        <docblock line="89">
          <description><![CDATA[Generated on persist when a node is moved.]]></description>
          <long-description><![CDATA[<ul>
<li>getPath() returns the absolute path of the destination of the move.</li>
<li>getIdentifier() returns the identifier of the moved node.</li>
<li><p>getInfo() If the method that caused this event was a
SessionInterface::move() or WorkspaceInterface::move() then the
returned array has keys srcAbsPath and destAbsPath with values
corresponding to the parameters passed to the move() method.</p>

<p>If the method that caused this event was a NodeInterface::orderBefore()
then the returned aray has keys srcChildRelPath and destChildRelPath
with values corresponding to the parameters passed to the orderBefore()
method.</p></li>
</ul>]]></long-description>
          <tag line="89" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Observation" line="116" package="phpcr\interfaces">
        <name>PERSIST</name>
        <full_name>PERSIST</full_name>
        <value><![CDATA[64]]></value>
        <docblock line="107">
          <description><![CDATA[If event bundling is supported, this event is used to indicate a
bundle boundary within the event journal.]]></description>
          <long-description><![CDATA[<ul>
<li>getPath() returns null.</li>
<li>getIdentifier() returns null.</li>
<li>getInfo() returns an empty array.</li>
</ul>]]></long-description>
          <tag line="107" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="134" package="phpcr\interfaces">
        <name>getType</name>
        <full_name>getType</full_name>
        <docblock line="120">
          <description><![CDATA[Returns the type of this event: a constant defined by this interface.]]></description>
          <long-description><![CDATA[<p>One of:
- NODE_ADDED
- NODE_REMOVED
- PROPERTY_ADDED
- PROPERTY_REMOVED
- PROPERTY_CHANGED
- NODE_MOVED
- PERSIST</p>]]></long-description>
          <tag line="120" name="return" description="the type of this event." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="120" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="148" package="phpcr\interfaces">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="136">
          <description><![CDATA[Returns the absolute path associated with this event or null if this
event has no associated identifier.]]></description>
          <long-description><![CDATA[<p>The meaning of the associated path depends upon the type of the event.
See event type constants above.</p>]]></long-description>
          <tag line="136" name="return" description="The absolute path associated with this event or null." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="136" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="158" package="phpcr\interfaces">
        <name>getUserID</name>
        <full_name>getUserID</full_name>
        <docblock line="150">
          <description><![CDATA[Returns the user ID connected with this event.]]></description>
          <long-description><![CDATA[<p>This is the string returned by SessionInterface::getUserID() of the session that caused the event.</p>]]></long-description>
          <tag line="150" name="return" description="The identifier of the user connected to the event." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="172" package="phpcr\interfaces">
        <name>getIdentifier</name>
        <full_name>getIdentifier</full_name>
        <docblock line="160">
          <description><![CDATA[Returns the identifier associated with this event or null if this event
has no associated identifier.]]></description>
          <long-description><![CDATA[<p>The meaning of the associated identifier depends upon the type of the event.
See event type constants above.</p>]]></long-description>
          <tag line="160" name="return" description="The identifier associated with this event or null." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="160" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="185" package="phpcr\interfaces">
        <name>getInfo</name>
        <full_name>getInfo</full_name>
        <docblock line="174">
          <description><![CDATA[Returns the information map associated with this event.]]></description>
          <long-description><![CDATA[<p>The meaning of the map depends upon the type of the event.
See event type constants above.</p>]]></long-description>
          <tag line="174" name="return" description="A list containing parameter information for instances of a NODE_MOVED event." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="174" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="174" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="195" package="phpcr\interfaces">
        <name>getUserData</name>
        <full_name>getUserData</full_name>
        <docblock line="187">
          <description><![CDATA[Returns the user data set through ObservationManagerInterface::setUserData() on the
ObservationManager bound to the Session that caused the event.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="return" description="The user data string." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="187" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Observation" line="209" package="phpcr\interfaces">
        <name>getDate</name>
        <full_name>getDate</full_name>
        <docblock line="197">
          <description><![CDATA[Returns the date when the change was persisted that caused this event.]]></description>
          <long-description><![CDATA[<p>The date is represented as a millisecond value that is an offset from the
Epoch, January 1, 1970 00:00:00.000 GMT (Gregorian). The granularity of
the returned value is implementation dependent.</p>]]></long-description>
          <tag line="197" name="return" description="The date when the change was persisted that caused this event (milliseconds since epoch)." type="integer">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="197" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="197" name="api" description=""/>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/WorkspaceInterface.php" hash="dd7ed501582223f25e525fd0edb1454a" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <interface namespace="PHPCR" line="40" package="phpcr\interfaces">
      <name>WorkspaceInterface</name>
      <full_name>\PHPCR\WorkspaceInterface</full_name>
      <docblock line="27">
        <description><![CDATA[Interface representing a view onto a persistent workspace within a repository.]]></description>
        <long-description><![CDATA[<p>A Workspace object represents a view onto a persistent workspace within a
repository. This view is defined by the authorization settings of the Session
object associated with the Workspace object. Each Workspace object is
associated one-to-one with a Session object. The Workspace object can be
acquired by calling $session->getWorkspace() on the associated Session object.</p>]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <constant namespace="PHPCR" line="50" package="phpcr\interfaces">
        <name>NAME_WORKSPACE_ROOT</name>
        <full_name>NAME_WORKSPACE_ROOT</full_name>
        <value><![CDATA['']]></value>
        <docblock line="46">
          <description><![CDATA[A constant for the name of the workspace root node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="56" package="phpcr\interfaces">
        <name>PATH_WORKSPACE_ROOT</name>
        <full_name>PATH_WORKSPACE_ROOT</full_name>
        <value><![CDATA['/']]></value>
        <docblock line="52">
          <description><![CDATA[A constant for the absolute path of the workspace root node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="62" package="phpcr\interfaces">
        <name>NAME_SYSTEM_NODE</name>
        <full_name>NAME_SYSTEM_NODE</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}system']]></value>
        <docblock line="58">
          <description><![CDATA[A constant for the name of the system node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="69" package="phpcr\interfaces">
        <name>PATH_SYSTEM_NODE</name>
        <full_name>PATH_SYSTEM_NODE</full_name>
        <value><![CDATA['/{http://www.jcp.org/jcr/1.0}system']]></value>
        <docblock line="64">
          <description><![CDATA[A constant for the absolute path of the system node.]]></description>
          <long-description><![CDATA[<p>This is '/' . NAME_SYSTEM_NODE</p>]]></long-description>
          <tag line="64" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="75" package="phpcr\interfaces">
        <name>NAME_NODE_TYPES_NODE</name>
        <full_name>NAME_NODE_TYPES_NODE</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}nodeTypes']]></value>
        <docblock line="71">
          <description><![CDATA[A constant for the name of the node type definition storage node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="82" package="phpcr\interfaces">
        <name>PATH_NODE_TYPES_NODE</name>
        <full_name>PATH_NODE_TYPES_NODE</full_name>
        <value><![CDATA['/{http://www.jcp.org/jcr/1.0}system/{http://www.jcp.org/jcr/1.0}nodeTypes']]></value>
        <docblock line="77">
          <description><![CDATA[A constant for the absolute path of the node type definition storage node.]]></description>
          <long-description><![CDATA[<p>This is PATH_SYSTEM_NODE . '/' . NAME_NODE_TYPES_NODE</p>]]></long-description>
          <tag line="77" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="88" package="phpcr\interfaces">
        <name>NAME_VERSION_STORAGE_NODE</name>
        <full_name>NAME_VERSION_STORAGE_NODE</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}versionStorage']]></value>
        <docblock line="84">
          <description><![CDATA[A constant for the name of the version storage node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="95" package="phpcr\interfaces">
        <name>PATH_VERSION_STORAGE_NODE</name>
        <full_name>PATH_VERSION_STORAGE_NODE</full_name>
        <value><![CDATA['/{http://www.jcp.org/jcr/1.0}system/{http://www.jcp.org/jcr/1.0}versionStorage']]></value>
        <docblock line="90">
          <description><![CDATA[A constant for the absolute path of the version storage node.]]></description>
          <long-description><![CDATA[<p>This is PATH_SYSTEM_NODE . '/' . NAME_VERSION_STORAGE_NODE</p>]]></long-description>
          <tag line="90" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="101" package="phpcr\interfaces">
        <name>NAME_ACTIVITIES_NODE</name>
        <full_name>NAME_ACTIVITIES_NODE</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}activities']]></value>
        <docblock line="97">
          <description><![CDATA[A constant for the name of the activities node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="108" package="phpcr\interfaces">
        <name>PATH_ACTIVITIES_NODE</name>
        <full_name>PATH_ACTIVITIES_NODE</full_name>
        <value><![CDATA['/{http://www.jcp.org/jcr/1.0}system/{http://www.jcp.org/jcr/1.0}activities']]></value>
        <docblock line="103">
          <description><![CDATA[A constant for the absolute path of the activities node.]]></description>
          <long-description><![CDATA[<p>This is PATH_SYSTEM_NODE . '/' . NAME_ACTIVITIES_NODE</p>]]></long-description>
          <tag line="103" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="114" package="phpcr\interfaces">
        <name>NAME_CONFIGURATIONS_NODE</name>
        <full_name>NAME_CONFIGURATIONS_NODE</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}configurations']]></value>
        <docblock line="110">
          <description><![CDATA[A constant for the name of the configurations node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="121" package="phpcr\interfaces">
        <name>PATH_CONFIGURATIONS_NODE</name>
        <full_name>PATH_CONFIGURATIONS_NODE</full_name>
        <value><![CDATA['/{http://www.jcp.org/jcr/1.0}system/{http://www.jcp.org/jcr/1.0}configurations']]></value>
        <docblock line="116">
          <description><![CDATA[A constant for the absolute path of the configurations node.]]></description>
          <long-description><![CDATA[<p>This is PATH_SYSTEM_NODE . '/' . NAME_CONFIGURATIONS_NODE</p>]]></long-description>
          <tag line="116" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="127" package="phpcr\interfaces">
        <name>NAME_UNFILED_NODE</name>
        <full_name>NAME_UNFILED_NODE</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}unfiled']]></value>
        <docblock line="123">
          <description><![CDATA[A constant for the name of the unfiled storage node.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="134" package="phpcr\interfaces">
        <name>PATH_UNFILED_NODE</name>
        <full_name>PATH_UNFILED_NODE</full_name>
        <value><![CDATA['/{http://www.jcp.org/jcr/1.0}system/{http://www.jcp.org/jcr/1.0}unfiled']]></value>
        <docblock line="129">
          <description><![CDATA[A constant for the absolute path of the unfiled storage node.]]></description>
          <long-description><![CDATA[<p>This is PATH_SYSTEM_NODE . '/' . NAME_UNFILED_NODE</p>]]></long-description>
          <tag line="129" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="140" package="phpcr\interfaces">
        <name>NAME_JCR_XMLTEXT</name>
        <full_name>NAME_JCR_XMLTEXT</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}xmltext']]></value>
        <docblock line="136">
          <description><![CDATA[A constant for the name of the jcr:xmltext node produced on importXML().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="146" package="phpcr\interfaces">
        <name>NAME_JCR_XMLCHARACTERS</name>
        <full_name>NAME_JCR_XMLCHARACTERS</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}xmlcharacters']]></value>
        <docblock line="142">
          <description><![CDATA[A constant for the name of the jcr:xmlcharacters property produced on importXML().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="api" description=""/>
        </docblock>
      </constant>
      <constant namespace="PHPCR" line="154" package="phpcr\interfaces">
        <name>RELPATH_JCR_XMLCHARACTERS</name>
        <full_name>RELPATH_JCR_XMLCHARACTERS</full_name>
        <value><![CDATA['{http://www.jcp.org/jcr/1.0}xmltext/{http://www.jcp.org/jcr/1.0}xmlcharacters']]></value>
        <docblock line="148">
          <description><![CDATA[A constant for the relative path from the node representing the imported XML element of
the jcr:xmlcharacters property produced on importXML().]]></description>
          <long-description><![CDATA[<p>This is NAME_JCR_XMLTEXT . '/' . NAME_JCR_XMLCHARACTERS</p>]]></long-description>
          <tag line="148" name="api" description=""/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="164" package="phpcr\interfaces">
        <name>getSession</name>
        <full_name>getSession</full_name>
        <docblock line="158">
          <description><![CDATA[Returns the Session object through which this Workspace object was acquired.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="158" name="return" description="a Session object." type="\PHPCR\SessionInterface">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
          <tag line="158" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="174" package="phpcr\interfaces">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="166">
          <description><![CDATA[Returns the name of the actual persistent workspace represented by this Workspace object.]]></description>
          <long-description><![CDATA[<p>This the name used in Repository->login.</p>]]></long-description>
          <tag line="166" name="return" description="the name of this workspace." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="166" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="271" package="phpcr\interfaces">
        <name>copy</name>
        <full_name>copy</full_name>
        <docblock line="176">
          <description><![CDATA[Copies a Node including its children to a new location to the given workspace.]]></description>
          <long-description><![CDATA[<p>This method copies the subgraph rooted at, and including, the node at
$srcWorkspace (if given) and $srcAbsPath to the new location in this
Workspace at $destAbsPath.</p>

<p>This is a workspace-write operation and therefore dispatches changes
immediately and does not require a save.</p>

<p>When a node N is copied to a path location where no node currently
exists, a new node N' is created at that location.
The subgraph rooted at and including N' (call it S') is created and is
identical to the subgraph rooted at and including N (call it S) with the
following exceptions:
- Every node in S' is given a new and distinct identifier
  - or, if $srcWorkspace is given -
  Every referenceable node in S' is given a new and distinct identifier
  while every non-referenceable node in S' may be given a new and
  distinct identifier.
- The repository may automatically drop any mixin node type T present on
  any node M in S. Dropping a mixin node type in this context means that
  while M remains unchanged, its copy M' will lack the mixin T and any
  child nodes and properties defined by T that are present on M. For
  example, a node M that is mix:versionable may be copied such that the
  resulting node M' will be a copy of N except that M' will not be
  mix:versionable and will not have any of the properties defined by
  mix:versionable. In order for a mixin node type to be dropped it must
  be listed by name in the jcr:mixinTypes property of M. The resulting
  jcr:mixinTypes property of M' will reflect any change.
- If a node M in S is referenceable and its mix:referenceable mixin is
  not dropped on copy, then the resulting jcr:uuid property of M' will
  reflect the new identifier assigned to M'.
- Each REFERENCE or WEAKEREFERENCE property R in S is copied to its new
  location R' in S'. If R references a node M within S then the value of
  R' will be the identifier of M', the new copy of M, thus preserving the
  reference within the subgraph.</p>

<p>When a node N is copied to a location where a node N' already exists, the
repository may either immediately throw an ItemExistsException or attempt
to update the node N' by selectively replacing part of its subgraph with
a copy of the relevant part of the subgraph of N. If the node types of N
and N' are compatible, the implementation supports update-on-copy for
these node types and no other errors occur, then the copy will succeed.
Otherwise an ItemExistsException is thrown.</p>

<p>Which node types can be updated on copy and the details of any such
updates are implementation-dependent. For example, some implementations
may support update-on-copy for mix:versionable nodes. In such a case the
versioning-related properties of the target node would remain unchanged
(jcr:uuid, jcr:versionHistory, etc.) while the substantive content part
of the subgraph would be replaced with that of the source node.</p>

<p>The $destAbsPath provided must not have an index on its final element. If
it does then a RepositoryException is thrown. Strictly speaking, the
$destAbsPath parameter is actually an absolute path to the parent node of
the new location, appended with the new name desired for the copied node.
It does not specify a position within the child node ordering. If ordering
is supported by the node type of the parent node of the new location, then
the new copy of the node is appended to the end of the child node list.</p>

<p>This method cannot be used to copy an individual property by itself. It
copies an entire node and its subgraph (including, of course, any
properties contained therein).</p>]]></long-description>
          <tag line="176" name="param" description="the path of the node to be copied." type="string" variable="$srcAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="param" description="the location to which the node at srcAbsPath is to be copied in this workspace." type="string" variable="$destAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="param" description="the name of the workspace from which the copy is to be made." type="string" variable="$srcWorkspace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="176" name="throws" description="if srcWorkspace does not exist&#10;     or if the current Session does not have permission to access it." type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="176" name="throws" description="if the operation&#10;     would violate a node-type or other implementation-specific&#10;     constraint." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="176" name="throws" description="if the parent node of&#10;     destAbsPath is read-only due to a checked-in node." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="176" name="throws" description="if the current session does have&#10;     access srcWorkspace but otherwise does not have sufficient access&#10;     to complete the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="176" name="throws" description="if the node at srcAbsPath in&#10;     srcWorkspace or the parent of destAbsPath in this workspace does&#10;     not exist." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="176" name="throws" description="if a node already exists at&#10;     destAbsPath and either same-name siblings are not allowed or update&#10;     on copy is not supported for the nodes involved." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="176" name="throws" description="if a lock prevents the copy." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="176" name="throws" description="if the last element of destAbsPath&#10;     has an index or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="176" name="api" description=""/>
        </docblock>
        <argument line="271">
          <name>$srcAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="271">
          <name>$destAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="271">
          <name>$srcWorkspace</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="346" package="phpcr\interfaces">
        <name>cloneFrom</name>
        <full_name>cloneFrom</full_name>
        <docblock line="273">
          <description><![CDATA[Clones the subgraph at the node srcAbsPath in srcWorkspace to the new
location at destAbsPath in the current workspace.]]></description>
          <long-description><![CDATA[<p>Unlike the signature of copy that copies between workspaces, this method
does not assign new identifiers to the newly cloned nodes but preserves
the identifiers of their respective source nodes. This applies to both
referenceable and non-referenceable nodes.</p>

<p>In some implementations there may be cases where preservation of a
non-referenceable identifier is not possible, due to how non-referenceable
identifiers are constructed in that implementation. In such a case this
method will throw a RepositoryException.</p>

<p>If removeExisting is true and an existing node in this workspace (the
destination workspace) has the same identifier as a node being cloned
from srcWorkspace, then the incoming node takes precedence, and the
existing node (and its subgraph) is removed. If removeExisting is false
then an identifier collision causes this method to throw an
ItemExistsException and no changes are made.</p>

<p>If successful, the change is persisted immediately, there is no need
to call save.</p>

<p>The destAbsPath provided must not have an index on its final element.
If it does then a RepositoryException is thrown.
If ordering is supported by the node type of the parent node of the new
location, then the new clone of the node is appended to the end of the
child node list.</p>

<p>This method cannot be used to clone just an individual property; it
clones a node and its subgraph.</p>

<p>PHP Notice: The JCR method is called clone, but that is a reserved
keyword in PHP, thus we named the method cloneFrom.</p>]]></long-description>
          <tag line="273" name="param" description="The name of the workspace from which the node is to be copied." type="string" variable="$srcWorkspace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="param" description="The path of the node to be copied in srcWorkspace." type="string" variable="$srcAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="param" description="The location to which the node at srcAbsPath is to be copied in this workspace." type="string" variable="$destAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="param" description="if false then this method throws an ItemExistsException on identifier conflict with an incoming node. If true then a identifier conflict is resolved by removing the existing node from its location in this workspace and cloning (copying in) the one from srcWorkspace." type="boolean" variable="$removeExisting">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="273" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="273" name="throws" description="if destWorkspace does not exist." type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="273" name="throws" description="if the operation&#10;     would violate a node-type or other implementation-specific&#10;     constraint." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="273" name="throws" description="if the parent node of&#10;     destAbsPath is read-only due to a checked-in node. This exception&#10;     will also be thrown if removeExisting is true, and an identifier&#10;     conflict occurs that would require the moving and/or altering of a&#10;     node that is checked-in." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="273" name="throws" description="if the current session does not&#10;     have sufficient access to complete the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="273" name="throws" description="if the node at srcAbsPath in&#10;     srcWorkspace or the parent of destAbsPath in this workspace does&#10;     not exist." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="273" name="throws" description="if a node already exists at&#10;     destAbsPath and same-name siblings are not allowed or if&#10;     removeExisting is false and an identifier conflict occurs." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="273" name="throws" description="if a lock prevents the clone." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="273" name="throws" description="if the last element of destAbsPath&#10;     has an index or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="273" name="api" description=""/>
        </docblock>
        <argument line="346">
          <name>$srcWorkspace</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="346">
          <name>$srcAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="346">
          <name>$destAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="346">
          <name>$removeExisting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="399" package="phpcr\interfaces">
        <name>move</name>
        <full_name>move</full_name>
        <docblock line="348">
          <description><![CDATA[Moves the node at srcAbsPath (and its entire subgraph) to the new
location at destAbsPath.]]></description>
          <long-description><![CDATA[<p>If successful, the change is persisted immediately, there is no need to
call save. Note that this is in contrast to
Session->move($srcAbsPath, $destAbsPath) which operates within the
transient space and hence requires a save.</p>

<p>The identifiers of referenceable nodes must not be changed by a move. The
identifiers of non-referenceable nodes may change.</p>

<p>The destAbsPath provided must not have an index on its final element. If
it does then a RepositoryException is thrown. Strictly speaking, the
destAbsPath parameter is actually an absolute path to the parent node of
the new location, appended with the new name desired for the moved node.
It does not specify a position within the child node ordering. If ordering
is supported by the node type of the parent node of the new location, then
the newly moved node is appended to the end of the child node list.</p>

<p>This method cannot be used to move just an individual property by itself.
It moves an entire node and its subgraph (including, of course, any
properties contained therein).</p>

<p>The identifiers of referenceable nodes must not be changed by a move. The
identifiers of non-referenceable nodes may change.</p>]]></long-description>
          <tag line="348" name="param" description="the path of the node to be moved." type="string" variable="$srcAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="348" name="param" description="the location to which the node at srcAbsPath is to be moved." type="string" variable="$destAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="348" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="348" name="throws" description="if the operation&#10;     would violate a node-type or other implementation-specific&#10;     constraint." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="348" name="throws" description="if the parent node of&#10;     destAbsPath is read-only due to a checked-in node." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="348" name="throws" description="if the current session (i.e. the&#10;     session that was used to acquire this Workspace object) does not&#10;     have sufficient access rights to complete the operation." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="348" name="throws" description="if the node at srcAbsPath or the&#10;     parent of destAbsPath does not exist." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="348" name="throws" description="if a node already exists at&#10;     destAbsPath and same-name siblings are not allowed." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="348" name="throws" description="if a lock prevents the move." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="348" name="throws" description="if the last element of destAbsPath&#10;     has an index or if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="348" name="api" description=""/>
        </docblock>
        <argument line="399">
          <name>$srcAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="399">
          <name>$destAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="412" package="phpcr\interfaces">
        <name>getLockManager</name>
        <full_name>getLockManager</full_name>
        <docblock line="401">
          <description><![CDATA[Returns the LockManager object, through which locking methods are accessed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="401" name="return" description="" type="\PHPCR\Lock\LockManagerInterface">
            <type by_reference="false">\PHPCR\Lock\LockManagerInterface</type>
          </tag>
          <tag line="401" name="throws" description="if the&#10;     implementation does not support locking." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="401" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="401" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="423" package="phpcr\interfaces">
        <name>getQueryManager</name>
        <full_name>getQueryManager</full_name>
        <docblock line="414">
          <description><![CDATA[Returns the QueryManager object, through search methods are accessed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="414" name="return" description="the QueryManager object." type="\PHPCR\Query\QueryManagerInterface">
            <type by_reference="false">\PHPCR\Query\QueryManagerInterface</type>
          </tag>
          <tag line="414" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="414" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="436" package="phpcr\interfaces">
        <name>getTransactionManager</name>
        <full_name>getTransactionManager</full_name>
        <docblock line="425">
          <description><![CDATA[Returns the UserTransaction object associated with this session]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="425" name="return" description="a UserTransaction&#10;     object." type="\PHPCR\Transaction\UserTransactionInterface">
            <type by_reference="false">\PHPCR\Transaction\UserTransactionInterface</type>
          </tag>
          <tag line="425" name="throws" description="if the&#10;     implementation does not support observation." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="425" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="451" package="phpcr\interfaces">
        <name>getNamespaceRegistry</name>
        <full_name>getNamespaceRegistry</full_name>
        <docblock line="438">
          <description><![CDATA[Returns the NamespaceRegistry object, which is used to access the
mapping between prefixes and namespaces.]]></description>
          <long-description><![CDATA[<p>In level 2 repositories the NamespaceRegistry can also be used to change
the namespace mappings.</p>]]></long-description>
          <tag line="438" name="return" description="the NamespaceRegistry." type="\PHPCR\NamespaceRegistryInterface">
            <type by_reference="false">\PHPCR\NamespaceRegistryInterface</type>
          </tag>
          <tag line="438" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="438" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="468" package="phpcr\interfaces">
        <name>getNodeTypeManager</name>
        <full_name>getNodeTypeManager</full_name>
        <docblock line="453">
          <description><![CDATA[Returns the NodeTypeManager through which node type information can be
queried.]]></description>
          <long-description><![CDATA[<p>There is one node type registry per repository, therefore the NodeTypeManager
is not workspace-specific; it provides introspection methods for the global,
repository-wide set of available node types. In repositories that support it,
the NodeTypeManager can also be used to register new node types.</p>]]></long-description>
          <tag line="453" name="return" description="a NodeTypeManager object." type="\PHPCR\NodeType\NodeTypeManagerInterface">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeManagerInterface</type>
          </tag>
          <tag line="453" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="453" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="482" package="phpcr\interfaces">
        <name>getObservationManager</name>
        <full_name>getObservationManager</full_name>
        <docblock line="470">
          <description><![CDATA[Returns the ObservationManager object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="470" name="return" description="an&#10;     ObservationManager object." type="\PHPCR\Observation\ObservationManagerInterface">
            <type by_reference="false">\PHPCR\Observation\ObservationManagerInterface</type>
          </tag>
          <tag line="470" name="throws" description="if the&#10;     implementation does not support observation." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="470" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="470" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="495" package="phpcr\interfaces">
        <name>getVersionManager</name>
        <full_name>getVersionManager</full_name>
        <docblock line="484">
          <description><![CDATA[Returns the VersionManager object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="484" name="return" description="a VersionManager object." type="\PHPCR\Version\VersionManagerInterface">
            <type by_reference="false">\PHPCR\Version\VersionManagerInterface</type>
          </tag>
          <tag line="484" name="throws" description="if the&#10;     implementation does not support versioning." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="484" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="484" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="513" package="phpcr\interfaces">
        <name>getAccessibleWorkspaceNames</name>
        <full_name>getAccessibleWorkspaceNames</full_name>
        <docblock line="497">
          <description><![CDATA[Gets a set of workspace accessible to the current user.]]></description>
          <long-description><![CDATA[<p>Returns a string array containing the names of all workspaces in this
repository that are accessible to this user, given the Credentials that
were used to get the Session to which this Workspace is tied.
In order to access one of the listed workspaces, the user performs
another RepositoryInterface::login(), specifying the name of the desired
workspace, and receives a new Session object.</p>]]></long-description>
          <tag line="497" name="return" description="string array of names of accessible workspaces." type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="497" name="throws" description="if an error occurs" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="497" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="674" package="phpcr\interfaces">
        <name>importXML</name>
        <full_name>importXML</full_name>
        <docblock line="596">
          <description><![CDATA[Deserializes an XML document and adds the resulting item subgraph as a
child of the node at $parentAbsPath.]]></description>
          <long-description><![CDATA[<p>If the incoming XML does not appear to be a JCR system view XML document
then it is interpreted as a document view XML document.</p>

<p>Changes are made directly at the workspace level, without going through
the Session. As a result, there is not need to call save. The advantage
of this direct-to-workspace method is that a large import will not result
in a large cache of pending nodes in the Session. The disadvantage is
that invalid data cannot be imported, fixed and then saved. Instead,
invalid data will cause this method to throw an
InvalidSerializedDataException.
See SessionInterface::importXML() for a version of this method that does
go through the Session.</p>

<p>The flag $uuidBehavior governs how the identifiers of incoming (deserialized)
nodes are handled. There are four options:</p>

<ul>
<li>ImportUUIDBehavior::IMPORT_UUID_CREATE_NEW: Incoming nodes are assigned newly
created identifiers upon addition to the workspace. As a result identifier
collisions never occur.</li>
<li>ImportUUIDBehavior::IMPORT_UUID_COLLISION_REMOVE_EXISTING: If an incoming node
has the same identifier as a node already existing in the workspace then the
already existing node (and its subgraph) is removed from wherever it may be
in the workspace before the incoming node is added. Note that this can result
in nodes "disappearing" from locations in the workspace that are remote from
the location to which the incoming subgraph is being written. If an incoming
node has the same identifier as the existing root node of this workspace then</li>
<li>ImportUUIDBehavior::IMPORT_UUID_COLLISION_REPLACE_EXISTING: If an incoming node
has the same identifier as a node already existing in the workspace then the
already existing node is replaced by the incoming node in the same position as
the existing node. Note that this may result in the incoming subgraph being
disaggregated and "spread around" to different locations in the workspace. In
the most extreme edge case this behavior may result in no node at all being
added as child of parentAbsPath. This will occur if the topmost element of the
incoming XML has the same identifier as an existing node elsewhere in the
workspace.</li>
<li>ImportUUIDBehavior::IMPORT_UUID_COLLISION_THROW: If an incoming node has the
same identifier as a node already existing in the workspace then an
ItemExistsException is thrown.</li>
</ul>]]></long-description>
          <tag line="596" name="param" description="the absolute path of the node below which the deserialized subgraph is added." type="string" variable="$parentAbsPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="596" name="param" description="Source location for the XML to be read, Can be anything that works with fopen." type="string" variable="$uri">
            <type by_reference="false">string</type>
          </tag>
          <tag line="596" name="param" description="a four-value flag that governs how incoming identifiers are handled." type="integer" variable="$uuidBehavior">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="596" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="596" name="throws" description="if an error during an I/O operation occurs." type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
          <tag line="596" name="throws" description="if no node exists at parentAbsPath." type="\PHPCR\PathNotFoundException">
            <type by_reference="false">\PHPCR\PathNotFoundException</type>
          </tag>
          <tag line="596" name="throws" description="if node-type or&#10;     other implementation-specific constraints prevent the addition of&#10;     the subgraph or if uuidBehavior is set to&#10;     IMPORT_UUID_COLLISION_REMOVE_EXISTING and an incoming node has the&#10;     same identifier as the node at parentAbsPath or one of its&#10;     ancestors." type="\PHPCR\NodeType\ConstraintViolationException">
            <type by_reference="false">\PHPCR\NodeType\ConstraintViolationException</type>
          </tag>
          <tag line="596" name="throws" description="if the node at parentAbsPath is&#10;     read-only due to a checked-in node." type="\PHPCR\Version\VersionException">
            <type by_reference="false">\PHPCR\Version\VersionException</type>
          </tag>
          <tag line="596" name="throws" description="if incoming stream is not&#10;     a valid XML document." type="\PHPCR\InvalidSerializedDataException">
            <type by_reference="false">\PHPCR\InvalidSerializedDataException</type>
          </tag>
          <tag line="596" name="throws" description="if the top-most element of the&#10;     incoming XML would deserialize to a node with the same name as an&#10;     existing child of parentAbsPath and that child does not allow&#10;     same-name siblings, or if a uuidBehavior is set to&#10;     IMPORT_UUID_COLLISION_THROW and an identifier collision occurs." type="\PHPCR\ItemExistsException">
            <type by_reference="false">\PHPCR\ItemExistsException</type>
          </tag>
          <tag line="596" name="throws" description="if a lock prevents the addition of the&#10;     subgraph." type="\PHPCR\Lock\LockException">
            <type by_reference="false">\PHPCR\Lock\LockException</type>
          </tag>
          <tag line="596" name="throws" description="if the session associated with this&#10;     Workspace object does not have sufficient access to perform the&#10;     import." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="596" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="596" name="api" description=""/>
        </docblock>
        <argument line="674">
          <name>$parentAbsPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="674">
          <name>$uri</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="674">
          <name>$uuidBehavior</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="706" package="phpcr\interfaces">
        <name>createWorkspace</name>
        <full_name>createWorkspace</full_name>
        <docblock line="676">
          <description><![CDATA[Creates a new Workspace with the specified name.]]></description>
          <long-description><![CDATA[<p>The new workspace is
empty, meaning it contains only root node.</p>

<p>If srcWorkspace is given:&lt;br/>
Creates a new Workspace with the specified name initialized with a
clone of the content of the workspace srcWorkspace. Semantically,
this method is equivalent to creating a new workspace and manually
cloning srcWorkspace to it; however, this method may assist some
implementations in optimizing subsequent NodeInterface::update() and
NodeInterface::merge() calls between the new workspace and its source.</p>

<p>The new workspace can be accessed through a login specifying its name.</p>]]></long-description>
          <tag line="676" name="param" description="A String, the name of the new workspace." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="676" name="param" description="The name of the workspace from which the new workspace is to be cloned." type="string" variable="$srcWorkspace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="676" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="676" name="throws" description="if the session through which this&#10;     Workspace object was acquired does not have sufficient access to&#10;     create the new workspace." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="676" name="throws" description="if the repository&#10;     does not support the creation of workspaces." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="676" name="throws" description="if $srcWorkspace does not exist." type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="676" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="676" name="api" description=""/>
        </docblock>
        <argument line="706">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="706">
          <name>$srcWorkspace</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="726" package="phpcr\interfaces">
        <name>deleteWorkspace</name>
        <full_name>deleteWorkspace</full_name>
        <docblock line="708">
          <description><![CDATA[Deletes the workspace with the specified name from the repository,
deleting all content within it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="708" name="param" description="A String, the name of the workspace to be deleted." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="708" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="708" name="throws" description="if the session through which this&#10;     Workspace object was acquired does not have sufficient access to&#10;     remove the workspace." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="708" name="throws" description="if the repository&#10;     does not support the removal of workspaces." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="708" name="throws" description="if $name does not exist." type="\PHPCR\NoSuchWorkspaceException">
            <type by_reference="false">\PHPCR\NoSuchWorkspaceException</type>
          </tag>
          <tag line="708" name="throws" description="if another error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="708" name="api" description=""/>
        </docblock>
        <argument line="726">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="phpcr/src/PHPCR/SimpleCredentials.php" hash="0d697a88e1f0801d20a7160b0d4cc9bf" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="true" abstract="true" namespace="PHPCR" line="37" package="phpcr\prototypes">
      <extends/>
      <implements>\PHPCR\CredentialsInterface</implements>
      <name>SimpleCredentials</name>
      <full_name>\PHPCR\SimpleCredentials</full_name>
      <docblock line="27">
        <description><![CDATA[SimpleCredentials implements the Credentials interface and represents simple
user ID/password credentials.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="author" description="Karsten Dambekalns &lt;karsten@typo3.org&gt;"/>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="prototypes"/>
        <tag line="27" name="scope" description="prototype"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <property final="false" static="false" visibility="private" line="44" namespace="PHPCR" package="Default">
        <name>$userID</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Unique identifier of a user.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="50" namespace="PHPCR" package="Default">
        <name>$password</name>
        <default><![CDATA[]]></default>
        <docblock line="46">
          <description><![CDATA[Unique string used to authenticate the user.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="56" namespace="PHPCR" package="Default">
        <name>$attributes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="52">
          <description><![CDATA[Container to store properties.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="67" package="phpcr\prototypes">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="58">
          <description><![CDATA[The constructor creates a new SimpleCredentials object, given a user ID
and password.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="the user ID" type="string" variable="$userID">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="the user's password" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="api" description=""/>
        </docblock>
        <argument line="67">
          <name>$userID</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$password</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="80" package="phpcr\prototypes">
        <name>getPassword</name>
        <full_name>getPassword</full_name>
        <docblock line="73">
          <description><![CDATA[Returns the user password.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="return" description="the password" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="92" package="phpcr\prototypes">
        <name>getUserID</name>
        <full_name>getUserID</full_name>
        <docblock line="85">
          <description><![CDATA[Returns the user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="return" description="the user ID." type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="api" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="110" package="phpcr\prototypes">
        <name>setAttribute</name>
        <full_name>setAttribute</full_name>
        <docblock line="97">
          <description><![CDATA[Stores an attribute in this credentials instance.]]></description>
          <long-description><![CDATA[<p><b>Note:</b>
If no value is passed, the attribute will be removed.</p>]]></long-description>
          <tag line="97" name="param" description="the name of the attribute" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="param" description="the value to be stored" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="97" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="97" name="api" description=""/>
        </docblock>
        <argument line="110">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="110">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="135" package="phpcr\prototypes">
        <name>getAttribute</name>
        <full_name>getAttribute</full_name>
        <docblock line="124">
          <description><![CDATA[Returns the value of the named attribute, or null if no attribute of the
given name exists.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="the name of the attribute" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="124" name="return" description="the value of the attribute, or null if the attribute does&#10;     not exist" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="124" name="api" description=""/>
        </docblock>
        <argument line="135">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="152" package="phpcr\prototypes">
        <name>removeAttribute</name>
        <full_name>removeAttribute</full_name>
        <docblock line="143">
          <description><![CDATA[Removes an attribute from this credentials instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="the name of the attribute to remove" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="143" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="143" name="api" description=""/>
        </docblock>
        <argument line="152">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR" line="168" package="phpcr\prototypes">
        <name>getAttributeNames</name>
        <full_name>getAttributeNames</full_name>
        <docblock line="159">
          <description><![CDATA[Returns the names of the attributes available to this
credentials instance.]]></description>
          <long-description><![CDATA[<p>This method returns an empty array
if the credentials instance has no attributes available to it.</p>]]></long-description>
          <tag line="159" name="return" description="a string array containing the names of the stored attributes" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="159" name="api" description=""/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Transaction/RollbackException.php" hash="c77659b43934be09eb9e5683f6c8e75d" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API.]]></description>
      <long-description><![CDATA[<p>This file in particular is derived from the Java UserTransaction Interface
of the package javax.transaction. For more information about the Java
interface have a look at
http://download.oracle.com/javaee/6/api/javax/transaction/package-summary.html</p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Transaction" line="37" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>RollbackException</name>
      <full_name>\PHPCR\Transaction\RollbackException</full_name>
      <docblock line="29">
        <description><![CDATA[RollbackException exception is thrown when the transaction has been rolled back instead of committed.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="29" name="author" description="Johannes Stark &lt;starkj@gmx.de&gt;"/>
        <tag line="29" name="package" description="phpcr"/>
        <tag line="29" name="subpackage" description="exceptions"/>
        <tag line="29" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/Transaction/UserTransactionInterface.php" hash="047ed9e5b0a7f301e4064e8b0fc74ce8" package="Default">
    <interface namespace="PHPCR\Transaction" line="62" package="Default">
      <name>UserTransactionInterface</name>
      <full_name>\PHPCR\Transaction\UserTransactionInterface</full_name>
      <docblock line="13">
        <description><![CDATA[As there is no transaction standard in PHP this interface provides a
transaction interface similar to the
<a href="http://en.wikipedia.org/wiki/Java_Transaction_API">Java Transaction
API (JTA)</a>]]></description>
        <long-description><![CDATA[<p>You can acquire the transaction manager from a session supporting
transactions with \PHPCR\SessionInterface::getTransactionManager()</p>

<p>A transaction is started with begin() and only permanently persisted if
commit() is called. If commit() is not called until timeout, the lifetime
of your php script or if rollback() is called explicitly, no changes are
persisted.</p>

<p>Remember that session changes are never persisted before you call
$session->save(). Transactions are only necessary if you want to be able
to rollback over more than one save operation.</p>

<p>The usage looks like</p>

<pre>

   $tm = $session->getTransactionManager();
   $tm->begin();
   //do stuff with the session
   $session->save();
   //do more stuff
   if (problem) {
       $tm->rollback();
   } else {
       $session->save();
       $tm->commit();
   }
</pre>

<p>A transaction manager might support nested transactions, meaning you can
call begin() repeatedly without commit() in between (but have to commit
every transaction you started).</p>

<p>Remember that in the context of phpcr, the rollback operation will only
reset the transaction but keep the current session changes. If you want to
get rid of them too, use \PHPCR\SessionInterface::refresh()</p>]]></long-description>
        <tag line="13" name="see" description="\PHPCR\SessionInterface::getTransactionManager()" refers="\PHPCR\SessionInterface::getTransactionManager()"/>
        <tag line="13" name="author" description="Johannes Stark &lt;starkj@gmx.de&gt;"/>
        <tag line="13" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
        <tag line="13" name="api" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Transaction" line="76" package="Default">
        <name>begin</name>
        <full_name>begin</full_name>
        <docblock line="64">
          <description><![CDATA[Begin new transaction associated with current session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="64" name="throws" description="Thrown if a&#10;     transaction is already started and the transaction implementation&#10;     or backend does not support nested transactions." type="\PHPCR\UnsupportedRepositoryOperationException">
            <type by_reference="false">\PHPCR\UnsupportedRepositoryOperationException</type>
          </tag>
          <tag line="64" name="throws" description="Thrown if the transaction&#10;     implementation encounters an unexpected error condition." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Transaction" line="93" package="Default">
        <name>commit</name>
        <full_name>commit</full_name>
        <docblock line="78">
          <description><![CDATA[Commit the transaction associated with the current session to store it
persistently.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="78" name="throws" description="Thrown to indicate that the&#10;     transaction has been rolled back rather than committed." type="\PHPCR\Transaction\RollbackException">
            <type by_reference="false">\PHPCR\Transaction\RollbackException</type>
          </tag>
          <tag line="78" name="throws" description="Thrown to indicate that the&#10;     session is not allowed to commit the transaction." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="78" name="throws" description="Thrown if the current&#10;     session is not associated with a transaction." type="\LogicException">
            <type by_reference="false">\LogicException</type>
          </tag>
          <tag line="78" name="throws" description="Thrown if the transaction&#10;     implementation encounters an unexpected error condition." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Transaction" line="104" package="Default">
        <name>inTransaction</name>
        <full_name>inTransaction</full_name>
        <docblock line="95">
          <description><![CDATA[Obtain the status if the current session is inside of a transaction or
not.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="95" name="throws" description="Thrown if the transaction&#10;     implementation encounters an unexpected error condition." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Transaction" line="118" package="Default">
        <name>rollback</name>
        <full_name>rollback</full_name>
        <docblock line="106">
          <description><![CDATA[Rollback the transaction associated with the current session.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="106" name="throws" description="Thrown to indicate that the&#10;     application is not allowed to roll back the transaction." type="\PHPCR\AccessDeniedException">
            <type by_reference="false">\PHPCR\AccessDeniedException</type>
          </tag>
          <tag line="106" name="throws" description="Thrown if the current session is not associated&#10;     with a transaction." type="\LogicException">
            <type by_reference="false">\LogicException</type>
          </tag>
          <tag line="106" name="throws" description="Thrown if the transaction&#10;     implementation encounters an unexpected error condition." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Transaction" line="137" package="Default">
        <name>setTransactionTimeout</name>
        <full_name>setTransactionTimeout</full_name>
        <docblock line="120">
          <description><![CDATA[Set a timeout for the transaction.]]></description>
          <long-description><![CDATA[<p>Modify the timeout value that is associated with transactions started by
the current application with the begin() method. If not explicitly set,
the transaction service uses some default value for the transaction
timeout.</p>]]></long-description>
          <tag line="120" name="param" description="The value of the timeout in seconds. If the value is zero, the transaction service restores the default value. If the value is negative a RepositoryException is thrown." type="int" variable="$seconds">
            <type by_reference="false">int</type>
          </tag>
          <tag line="120" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="120" name="throws" description="Thrown if the transaction&#10;     implementation encounters an unexpected error condition." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$seconds</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr/src/PHPCR/Transaction/UserTransactionInterface.php</error>
    </parse_markers>
  </file>
  <file path="phpcr/src/PHPCR/InvalidLifecycleTransitionException.php" hash="943cc4e4f4362ae39e7adf7182be70f9" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>InvalidLifecycleTransitionException</name>
      <full_name>\PHPCR\InvalidLifecycleTransitionException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by Lifecycle management-related methods.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/MergeException.php" hash="e54410a5ccc537179cab0d80689f0778" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>MergeException</name>
      <full_name>\PHPCR\MergeException</full_name>
      <docblock line="27">
        <description><![CDATA[Exception thrown by NodeInterface::merge()]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr/src/PHPCR/UnsupportedRepositoryOperationException.php" hash="fc14a73c317550359cc2937086e913ef" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR" line="34" package="phpcr\exceptions">
      <extends>\PHPCR\RepositoryException</extends>
      <name>UnsupportedRepositoryOperationException</name>
      <full_name>\PHPCR\UnsupportedRepositoryOperationException</full_name>
      <docblock line="27">
        <description><![CDATA[Thrown by methods that are not supported by a particular implementation.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="exceptions"/>
        <tag line="27" name="api" description=""/>
      </docblock>
    </class>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/TreeWalkerFilterInterface.php" hash="c161517736ee366566db24ab9a247ff1" package="Default">
    <namespace-alias name="ItemInterface">PHPCR\ItemInterface</namespace-alias>
    <interface namespace="PHPCR\Util" line="10" package="Default">
      <name>TreeWalkerFilterInterface</name>
      <full_name>\PHPCR\Util\TreeWalkerFilterInterface</full_name>
      <docblock line="7">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="7" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util" line="12" package="Default">
        <name>mustVisit</name>
        <full_name>mustVisit</full_name>
        <argument line="12">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
    </interface>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/TreeWalkerFilterInterface.php</error>
      <error line="12" code="50010">No DocBlock was found for method mustVisit()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Helper/ConsoleParametersParser.php" hash="510819a9a1654d6de6267513976c5e39" package="Default">
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Helper" line="8" package="Default">
      <extends/>
      <name>ConsoleParametersParser</name>
      <full_name>\PHPCR\Util\Console\Helper\ConsoleParametersParser</full_name>
      <docblock line="5">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="5" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Util\Console\Helper" line="16" package="Default">
        <name>isTrueString</name>
        <full_name>isTrueString</full_name>
        <docblock line="10">
          <description><![CDATA[Return true if $value is a string that can be considered as true.]]></description>
          <long-description><![CDATA[<p>I.e. if it is case insensitively "true" or "yes".</p>]]></long-description>
          <tag line="10" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="10" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Util\Console\Helper" line="28" package="Default">
        <name>isFalseString</name>
        <full_name>isFalseString</full_name>
        <docblock line="22">
          <description><![CDATA[Return true if $value is a string that can be considered as false.]]></description>
          <long-description><![CDATA[<p>I.e. if it is case insensitively "false" or "no".</p>]]></long-description>
          <tag line="22" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Helper/ConsoleParametersParser.php</error>
      <critical line="5" code="50005">No short description for class \PHPCR\Util\Console\Helper\ConsoleParametersParser</critical>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Helper/PhpcrHelper.php" hash="b6e8e4ce37061de2da7cbc5825df2c5d" package="Default">
    <namespace-alias name="Helper">Symfony\Component\Console\Helper\Helper</namespace-alias>
    <namespace-alias name="SessionInterface">PHPCR\SessionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Helper" line="11" package="Default">
      <extends>\Symfony\Component\Console\Helper\Helper</extends>
      <name>PhpcrHelper</name>
      <full_name>\PHPCR\Util\Console\Helper\PhpcrHelper</full_name>
      <docblock line="8">
        <description><![CDATA[Helper class to make the session instance available to console command]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="16" namespace="PHPCR\Util\Console\Helper" package="Default">
        <name>$session</name>
        <default><![CDATA[]]></default>
        <docblock line="13">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="var" description="" type="\PHPCR\SessionInterface">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper" line="23" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="18">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="the session to use in commands" type="\PHPCR\SessionInterface" variable="$session">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$session</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\SessionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper" line="28" package="Default">
        <name>getSession</name>
        <full_name>getSession</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper" line="33" package="Default">
        <name>getName</name>
        <full_name>getName</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Helper/PhpcrHelper.php</error>
      <critical line="13" code="50019">No short description for property $session</critical>
      <error line="28" code="50010">No DocBlock was found for method getSession()</error>
      <error line="33" code="50010">No DocBlock was found for method getName()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Helper/TreeDumper/ConsoleDumperNodeVisitor.php" hash="8140bb9583e24af72f57812ec3bd222a" package="Default">
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <namespace-alias name="ItemVisitorInterface">PHPCR\ItemVisitorInterface</namespace-alias>
    <namespace-alias name="ItemInterface">PHPCR\ItemInterface</namespace-alias>
    <namespace-alias name="NodeInterface">PHPCR\NodeInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="14" package="Default">
      <extends/>
      <implements>\PHPCR\ItemVisitorInterface</implements>
      <name>ConsoleDumperNodeVisitor</name>
      <full_name>\PHPCR\Util\Console\Helper\TreeDumper\ConsoleDumperNodeVisitor</full_name>
      <docblock line="10">
        <description><![CDATA[TODO: this should base on the TraversingItemVisitor]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="10" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="16" namespace="PHPCR\Util\Console\Helper\TreeDumper" package="Default">
        <name>$output</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="18" namespace="PHPCR\Util\Console\Helper\TreeDumper" package="Default">
        <name>$level</name>
        <default><![CDATA[0]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="20" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="20">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="25" package="Default">
        <name>setLevel</name>
        <full_name>setLevel</full_name>
        <argument line="25">
          <name>$level</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="30" package="Default">
        <name>visit</name>
        <full_name>visit</full_name>
        <argument line="30">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Helper/TreeDumper/ConsoleDumperNodeVisitor.php</error>
      <error line="16" code="50018">No DocBlock was found for property $output</error>
      <error line="18" code="50018">No DocBlock was found for property $level</error>
      <error line="20" code="50010">No DocBlock was found for method __construct()</error>
      <error line="25" code="50010">No DocBlock was found for method setLevel()</error>
      <error line="30" code="50010">No DocBlock was found for method visit()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Helper/TreeDumper/SystemNodeFilter.php" hash="2fdea4aadf087ccb23a606d028e5889f" package="Default">
    <namespace-alias name="ItemInterface">PHPCR\ItemInterface</namespace-alias>
    <namespace-alias name="TreeWalkerFilterInterface">PHPCR\Util\TreeWalkerFilterInterface</namespace-alias>
    <namespace-alias name="NodeHelper">PHPCR\Util\NodeHelper</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="14" package="Default">
      <extends/>
      <implements>\PHPCR\Util\TreeWalkerFilterInterface</implements>
      <name>SystemNodeFilter</name>
      <full_name>\PHPCR\Util\Console\Helper\TreeDumper\SystemNodeFilter</full_name>
      <docblock line="9">
        <description><![CDATA[Filter system properties and nodes based on their name.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="16" package="Default">
        <name>mustVisit</name>
        <full_name>mustVisit</full_name>
        <argument line="16">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Helper/TreeDumper/SystemNodeFilter.php</error>
      <error line="16" code="50010">No DocBlock was found for method mustVisit()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Helper/TreeDumper/ConsoleDumperPropertyVisitor.php" hash="6f821191d9e36d54b2f43db6c89f91cb" package="Default">
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <namespace-alias name="ItemVisitorInterface">PHPCR\ItemVisitorInterface</namespace-alias>
    <namespace-alias name="ItemInterface">PHPCR\ItemInterface</namespace-alias>
    <namespace-alias name="PropertyInterface">PHPCR\PropertyInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="16" package="Default">
      <extends/>
      <implements>\PHPCR\ItemVisitorInterface</implements>
      <name>ConsoleDumperPropertyVisitor</name>
      <full_name>\PHPCR\Util\Console\Helper\TreeDumper\ConsoleDumperPropertyVisitor</full_name>
      <docblock line="11">
        <description><![CDATA[TODO: this should base on the TraversingItemVisitor]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="11" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="18" namespace="PHPCR\Util\Console\Helper\TreeDumper" package="Default">
        <name>$output</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="20" namespace="PHPCR\Util\Console\Helper\TreeDumper" package="Default">
        <name>$level</name>
        <default><![CDATA[0]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="22" namespace="PHPCR\Util\Console\Helper\TreeDumper" package="Default">
        <name>$maxLineLength</name>
        <default><![CDATA[120]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="24" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="24">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
        <argument line="24">
          <name>$maxLineLength</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="33" package="Default">
        <name>setLevel</name>
        <full_name>setLevel</full_name>
        <argument line="33">
          <name>$level</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Helper\TreeDumper" line="38" package="Default">
        <name>visit</name>
        <full_name>visit</full_name>
        <argument line="38">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Helper/TreeDumper/ConsoleDumperPropertyVisitor.php</error>
      <error line="18" code="50018">No DocBlock was found for property $output</error>
      <error line="20" code="50018">No DocBlock was found for property $level</error>
      <error line="22" code="50018">No DocBlock was found for property $maxLineLength</error>
      <error line="24" code="50010">No DocBlock was found for method __construct()</error>
      <error line="33" code="50010">No DocBlock was found for method setLevel()</error>
      <error line="38" code="50010">No DocBlock was found for method visit()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Command/ImportXmlCommand.php" hash="0aadeb04beec87f626d6daecda35b21c" package="Default">
    <namespace-alias name="Command">Symfony\Component\Console\Command\Command</namespace-alias>
    <namespace-alias name="InputArgument">Symfony\Component\Console\Input\InputArgument</namespace-alias>
    <namespace-alias name="InputInterface">Symfony\Component\Console\Input\InputInterface</namespace-alias>
    <namespace-alias name="InputOption">Symfony\Component\Console\Input\InputOption</namespace-alias>
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <namespace-alias name="RepositoryInterface">PHPCR\RepositoryInterface</namespace-alias>
    <namespace-alias name="ImportUUIDBehaviorInterface">PHPCR\ImportUUIDBehaviorInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Command" line="14" package="Default">
      <extends>\Symfony\Component\Console\Command\Command</extends>
      <name>ImportXmlCommand</name>
      <full_name>\PHPCR\Util\Console\Command\ImportXmlCommand</full_name>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="19" package="Default">
        <name>configure</name>
        <full_name>configure</full_name>
        <docblock line="16">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="see" description="\Symfony\Component\Console\Command\Command" refers="\Symfony\Component\Console\Command\Command"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="51" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="43">
          <description><![CDATA[Executes the current command.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="An InputInterface instance" type="\Symfony\Component\Console\Input\InputInterface" variable="$input">
            <type by_reference="false">\Symfony\Component\Console\Input\InputInterface</type>
          </tag>
          <tag line="43" name="param" description="An OutputInterface instance" type="\Symfony\Component\Console\Output\OutputInterface" variable="$output">
            <type by_reference="false">\Symfony\Component\Console\Output\OutputInterface</type>
          </tag>
          <tag line="43" name="return" description="0 if everything went fine, or an error code" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Input\InputInterface</type>
        </argument>
        <argument line="51">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Command/ImportXmlCommand.php</error>
      <error line="14" code="50000">No DocBlock was found for \PHPCR\Util\Console\Command\ImportXmlCommand</error>
      <error line="16" code="50012">No short description for method configure()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Command/PurgeCommand.php" hash="a506c02cfc0f49e7f634ee7758bdd2c2" package="Default">
    <namespace-alias name="Command">Symfony\Component\Console\Command\Command</namespace-alias>
    <namespace-alias name="InputOption">Symfony\Component\Console\Input\InputOption</namespace-alias>
    <namespace-alias name="InputInterface">Symfony\Component\Console\Input\InputInterface</namespace-alias>
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <namespace-alias name="DialogHelper">Symfony\Component\Console\Helper\DialogHelper</namespace-alias>
    <namespace-alias name="NodeHelper">PHPCR\Util\NodeHelper</namespace-alias>
    <namespace-alias name="ConsoleParametersParser">PHPCR\Util\Console\Helper\ConsoleParametersParser</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Command" line="17" package="Default">
      <extends>\Symfony\Component\Console\Command\Command</extends>
      <name>PurgeCommand</name>
      <full_name>\PHPCR\Util\Console\Command\PurgeCommand</full_name>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="19" package="Default">
        <name>configure</name>
        <full_name>configure</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="42" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="34">
          <description><![CDATA[Executes the current command.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="An InputInterface instance" type="\Symfony\Component\Console\Input\InputInterface" variable="$input">
            <type by_reference="false">\Symfony\Component\Console\Input\InputInterface</type>
          </tag>
          <tag line="34" name="param" description="An OutputInterface instance" type="\Symfony\Component\Console\Output\OutputInterface" variable="$output">
            <type by_reference="false">\Symfony\Component\Console\Output\OutputInterface</type>
          </tag>
          <tag line="34" name="return" description="0 if everything went fine, or an error code" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Input\InputInterface</type>
        </argument>
        <argument line="42">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="50">output server and workspace name</todo>
    </markers>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Command/PurgeCommand.php</error>
      <critical line="14" code="50005">No short description for class \PHPCR\Util\Console\Command\PurgeCommand</critical>
      <error line="19" code="50010">No DocBlock was found for method configure()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Command/QueryCommand.php" hash="6a36c09f481e33b79789353e44a02fde" package="Default">
    <namespace-alias name="Command">Symfony\Component\Console\Command\Command</namespace-alias>
    <namespace-alias name="InputOption">Symfony\Component\Console\Input\InputOption</namespace-alias>
    <namespace-alias name="InputArgument">Symfony\Component\Console\Input\InputArgument</namespace-alias>
    <namespace-alias name="InputInterface">Symfony\Component\Console\Input\InputInterface</namespace-alias>
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <namespace-alias name="NodeHelper">PHPCR\Util\NodeHelper</namespace-alias>
    <namespace-alias name="TreeWalker">PHPCR\Util\TreeWalker</namespace-alias>
    <namespace-alias name="ConsoleDumperNodeVisitor">PHPCR\Util\Console\Helper\TreeDumper\ConsoleDumperNodeVisitor</namespace-alias>
    <namespace-alias name="ConsoleDumperPropertyVisitor">PHPCR\Util\Console\Helper\TreeDumper\ConsoleDumperPropertyVisitor</namespace-alias>
    <namespace-alias name="SystemNodeFilter">PHPCR\Util\Console\Helper\TreeDumper\SystemNodeFilter</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Command" line="20" package="Default">
      <extends>\Symfony\Component\Console\Command\Command</extends>
      <name>QueryCommand</name>
      <full_name>\PHPCR\Util\Console\Command\QueryCommand</full_name>
      <docblock line="17">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="17" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="25" package="Default">
        <name>configure</name>
        <full_name>configure</full_name>
        <docblock line="22">
          <description><![CDATA[Configures the current command.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="44" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="36">
          <description><![CDATA[Executes the current command.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="An InputInterface instance" type="\Symfony\Component\Console\Input\InputInterface" variable="$input">
            <type by_reference="false">\Symfony\Component\Console\Input\InputInterface</type>
          </tag>
          <tag line="36" name="param" description="An OutputInterface instance" type="\Symfony\Component\Console\Output\OutputInterface" variable="$output">
            <type by_reference="false">\Symfony\Component\Console\Output\OutputInterface</type>
          </tag>
          <tag line="36" name="return" description="0 if everything went fine, or an error code" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Input\InputInterface</type>
        </argument>
        <argument line="44">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Command/QueryCommand.php</error>
      <critical line="17" code="50005">No short description for class \PHPCR\Util\Console\Command\QueryCommand</critical>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Command/RegisterNodeTypesCommand.php" hash="2931eb0dae315c1e9a8e8650cf2d2a49" package="Default">
    <namespace-alias name="InputArgument">Symfony\Component\Console\Input\InputArgument</namespace-alias>
    <namespace-alias name="InputOption">Symfony\Component\Console\Input\InputOption</namespace-alias>
    <namespace-alias name="Command">Symfony\Component\Console\Command\Command</namespace-alias>
    <namespace-alias name="InputInterface">Symfony\Component\Console\Input\InputInterface</namespace-alias>
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <namespace-alias name="SessionInterface">PHPCR\SessionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Command" line="21" package="Default">
      <extends>\Symfony\Component\Console\Command\Command</extends>
      <name>RegisterNodeTypesCommand</name>
      <full_name>\PHPCR\Util\Console\Command\RegisterNodeTypesCommand</full_name>
      <docblock line="13">
        <description><![CDATA[Command to load and register a node type defined in a CND file.]]></description>
        <long-description><![CDATA[<p>See the link below for the cnd definition.</p>]]></long-description>
        <tag line="13" name="link" description="http://jackrabbit.apache.org/node-type-notation.html" link="http://jackrabbit.apache.org/node-type-notation.html"/>
        <tag line="13" name="author" description="Uwe Jäger &lt;uwej711@googlemail.com&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="26" package="Default">
        <name>configure</name>
        <full_name>configure</full_name>
        <docblock line="23">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="see" description="\Symfony\Component\Console\Command\Command" refers="\Symfony\Component\Console\Command\Command"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="57" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="54">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="see" description="\Symfony\Component\Console\Command\Command" refers="\Symfony\Component\Console\Command\Command"/>
        </docblock>
        <argument line="57">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Input\InputInterface</type>
        </argument>
        <argument line="57">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="89" package="Default">
        <name>updateFromCnd</name>
        <full_name>updateFromCnd</full_name>
        <docblock line="80">
          <description><![CDATA[Actually do the update.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="the phpcr session to talk to" type="\PHPCR\SessionInterface" variable="$session">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
          <tag line="80" name="param" description="the compact namespace and node type definition in string form" type="string" variable="$cnd">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="throws" description="if the node already exists and allowUpdate is false" type="\PHPCR\NodeType\NodeTypeExistsException">
            <type by_reference="false">\PHPCR\NodeType\NodeTypeExistsException</type>
          </tag>
          <tag line="80" name="throws" description="on other errors" type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Input\InputInterface</type>
        </argument>
        <argument line="89">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
        <argument line="89">
          <name>$session</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\SessionInterface</type>
        </argument>
        <argument line="89">
          <name>$cnd</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="89">
          <name>$allowUpdate</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Command/RegisterNodeTypesCommand.php</error>
      <error line="23" code="50012">No short description for method configure()</error>
      <error line="54" code="50012">No short description for method execute()</error>
      <error line="54" code="50015">Argument $input is missing from the Docblock of execute()</error>
      <error line="54" code="50015">Argument $output is missing from the Docblock of execute()</error>
      <error line="80" code="50014">Name of argument $input does not match with the DocBlock's name $session in updateFromCnd()</error>
      <error line="80" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $input in updateFromCnd()</error>
      <error line="80" code="50014">Name of argument $output does not match with the DocBlock's name $cnd in updateFromCnd()</error>
      <error line="80" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $output in updateFromCnd()</error>
      <error line="80" code="50015">Argument $session is missing from the Docblock of updateFromCnd()</error>
      <error line="80" code="50015">Argument $cnd is missing from the Docblock of updateFromCnd()</error>
      <error line="80" code="50015">Argument $allowUpdate is missing from the Docblock of updateFromCnd()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Command/DumpCommand.php" hash="19f8d3e8465fbda521d7407ee9be1221" package="Default">
    <namespace-alias name="Command">Symfony\Component\Console\Command\Command</namespace-alias>
    <namespace-alias name="InputArgument">Symfony\Component\Console\Input\InputArgument</namespace-alias>
    <namespace-alias name="InputOption">Symfony\Component\Console\Input\InputOption</namespace-alias>
    <namespace-alias name="InputInterface">Symfony\Component\Console\Input\InputInterface</namespace-alias>
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <namespace-alias name="TreeWalker">PHPCR\Util\TreeWalker</namespace-alias>
    <namespace-alias name="ConsoleParametersParser">PHPCR\Util\Console\Helper\ConsoleParametersParser</namespace-alias>
    <namespace-alias name="ConsoleDumperNodeVisitor">PHPCR\Util\Console\Helper\TreeDumper\ConsoleDumperNodeVisitor</namespace-alias>
    <namespace-alias name="ConsoleDumperPropertyVisitor">PHPCR\Util\Console\Helper\TreeDumper\ConsoleDumperPropertyVisitor</namespace-alias>
    <namespace-alias name="SystemNodeFilter">PHPCR\Util\Console\Helper\TreeDumper\SystemNodeFilter</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Command" line="21" package="Default">
      <extends>\Symfony\Component\Console\Command\Command</extends>
      <name>DumpCommand</name>
      <full_name>\PHPCR\Util\Console\Command\DumpCommand</full_name>
      <docblock line="18">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="18" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" namespace="PHPCR\Util\Console\Command" package="Default">
        <name>$dump_max_line_length</name>
        <default><![CDATA[120]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="28" package="Default">
        <name>configure</name>
        <full_name>configure</full_name>
        <docblock line="25">
          <description><![CDATA[Configures the current command.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\Console\Command" line="54" package="Default">
        <name>setDumpMaxLineLength</name>
        <full_name>setDumpMaxLineLength</full_name>
        <docblock line="51">
          <description><![CDATA[Change at which length lines in the dump get cut.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="54">
          <name>$length</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="67" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="59">
          <description><![CDATA[Executes the dump command.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="An InputInterface instance" type="\Symfony\Component\Console\Input\InputInterface" variable="$input">
            <type by_reference="false">\Symfony\Component\Console\Input\InputInterface</type>
          </tag>
          <tag line="59" name="param" description="An OutputInterface instance" type="\Symfony\Component\Console\Output\OutputInterface" variable="$output">
            <type by_reference="false">\Symfony\Component\Console\Output\OutputInterface</type>
          </tag>
          <tag line="59" name="return" description="0 if everything went fine, or an error code" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Input\InputInterface</type>
        </argument>
        <argument line="67">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="34">implement -&gt;addOption('recurse', null, InputOption::VALUE_OPTIONAL, 'Set to a number to limit how deep into the tree to recurse', "-1")</todo>
    </markers>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Command/DumpCommand.php</error>
      <critical line="18" code="50005">No short description for class \PHPCR\Util\Console\Command\DumpCommand</critical>
      <error line="23" code="50018">No DocBlock was found for property $dump_max_line_length</error>
      <error line="51" code="50015">Argument $length is missing from the Docblock of setDumpMaxLineLength()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/Console/Command/CreateWorkspaceCommand.php" hash="5cd44fdd02a0778a7e0df98c92e96736" package="Default">
    <namespace-alias name="Command">Symfony\Component\Console\Command\Command</namespace-alias>
    <namespace-alias name="InputArgument">Symfony\Component\Console\Input\InputArgument</namespace-alias>
    <namespace-alias name="InputInterface">Symfony\Component\Console\Input\InputInterface</namespace-alias>
    <namespace-alias name="OutputInterface">Symfony\Component\Console\Output\OutputInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\Console\Command" line="16" package="Default">
      <extends>\Symfony\Component\Console\Command\Command</extends>
      <name>CreateWorkspaceCommand</name>
      <full_name>\PHPCR\Util\Console\Command\CreateWorkspaceCommand</full_name>
      <docblock line="10">
        <description><![CDATA[A command to create a workspace in the phcpr repository]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="10" name="author" description="Lukas"/>
        <tag line="10" name="author" description="David Buchmann &lt;david@liip.ch&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="21" package="Default">
        <name>configure</name>
        <full_name>configure</full_name>
        <docblock line="18">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="see" description="\Symfony\Component\Console\Command\Command" refers="\Symfony\Component\Console\Command\Command"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\Console\Command" line="39" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="see" description="\Symfony\Component\Console\Command\Command" refers="\Symfony\Component\Console\Command\Command"/>
        </docblock>
        <argument line="39">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Input\InputInterface</type>
        </argument>
        <argument line="39">
          <name>$output</name>
          <default><![CDATA[]]></default>
          <type>\Symfony\Component\Console\Output\OutputInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/Console/Command/CreateWorkspaceCommand.php</error>
      <error line="18" code="50012">No short description for method configure()</error>
      <error line="36" code="50012">No short description for method execute()</error>
      <error line="36" code="50015">Argument $input is missing from the Docblock of execute()</error>
      <error line="36" code="50015">Argument $output is missing from the Docblock of execute()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/UUIDHelper.php" hash="4e6328f08e99ef668adbe965a83bb7ea" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPCR\Util" line="30" package="Default">
      <extends/>
      <name>UUIDHelper</name>
      <full_name>\PHPCR\Util\UUIDHelper</full_name>
      <docblock line="27">
        <description><![CDATA[static helper functions to deal with UUID's]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Util" line="38" package="Default">
        <name>isUUID</name>
        <full_name>isUUID</full_name>
        <docblock line="32">
          <description><![CDATA[Checks if the string could be a uuid.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="Possible uuid" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="return" description="True if the test was passed, else false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Util" line="53" package="Default">
        <name>generateUUID</name>
        <full_name>generateUUID</full_name>
        <docblock line="48">
          <description><![CDATA[Generates a UUID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/TreeWalker.php" hash="3ab1b96a92f489e05f56cb7e329415a4" package="Default">
    <namespace-alias name="ItemVisitorInterface">PHPCR\ItemVisitorInterface</namespace-alias>
    <namespace-alias name="NodeInterface">PHPCR\NodeInterface</namespace-alias>
    <namespace-alias name="PropertyInterface">PHPCR\PropertyInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util" line="14" package="Default">
      <extends/>
      <name>TreeWalker</name>
      <full_name>\PHPCR\Util\TreeWalker</full_name>
      <docblock line="9">
        <description><![CDATA[TODO: this should base on the TraversingItemVisitor]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="19" namespace="PHPCR\Util" package="Default">
        <name>$nodeVisitor</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="\PHPCR\ItemVisitorInterface">
            <type by_reference="false">\PHPCR\ItemVisitorInterface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="24" namespace="PHPCR\Util" package="Default">
        <name>$propertyVisitor</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="\PHPCR\ItemVisitorInterface">
            <type by_reference="false">\PHPCR\ItemVisitorInterface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="29" namespace="PHPCR\Util" package="Default">
        <name>$nodeFilters</name>
        <default><![CDATA[array()]]></default>
        <docblock line="26">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\PHPCR\Util\array()">
            <type by_reference="false">\PHPCR\Util\array()</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" namespace="PHPCR\Util" package="Default">
        <name>$propertyFilters</name>
        <default><![CDATA[array()]]></default>
        <docblock line="31">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\PHPCR\Util\array()">
            <type by_reference="false">\PHPCR\Util\array()</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util" line="40" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="The visitor for the nodes" type="\PHPCR\ItemVisitorInterface" variable="$nodeVisitor">
            <type by_reference="false">\PHPCR\ItemVisitorInterface</type>
          </tag>
          <tag line="36" name="param" description="The visitor for the nodes properties" type="\PHPCR\ItemVisitorInterface" variable="$propertyVisitor">
            <type by_reference="false">\PHPCR\ItemVisitorInterface</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$nodeVisitor</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemVisitorInterface</type>
        </argument>
        <argument line="40">
          <name>$propertyVisitor</name>
          <default><![CDATA[null]]></default>
          <type>\PHPCR\ItemVisitorInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util" line="50" package="Default">
        <name>addNodeFilter</name>
        <full_name>addNodeFilter</full_name>
        <docblock line="46">
          <description><![CDATA[Add a filter to select the nodes that will be traversed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\PHPCR\Util\TreeWalkerFilterInterface" variable="$filter">
            <type by_reference="false">\PHPCR\Util\TreeWalkerFilterInterface</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$filter</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Util\TreeWalkerFilterInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util" line="61" package="Default">
        <name>addPropertyFilter</name>
        <full_name>addPropertyFilter</full_name>
        <docblock line="57">
          <description><![CDATA[Add a filter to select the properties that will be traversed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="\PHPCR\Util\TreeWalkerFilterInterface" variable="$filter">
            <type by_reference="false">\PHPCR\Util\TreeWalkerFilterInterface</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$filter</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Util\TreeWalkerFilterInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util" line="73" package="Default">
        <name>mustVisitNode</name>
        <full_name>mustVisitNode</full_name>
        <docblock line="68">
          <description><![CDATA[Return whether a node must be traversed or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="\PHPCR\NodeInterface" variable="$node">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="68" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\NodeInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util" line="89" package="Default">
        <name>mustVisitProperty</name>
        <full_name>mustVisitProperty</full_name>
        <docblock line="84">
          <description><![CDATA[Return whether a node property must be traversed or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="" type="\PHPCR\PropertyInterface" variable="$property">
            <type by_reference="false">\PHPCR\PropertyInterface</type>
          </tag>
          <tag line="84" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\PropertyInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util" line="105" package="Default">
        <name>traverse</name>
        <full_name>traverse</full_name>
        <docblock line="100">
          <description><![CDATA[Traverse a node]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="" type="\PHPCR\NodeInterface" variable="$node">
            <type by_reference="false">\PHPCR\NodeInterface</type>
          </tag>
          <tag line="100" name="param" description="Recursion level" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$node</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\NodeInterface</type>
        </argument>
        <argument line="105">
          <name>$level</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/TreeWalker.php</error>
      <critical line="16" code="50019">No short description for property $nodeVisitor</critical>
      <critical line="21" code="50019">No short description for property $propertyVisitor</critical>
      <critical line="26" code="50019">No short description for property $nodeFilters</critical>
      <critical line="31" code="50019">No short description for property $propertyFilters</critical>
      <error line="36" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/Sql2Generator.php" hash="5f05abb5c763ca367878510866c6158c" package="Default">
    <namespace-alias name="QOM">PHPCR\Query\QOM</namespace-alias>
    <namespace-alias name="Constants">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="13" package="Default">
      <extends>\PHPCR\Util\QOM\BaseSqlGenerator</extends>
      <name>Sql2Generator</name>
      <full_name>\PHPCR\Util\QOM\Sql2Generator</full_name>
      <docblock line="8">
        <description><![CDATA[Generate SQL2 statements]]></description>
        <long-description><![CDATA[<p>TODO: is eval... the best name for the functions here?</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="23" package="Default">
        <name>evalSelector</name>
        <full_name>evalSelector</full_name>
        <docblock line="15">
          <description><![CDATA[Selector ::= nodeTypeName ['AS' selectorName]
nodeTypeName ::= Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="param" description="The node type of the selector. If it does not contain starting and ending brackets ([]) they will be added automatically" type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="15" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="15" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="50" package="Default">
        <name>evalJoin</name>
        <full_name>evalJoin</full_name>
        <docblock line="38">
          <description><![CDATA[Join ::= left [JoinType] 'JOIN' right 'ON' JoinCondition
   // If JoinType is omitted INNER is assumed.]]></description>
          <long-description><![CDATA[<p>left ::= Source
right ::= Source</p>]]></long-description>
          <tag line="38" name="param" description="" type="string" variable="$left">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="" type="string" variable="$right">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="" type="string" variable="$joinCondition">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="" type="string" variable="$joinType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$left</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$right</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$joinCondition</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$joinType</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="64" package="Default">
        <name>evalJoinType</name>
        <full_name>evalJoinType</full_name>
        <docblock line="55">
          <description><![CDATA[JoinType ::= Inner | LeftOuter | RightOuter
Inner ::= 'INNER'
LeftOuter ::= 'LEFT OUTER'
RightOuter ::= 'RIGHT OUTER']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="string" variable="$joinType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$joinType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="92" package="Default">
        <name>evalEquiJoinCondition</name>
        <full_name>evalEquiJoinCondition</full_name>
        <docblock line="78">
          <description><![CDATA[EquiJoinCondition ::= selector1Name'.'property1Name '='
                      selector2Name'.'property2Name
  selector1Name ::= selectorName
  selector2Name ::= selectorName
  property1Name ::= propertyName
  property2Name ::= propertyName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="param" description="" type="string" variable="$sel1Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="param" description="" type="string" variable="$prop1Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="param" description="" type="string" variable="$sel2Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="param" description="" type="string" variable="$prop2Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$sel1Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="92">
          <name>$prop1Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="92">
          <name>$sel2Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="92">
          <name>$prop2Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="109" package="Default">
        <name>evalSameNodeJoinCondition</name>
        <full_name>evalSameNodeJoinCondition</full_name>
        <docblock line="97">
          <description><![CDATA[SameNodeJoinCondition ::=
  'ISSAMENODE(' selector1Name ','
                 selector2Name
                 [',' selector2Path] ')'
  selector2Path ::= Path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="" type="string" variable="$sel1Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="param" description="" type="string" variable="$sel2Name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="param" description="" type="string" variable="$sel2path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$sel1Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="109">
          <name>$sel2Name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="109">
          <name>$sel2Path</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="129" package="Default">
        <name>evalChildNodeJoinCondition</name>
        <full_name>evalChildNodeJoinCondition</full_name>
        <docblock line="118">
          <description><![CDATA[ChildNodeJoinCondition ::=
  'ISCHILDNODE(' childSelectorName ','
                 parentSelectorName ')'
  childSelectorName ::= selectorName
  parentSelectorName ::= selectorName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="" type="string" variable="$childSelectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="param" description="" type="string" variable="$parentSelectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$childSelectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="129">
          <name>$parentSelectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="145" package="Default">
        <name>evalDescendantNodeJoinCondition</name>
        <full_name>evalDescendantNodeJoinCondition</full_name>
        <docblock line="134">
          <description><![CDATA[DescendantNodeJoinCondition ::=
  'ISDESCENDANTNODE(' descendantSelectorName ','
                      ancestorSelectorName ')'
  descendantSelectorName ::= selectorName
  ancestorSelectorName ::= selectorName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="134" name="param" description="" type="string" variable="$descendantSelectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="param" description="" type="string" variable="$ancestorselectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$descendantSelectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="145">
          <name>$ancestorselectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="156" package="Default">
        <name>evalSameNode</name>
        <full_name>evalSameNode</full_name>
        <docblock line="150">
          <description><![CDATA[SameNode ::= 'ISSAMENODE(' [selectorName ','] Path ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="156">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="171" package="Default">
        <name>evalChildNode</name>
        <full_name>evalChildNode</full_name>
        <docblock line="165">
          <description><![CDATA[SameNode ::= 'ISCHILDNODE(' [selectorName ','] Path ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="165" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="171">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="186" package="Default">
        <name>evalDescendantNode</name>
        <full_name>evalDescendantNode</full_name>
        <docblock line="180">
          <description><![CDATA[SameNode ::= 'ISDESCENDANTNODE(' [selectorName ','] Path ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="180" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="180" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="186">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="186">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="195" package="Default">
        <name>evalPropertyExistence</name>
        <full_name>evalPropertyExistence</full_name>
        <argument line="195">
          <name>$selectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="195">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="211" package="Default">
        <name>evalFullTextSearch</name>
        <full_name>evalFullTextSearch</full_name>
        <docblock line="200">
          <description><![CDATA[FullTextSearch ::=
      'CONTAINS(' ([selectorName'.']propertyName |
                   selectorName'.*') ','
                   FullTextSearchExpression ')'
FullTextSearchExpression ::= BindVariable | ''' FullTextSearchLiteral ''']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="200" name="param" description="unusued" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="200" name="param" description="" type="string" variable="$searchExpression">
            <type by_reference="false">string</type>
          </tag>
          <tag line="200" name="param" description="" type="string" variable="$ropertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="200" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$selectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="211">
          <name>$searchExpression</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="211">
          <name>$propertyName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="228" package="Default">
        <name>evalLength</name>
        <full_name>evalLength</full_name>
        <docblock line="222">
          <description><![CDATA[Length ::= 'LENGTH(' PropertyValue ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="222" name="param" description="" type="string" variable="$propertyValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="222" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="228">
          <name>$propertyValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="238" package="Default">
        <name>evalNodeName</name>
        <full_name>evalNodeName</full_name>
        <docblock line="233">
          <description><![CDATA[NodeName ::= 'NAME(' [selectorName] ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="233" name="param" description="" type="string" variable="$selectorValue">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$selectorValue</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="248" package="Default">
        <name>evalNodeLocalName</name>
        <full_name>evalNodeLocalName</full_name>
        <docblock line="243">
          <description><![CDATA[NodeLocalName ::= 'LOCALNAME(' [selectorName] ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="243" name="param" description="" type="string" variable="$selectorValue">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="248">
          <name>$selectorValue</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="258" package="Default">
        <name>evalFullTextSearchScore</name>
        <full_name>evalFullTextSearchScore</full_name>
        <docblock line="253">
          <description><![CDATA[FullTextSearchScore ::= 'SCORE(' [selectorName] ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="253" name="param" description="" type="string" variable="$selectorValue">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="258">
          <name>$selectorValue</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="269" package="Default">
        <name>evalPropertyValue</name>
        <full_name>evalPropertyValue</full_name>
        <docblock line="263">
          <description><![CDATA[PropertyValue ::= [selectorName'.'] propertyName     // If only one selector exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="263" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="263" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="269">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="269">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="283" package="Default">
        <name>evalColumns</name>
        <full_name>evalColumns</full_name>
        <argument line="283">
          <name>$columns</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="301" package="Default">
        <name>evalColumn</name>
        <full_name>evalColumn</full_name>
        <argument line="301">
          <name>$selectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="301">
          <name>$propertyName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="301">
          <name>$colname</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="322" package="Default">
        <name>evalPath</name>
        <full_name>evalPath</full_name>
        <docblock line="314">
          <description><![CDATA[Path ::= '[' quotedPath ']' | '[' simplePath ']' | simplePath
quotedPath ::= A JCR Path that contains non-SQL-legal characters
simplePath ::= A JCR Name that contains only SQL-legal characters]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="314" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="314" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="322">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="339" package="Default">
        <name>evalCastLiteral</name>
        <full_name>evalCastLiteral</full_name>
        <docblock line="335">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="335" name="param" description="" type="string" variable="$literal">
            <type by_reference="false">string</type>
          </tag>
          <tag line="335" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="339">
          <name>$literal</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="339">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="PHPCR\Util\QOM" line="344" package="Default">
        <name>qualifyProperty</name>
        <full_name>qualifyProperty</full_name>
        <argument line="344">
          <name>$selectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="344">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/Sql2Generator.php</error>
      <error line="97" code="50014">Name of argument $sel2Path does not match with the DocBlock's name $sel2path in evalSameNodeJoinCondition()</error>
      <notice line="97" code="50013">Parameter $sel2path could not be found in evalSameNodeJoinCondition()</notice>
      <error line="195" code="50010">No DocBlock was found for method evalPropertyExistence()</error>
      <error line="200" code="50014">Name of argument $propertyName does not match with the DocBlock's name $ropertyName in evalFullTextSearch()</error>
      <notice line="200" code="50013">Parameter $ropertyName could not be found in evalFullTextSearch()</notice>
      <error line="283" code="50010">No DocBlock was found for method evalColumns()</error>
      <error line="301" code="50010">No DocBlock was found for method evalColumn()</error>
      <error line="335" code="50012">No short description for method evalCastLiteral()</error>
      <error line="344" code="50010">No DocBlock was found for method qualifyProperty()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/BaseSqlGenerator.php" hash="42f7560bb0226766dd1efef625720bc4" package="Default">
    <namespace-alias name="QOM">PHPCR\Query\QOM</namespace-alias>
    <namespace-alias name="Constants">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <namespace-alias name="PropertyType">PHPCR\PropertyType</namespace-alias>
    <class final="true" abstract="true" namespace="PHPCR\Util\QOM" line="9" package="Default">
      <extends/>
      <name>BaseSqlGenerator</name>
      <full_name>\PHPCR\Util\QOM\BaseSqlGenerator</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="23" package="Default">
        <name>evalQuery</name>
        <full_name>evalQuery</full_name>
        <docblock line="11">
          <description><![CDATA[Query ::= 'SELECT' columns
    'FROM' Source
    ['WHERE' Constraint]
    ['ORDER BY' orderings]]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="param" description="" type="string" variable="$source">
            <type by_reference="false">string</type>
          </tag>
          <tag line="11" name="param" description="" type="string" variable="$columns">
            <type by_reference="false">string</type>
          </tag>
          <tag line="11" name="param" description="" type="string" variable="$constraint">
            <type by_reference="false">string</type>
          </tag>
          <tag line="11" name="param" description="" type="string" variable="$ordering">
            <type by_reference="false">string</type>
          </tag>
          <tag line="11" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$source</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$columns</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$constraint</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$orderings</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="44" package="Default">
        <name>evalAnd</name>
        <full_name>evalAnd</full_name>
        <docblock line="38">
          <description><![CDATA[And ::= constraint1 'AND' constraint2]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="" type="string" variable="$constraint1">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="" type="string" variable="$constraint2">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$constraint1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="44">
          <name>$constraint2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="55" package="Default">
        <name>evalOr</name>
        <full_name>evalOr</full_name>
        <docblock line="49">
          <description><![CDATA[Or ::= constraint1 'OR' constraint2]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="param" description="" type="string" variable="$constraint1">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="param" description="" type="string" variable="$constraint2">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$constraint1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$constraint2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="65" package="Default">
        <name>evalNot</name>
        <full_name>evalNot</full_name>
        <docblock line="60">
          <description><![CDATA[Not ::= 'NOT' Constraint]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="string" variable="$constraint">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="77" package="Default">
        <name>evalComparison</name>
        <full_name>evalComparison</full_name>
        <docblock line="70">
          <description><![CDATA[Comparison ::= DynamicOperand Operator StaticOperand]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="" type="string" variable="$operand1">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="" type="string" variable="$operand2">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$operand1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$operand2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="89" package="Default">
        <name>evalOperator</name>
        <full_name>evalOperator</full_name>
        <docblock line="82">
          <description><![CDATA[Operator ::= EqualTo | NotEqualTo | LessThan |
       LessThanOrEqualTo | GreaterThan |
       GreaterThanOrEqualTo | Like]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="param" description="" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="116" package="Default">
        <name>evalLower</name>
        <full_name>evalLower</full_name>
        <docblock line="111">
          <description><![CDATA[LowerCase ::= 'LOWER(' DynamicOperand ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="param" description="" type="string" variable="$operand">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="126" package="Default">
        <name>evalUpper</name>
        <full_name>evalUpper</full_name>
        <docblock line="121">
          <description><![CDATA[LowerCase ::= 'UPPER(' DynamicOperand ')']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="121" name="param" description="" type="string" variable="$operand">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="131" package="Default">
        <name>evalOrderings</name>
        <full_name>evalOrderings</full_name>
        <argument line="131">
          <name>$orderings</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="147" package="Default">
        <name>evalOrdering</name>
        <full_name>evalOrdering</full_name>
        <argument line="147">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="147">
          <name>$order</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="152" package="Default">
        <name>evalOrder</name>
        <full_name>evalOrder</full_name>
        <argument line="152">
          <name>$order</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="163" package="Default">
        <name>evalBindVariable</name>
        <full_name>evalBindVariable</full_name>
        <argument line="163">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="168" package="Default">
        <name>evalLiteral</name>
        <full_name>evalLiteral</full_name>
        <argument line="168">
          <name>$literal</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/BaseSqlGenerator.php</error>
      <error line="9" code="50000">No DocBlock was found for \PHPCR\Util\QOM\BaseSqlGenerator</error>
      <error line="11" code="50014">Name of argument $orderings does not match with the DocBlock's name $ordering in evalQuery()</error>
      <notice line="11" code="50013">Parameter $ordering could not be found in evalQuery()</notice>
      <error line="131" code="50010">No DocBlock was found for method evalOrderings()</error>
      <error line="147" code="50010">No DocBlock was found for method evalOrdering()</error>
      <error line="152" code="50010">No DocBlock was found for method evalOrder()</error>
      <error line="163" code="50010">No DocBlock was found for method evalBindVariable()</error>
      <error line="168" code="50010">No DocBlock was found for method evalLiteral()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/QomToSql2QueryConverter.php" hash="fe8c118ece4ab6a845ff5641dc34d0fa" package="Default">
    <namespace-alias name="QOM">PHPCR\Query\QOM</namespace-alias>
    <namespace-alias name="Constants">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="11" package="Default">
      <extends>\PHPCR\Util\QOM\BaseQomToSqlQueryConverter</extends>
      <name>QomToSql2QueryConverter</name>
      <full_name>\PHPCR\Util\QOM\QomToSql2QueryConverter</full_name>
      <docblock line="8">
        <description><![CDATA[Convert a QOM query into an SQL2 statement]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="19" package="Default">
        <name>convertSource</name>
        <full_name>convertSource</full_name>
        <docblock line="13">
          <description><![CDATA[Source ::= Selector | Join]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$source">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="13" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="19">
          <name>$source</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="45" package="Default">
        <name>convertJoin</name>
        <full_name>convertJoin</full_name>
        <docblock line="31">
          <description><![CDATA[Join ::= left [JoinType] 'JOIN' right 'ON' JoinCondition
   // If JoinType is omitted INNER is assumed.]]></description>
          <long-description><![CDATA[<p>left ::= Source
right ::= Source</p>

<p>JoinType ::= Inner | LeftOuter | RightOuter
Inner ::= 'INNER'
LeftOuter ::= 'LEFT OUTER'
RightOuter ::= 'RIGHT OUTER'</p>]]></long-description>
          <tag line="31" name="param" description="" type="\PHPCR\Query\QOM\JoinInterface" variable="$join">
            <type by_reference="false">\PHPCR\Query\QOM\JoinInterface</type>
          </tag>
          <tag line="31" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$join</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="62" package="Default">
        <name>convertJoinCondition</name>
        <full_name>convertJoinCondition</full_name>
        <docblock line="53">
          <description><![CDATA[JoinCondition ::= EquiJoinCondition |
            SameNodeJoinCondition |
            ChildNodeJoinCondition |
            DescendantNodeJoinCondition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="" type="\PHPCR\Query\QOM\JoinConditionInterface" variable="$condition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
          <tag line="53" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$condition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="91" package="Default">
        <name>convertEquiJoinCondition</name>
        <full_name>convertEquiJoinCondition</full_name>
        <docblock line="80">
          <description><![CDATA[EquiJoinCondition ::= selector1Name'.'property1Name '='
                      selector2Name'.'property2Name
  selector1Name ::= selectorName
  selector2Name ::= selectorName
  property1Name ::= propertyName
  property2Name ::= propertyName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="\PHPCR\Query\QOM\EquiJoinConditionInterface" variable="$condition">
            <type by_reference="false">\PHPCR\Query\QOM\EquiJoinConditionInterface</type>
          </tag>
          <tag line="80" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$condition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\EquiJoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="110" package="Default">
        <name>convertSameNodeJoinCondition</name>
        <full_name>convertSameNodeJoinCondition</full_name>
        <docblock line="100">
          <description><![CDATA[SameNodeJoinCondition ::=
  'ISSAMENODE(' selector1Name ','
                 selector2Name
                 [',' selector2Path] ')'
  selector2Path ::= Path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="" type="\PHPCR\Query\QOM\SameNodeJoinConditionInterface" variable="$condition">
            <type by_reference="false">\PHPCR\Query\QOM\SameNodeJoinConditionInterface</type>
          </tag>
          <tag line="100" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$condition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SameNodeJoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="128" package="Default">
        <name>convertChildNodeJoinCondition</name>
        <full_name>convertChildNodeJoinCondition</full_name>
        <docblock line="118">
          <description><![CDATA[ChildNodeJoinCondition ::=
  'ISCHILDNODE(' childSelectorName ','
                 parentSelectorName ')'
  childSelectorName ::= selectorName
  parentSelectorName ::= selectorName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="" type="\PHPCR\Query\QOM\ChildNodeJoinConditionInterface" variable="$condition">
            <type by_reference="false">\PHPCR\Query\QOM\ChildNodeJoinConditionInterface</type>
          </tag>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$condition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ChildNodeJoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="145" package="Default">
        <name>convertDescendantNodeJoinCondition</name>
        <full_name>convertDescendantNodeJoinCondition</full_name>
        <docblock line="135">
          <description><![CDATA[DescendantNodeJoinCondition ::=
  'ISDESCENDANTNODE(' descendantSelectorName ','
                      ancestorSelectorName ')'
  descendantSelectorName ::= selectorName
  ancestorSelectorName ::= selectorName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="param" description="" type="\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface" variable="$condition">
            <type by_reference="false">\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface</type>
          </tag>
          <tag line="135" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$condition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="176" package="Default">
        <name>convertConstraint</name>
        <full_name>convertConstraint</full_name>
        <docblock line="152">
          <description><![CDATA[Constraint ::= And | Or | Not | Comparison |
         PropertyExistence | FullTextSearch |
         SameNode | ChildNode | DescendantNode]]></description>
          <long-description><![CDATA[<p>And ::= constraint1 'AND' constraint2
Or ::= constraint1 'OR' constraint2
Not ::= 'NOT' Constraint</p>

<p>SameNode ::= 'ISSAMENODE(' [selectorName ','] Path ')'
       // If only one selector exists in this query, explicit
          specification of the selectorName is optional</p>

<p>ChildNode ::= 'ISCHILDNODE(' [selectorName ','] Path ')'
       // If only one selector exists in this query, explicit
          specification of the selectorName is optional</p>

<p>DescendantNode ::= 'ISDESCENDANTNODE(' [selectorName ','] Path ')'
       // If only one selector exists in this query, explicit
          specification of the selectorName is optional</p>]]></long-description>
          <tag line="152" name="param" description="" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="152" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="176">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="236" package="Default">
        <name>convertDynamicOperand</name>
        <full_name>convertDynamicOperand</full_name>
        <docblock line="221">
          <description><![CDATA[DynamicOperand ::= PropertyValue | Length | NodeName |
             NodeLocalName | FullTextSearchScore |
             LowerCase | UpperCase]]></description>
          <long-description><![CDATA[<p>Length ::= 'LENGTH(' PropertyValue ')'
NodeName ::= 'NAME(' [selectorName] ')'              // If only one selector exists
NodeLocalName ::= 'LOCALNAME(' [selectorName] ')'    // If only one selector exists
FullTextSearchScore ::= 'SCORE(' [selectorName] ')'  // If only one selector exists
LowerCase ::= 'LOWER(' DynamicOperand ')'
UpperCase ::= 'UPPER(' DynamicOperand ')'</p>]]></long-description>
          <tag line="221" name="param" description="" type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$operand">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="221" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="236">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/QomToSql2QueryConverter.php</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/Sql1Generator.php" hash="b874c975cfe643c8291abd8c1a31d4ef" package="Default">
    <namespace-alias name="QOM">PHPCR\Query\QOM</namespace-alias>
    <namespace-alias name="Constants">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="13" package="Default">
      <extends>\PHPCR\Util\QOM\BaseSqlGenerator</extends>
      <name>Sql1Generator</name>
      <full_name>\PHPCR\Util\QOM\Sql1Generator</full_name>
      <docblock line="8">
        <description><![CDATA[Generate SQL1 statements]]></description>
        <long-description><![CDATA[<p>TODO: is eval... the best name for the functions here?</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="23" package="Default">
        <name>evalSelector</name>
        <full_name>evalSelector</full_name>
        <docblock line="15">
          <description><![CDATA[Selector ::= nodeTypeName
nodeTypeName ::= Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="param" description="The node type of the selector. If it does not contain starting and ending brackets ([]) they will be added automatically" type="string" variable="$nodeTypeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="15" name="param" description="(unused)" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="15" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$nodeTypeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="28" package="Default">
        <name>getPathForDescendantQuery</name>
        <full_name>getPathForDescendantQuery</full_name>
        <argument line="28">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="42" package="Default">
        <name>evalChildNode</name>
        <full_name>evalChildNode</full_name>
        <docblock line="36">
          <description><![CDATA[SameNode ::= 'jcr:path like Path/% and not jcr:path like Path/%/%']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="56" package="Default">
        <name>evalDescendantNode</name>
        <full_name>evalDescendantNode</full_name>
        <docblock line="50">
          <description><![CDATA[SameNode ::= 'jcr:path like Path/%']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="63" package="Default">
        <name>evalPropertyExistence</name>
        <full_name>evalPropertyExistence</full_name>
        <argument line="63">
          <name>$selectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="79" package="Default">
        <name>evalFullTextSearch</name>
        <full_name>evalFullTextSearch</full_name>
        <docblock line="68">
          <description><![CDATA[FullTextSearch ::=
      'CONTAINS(' (propertyName | '*') ') ','
                   FullTextSearchExpression ')'
FullTextSearchExpression ::= BindVariable | ''' FullTextSearchLiteral ''']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="unusued" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$searchExpression">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$ropertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$selectorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$searchExpression</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$propertyName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="90" package="Default">
        <name>evalColumns</name>
        <full_name>evalColumns</full_name>
        <argument line="90">
          <name>$columns</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="113" package="Default">
        <name>evalPropertyValue</name>
        <full_name>evalPropertyValue</full_name>
        <docblock line="108">
          <description><![CDATA[PropertyValue ::= propertyName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="119" package="Default">
        <name>evalColumn</name>
        <full_name>evalColumn</full_name>
        <argument line="119">
          <name>$selecor</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$property</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="131" package="Default">
        <name>evalPath</name>
        <full_name>evalPath</full_name>
        <docblock line="124">
          <description><![CDATA[Path ::= simplePath
simplePath ::= A JCR Name that contains only SQL-legal characters]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="124" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="140" package="Default">
        <name>evalCastLiteral</name>
        <full_name>evalCastLiteral</full_name>
        <docblock line="136">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="param" description="" type="string" variable="$literal">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$literal</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="140">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/Sql1Generator.php</error>
      <error line="28" code="50010">No DocBlock was found for method getPathForDescendantQuery()</error>
      <notice line="50" code="50013">Parameter $selectorName could not be found in evalDescendantNode()</notice>
      <error line="63" code="50010">No DocBlock was found for method evalPropertyExistence()</error>
      <error line="68" code="50014">Name of argument $propertyName does not match with the DocBlock's name $ropertyName in evalFullTextSearch()</error>
      <notice line="68" code="50013">Parameter $ropertyName could not be found in evalFullTextSearch()</notice>
      <error line="90" code="50010">No DocBlock was found for method evalColumns()</error>
      <error line="108" code="50015">Argument $selectorName is missing from the Docblock of evalPropertyValue()</error>
      <error line="119" code="50010">No DocBlock was found for method evalColumn()</error>
      <error line="136" code="50012">No short description for method evalCastLiteral()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/Sql2ToQomQueryConverter.php" hash="2755d6e927d2ab1ae33cca70e45099ff" package="Default">
    <namespace-alias name="QOM">PHPCR\Query\QOM</namespace-alias>
    <namespace-alias name="Constants">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="13" package="Default">
      <extends/>
      <name>Sql2ToQomQueryConverter</name>
      <full_name>\PHPCR\Util\QOM\Sql2ToQomQueryConverter</full_name>
      <docblock line="8">
        <description><![CDATA[Parse SQL2 statements and output a corresponding QOM objects tree]]></description>
        <long-description><![CDATA[<p>TODO: finish implementation</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="18" namespace="PHPCR\Util\QOM" package="Default">
        <name>$factory</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="var" description="" type="\PHPCR\Query\QOM\QueryObjectModelFactoryInterface">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="23" namespace="PHPCR\Util\QOM" package="Default">
        <name>$scanner</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\PHPCR\Query\QOM\Sql2Converter\Scanner;">
            <type by_reference="false">\PHPCR\Query\QOM\Sql2Converter\Scanner;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="28" namespace="PHPCR\Util\QOM" package="Default">
        <name>$sql2</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="33" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="30">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="" type="\PHPCR\Query\QOM\QueryObjectModelFactoryInterface" variable="$factory">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$factory</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="45" package="Default">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="38">
          <description><![CDATA[6.7.1.]]></description>
          <long-description><![CDATA[<p>Query
Parse an SQL2 query and return the corresponding QOM QueryObjectModel</p>]]></long-description>
          <tag line="38" name="param" description="" type="string" variable="$sql2">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="" type="\PHPCR\Query\QOM\QueryObjectModelInterface;">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelInterface;</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$sql2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="93" package="Default">
        <name>parseSource</name>
        <full_name>parseSource</full_name>
        <docblock line="87">
          <description><![CDATA[6.7.2.]]></description>
          <long-description><![CDATA[<p>Source
Parse an SQL2 source definition and return the corresponding QOM Source</p>]]></long-description>
          <tag line="87" name="return" description="" type="\PHPCR\Query\QOM\SourceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="113" package="Default">
        <name>parseSelector</name>
        <full_name>parseSelector</full_name>
        <docblock line="107">
          <description><![CDATA[6.7.3.]]></description>
          <long-description><![CDATA[<p>Selector
Parse an SQL2 selector and return a QOM\Selector</p>]]></long-description>
          <tag line="107" name="return" description="" type="\PHPCR\Query\QOM\SelectorInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SelectorInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="136" package="Default">
        <name>parseName</name>
        <full_name>parseName</full_name>
        <docblock line="131">
          <description><![CDATA[6.7.4.]]></description>
          <long-description><![CDATA[<p>Name</p>]]></long-description>
          <tag line="131" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="150" package="Default">
        <name>parseJoin</name>
        <full_name>parseJoin</full_name>
        <docblock line="142">
          <description><![CDATA[6.7.5.]]></description>
          <long-description><![CDATA[<p>Join
6.7.6. Join type
Parse an SQL2 join source and return a QOM\Join</p>]]></long-description>
          <tag line="142" name="param" description="the left selector as it has been read by parseSource return \PHPCR\Query\QOM\JoinInterface" type="string" variable="$leftSelector">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$leftSelector</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="164" package="Default">
        <name>parseJoinType</name>
        <full_name>parseJoinType</full_name>
        <docblock line="159">
          <description><![CDATA[6.7.6.]]></description>
          <long-description><![CDATA[<p>Join type</p>]]></long-description>
          <tag line="159" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="197" package="Default">
        <name>parseJoinCondition</name>
        <full_name>parseJoinCondition</full_name>
        <docblock line="191">
          <description><![CDATA[6.7.7.]]></description>
          <long-description><![CDATA[<p>JoinCondition
Parse an SQL2 join condition and return a QOM\Joincondition</p>]]></long-description>
          <tag line="191" name="return" description="" type="\PHPCR\Query\QOM\JoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="224" package="Default">
        <name>parseEquiJoin</name>
        <full_name>parseEquiJoin</full_name>
        <docblock line="218">
          <description><![CDATA[6.7.8.]]></description>
          <long-description><![CDATA[<p>EquiJoinCondition
Parse an SQL2 equijoin condition and return a QOM\EquiJoinCondition</p>]]></long-description>
          <tag line="218" name="return" description="" type="\PHPCR\Query\QOM\EquiJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\EquiJoinConditionInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="243" package="Default">
        <name>parseSameNodeJoinCondition</name>
        <full_name>parseSameNodeJoinCondition</full_name>
        <docblock line="237">
          <description><![CDATA[6.7.9 SameNodeJoinCondition
Parse an SQL2 same node join condition and return a QOM\SameNodeJoinCondition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="237" name="return" description="" type="\PHPCR\Query\QOM\SameNodeJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SameNodeJoinConditionInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="267" package="Default">
        <name>parseChildNodeJoinCondition</name>
        <full_name>parseChildNodeJoinCondition</full_name>
        <docblock line="261">
          <description><![CDATA[6.7.10 ChildNodeJoinCondition
Parse an SQL2 child node join condition and return a QOM\ChildNodeJoinCondition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="261" name="return" description="" type="\PHPCR\Query\QOM\ChildNodeJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ChildNodeJoinConditionInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="284" package="Default">
        <name>parseDescendantNodeJoinCondition</name>
        <full_name>parseDescendantNodeJoinCondition</full_name>
        <docblock line="278">
          <description><![CDATA[6.7.11 DescendantNodeJoinCondition
Parse an SQL2 descendant node join condition and return a QOM\DescendantNodeJoinCondition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="278" name="return" description="" type="\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DescendantNodeJoinConditionInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="302" package="Default">
        <name>parseConstraint</name>
        <full_name>parseConstraint</full_name>
        <docblock line="295">
          <description><![CDATA[6.7.12 Constraint
6.7.13 And
6.7.14 Or]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="295" name="return" description="" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="370" package="Default">
        <name>parseNot</name>
        <full_name>parseNot</full_name>
        <docblock line="365">
          <description><![CDATA[6.7.15 Not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="365" name="return" description="" type="\PHPCR\Query\QOM\NotInterface">
            <type by_reference="false">\PHPCR\Query\QOM\NotInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="381" package="Default">
        <name>parseComparison</name>
        <full_name>parseComparison</full_name>
        <docblock line="376">
          <description><![CDATA[6.7.16 Comparison]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="376" name="return" description="" type="\PHPCR\Query\QOM\ComparisonInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ComparisonInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="400" package="Default">
        <name>parseOperator</name>
        <full_name>parseOperator</full_name>
        <docblock line="395">
          <description><![CDATA[6.7.17 Operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="395" name="return" description="" type="\PHPCR\Query\QOM\OperatorInterface">
            <type by_reference="false">\PHPCR\Query\QOM\OperatorInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="428" package="Default">
        <name>parsePropertyExistence</name>
        <full_name>parsePropertyExistence</full_name>
        <docblock line="423">
          <description><![CDATA[6.7.18 PropertyExistence]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="423" name="return" description="" type="\PHPCR\Query\QOM\PropertyExistenceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyExistenceInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="456" package="Default">
        <name>parseFullTextSearch</name>
        <full_name>parseFullTextSearch</full_name>
        <docblock line="451">
          <description><![CDATA[6.7.19 FullTextSearch]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="451" name="return" description="" type="\PHPCR\Query\QOM\FullTextSearchInterface">
            <type by_reference="false">\PHPCR\Query\QOM\FullTextSearchInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="464" package="Default">
        <name>parseSameNode</name>
        <full_name>parseSameNode</full_name>
        <docblock line="461">
          <description><![CDATA[6.7.20 SameNode]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="482" package="Default">
        <name>parseChildNode</name>
        <full_name>parseChildNode</full_name>
        <docblock line="479">
          <description><![CDATA[6.7.21 ChildNode]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="500" package="Default">
        <name>parseDescendantNode</name>
        <full_name>parseDescendantNode</full_name>
        <docblock line="497">
          <description><![CDATA[6.7.22 DescendantNode]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="522" package="Default">
        <name>parsePath</name>
        <full_name>parsePath</full_name>
        <docblock line="515">
          <description><![CDATA[Parse a JCR path consisting of either a simple path (a JCR name that contains
only SQL-legal characters) or a path (simple path or quoted path) enclosed in
square brackets.]]></description>
          <long-description><![CDATA[<p>See JCR Spec § 6.7.23.</p>

<p>6.7.23. Path</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="538" package="Default">
        <name>parseStaticOperand</name>
        <full_name>parseStaticOperand</full_name>
        <docblock line="531">
          <description><![CDATA[Parse an SQL2 static operand
6.7.35 BindVariable
6.7.36 Prefix]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="531" name="return" description="" type="\PHPCR\Query\QOM\StaticOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\StaticOperandInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="559" package="Default">
        <name>parseDynamicOperand</name>
        <full_name>parseDynamicOperand</full_name>
        <docblock line="547">
          <description><![CDATA[6.7.26 DynamicOperand
6.7.28 Length
6.7.29 NodeName
6.7.30 NodeLocalName
6.7.31 FullTextSearchScore
6.7.32 LowerCase
6.7.33 UpperCase
Parse an SQL2 dynamic operand]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="547" name="return" description="" type="\PHPCR\Query\QOM\DynamicOperandInterface">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="635" package="Default">
        <name>parsePropertyValue</name>
        <full_name>parsePropertyValue</full_name>
        <docblock line="629">
          <description><![CDATA[6.7.27 PropertyValue
Parse an SQL2 property value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="629" name="return" description="" type="\PHPCR\Query\QOM\PropertyValueInterface">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyValueInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="658" package="Default">
        <name>parseLiteral</name>
        <full_name>parseLiteral</full_name>
        <docblock line="652">
          <description><![CDATA[6.7.34 Literal
Parse an SQL2 literal value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="652" name="return" description="" type="\PHPCR\Query\QOM\LiteralInterface">
            <type by_reference="false">\PHPCR\Query\QOM\LiteralInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="691" package="Default">
        <name>parseOrderings</name>
        <full_name>parseOrderings</full_name>
        <docblock line="688">
          <description><![CDATA[6.7.37 Ordering]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="709" package="Default">
        <name>parseOrdering</name>
        <full_name>parseOrdering</full_name>
        <docblock line="706">
          <description><![CDATA[6.7.38 Order]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="734" package="Default">
        <name>parseColumns</name>
        <full_name>parseColumns</full_name>
        <docblock line="728">
          <description><![CDATA[6.7.39 Column
Parse an SQL2 columns definition and return an array of QOM\Column]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="728" name="return" description="of array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="768" package="Default">
        <name>parseColumn</name>
        <full_name>parseColumn</full_name>
        <docblock line="763">
          <description><![CDATA[Parse a single SQL2 column definition and return a QOM\Column]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="763" name="return" description="" type="\PHPCR\Query\QOM\ColumnInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ColumnInterface</type>
          </tag>
        </docblock>
      </method>
    </class>
    <markers>
      <todo line="138">check it's the correct way to parse a JCR name</todo>
    </markers>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/Sql2ToQomQueryConverter.php</error>
      <critical line="15" code="50019">No short description for property $factory</critical>
      <critical line="20" code="50019">No short description for property $scanner</critical>
      <critical line="25" code="50019">No short description for property $sql2</critical>
      <error line="30" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/Sql2Scanner.php" hash="21ec0c07ac6485dc40528f6e7ba6f230" package="Default">
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="8" package="Default">
      <extends/>
      <name>Sql2Scanner</name>
      <full_name>\PHPCR\Util\QOM\Sql2Scanner</full_name>
      <docblock line="5">
        <description><![CDATA[Split an SQL2 statement into string tokens.]]></description>
        <long-description><![CDATA[<p>Allows lookup and fetching of tokens.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="13" namespace="PHPCR\Util\QOM" package="Default">
        <name>$sql2</name>
        <default><![CDATA[]]></default>
        <docblock line="10">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="10" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="18" namespace="PHPCR\Util\QOM" package="Default">
        <name>$tokens</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="23" namespace="PHPCR\Util\QOM" package="Default">
        <name>$curpos</name>
        <default><![CDATA[0]]></default>
        <docblock line="20">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="30" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description><![CDATA[Construct a scanner with the given SQL2 statement]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="" type="string" variable="$sql2">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$sql2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="42" package="Default">
        <name>lookupNextToken</name>
        <full_name>lookupNextToken</full_name>
        <docblock line="36">
          <description><![CDATA[Get the next token without removing it from the queue.]]></description>
          <long-description><![CDATA[<p>Return an empty string when there are no more tokens.</p>]]></long-description>
          <tag line="36" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="56" package="Default">
        <name>fetchNextToken</name>
        <full_name>fetchNextToken</full_name>
        <docblock line="50">
          <description><![CDATA[Get the next token and remove it from the queue.]]></description>
          <long-description><![CDATA[<p>Return an empty string when there are no more tokens.</p>]]></long-description>
          <tag line="50" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="73" package="Default">
        <name>expectToken</name>
        <full_name>expectToken</full_name>
        <docblock line="65">
          <description><![CDATA[Expect the next token to be the given one and throw an exception if it's
not the case.]]></description>
          <long-description><![CDATA[<p>The equality test is done case sensitively/insensitively
depending on the second parameter.</p>]]></long-description>
          <tag line="65" name="param" description="The expected token" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="param" description="" type="boolean" variable="$case_insensitive">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$token</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$case_insensitive</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="89" package="Default">
        <name>expectTokens</name>
        <full_name>expectTokens</full_name>
        <docblock line="81">
          <description><![CDATA[Expect the next tokens to be the one given in the array of tokens and
throws an exception if it's not the case.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="see" description="\PHPCR\Util\QOM\expectToken" refers="\PHPCR\Util\QOM\expectToken"/>
          <tag line="81" name="param" description="" type="array" variable="$tokens">
            <type by_reference="false">array</type>
          </tag>
          <tag line="81" name="param" description="" type="boolean" variable="$case_insensitive">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$tokens</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="89">
          <name>$case_insensitive</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="104" package="Default">
        <name>tokenIs</name>
        <full_name>tokenIs</full_name>
        <docblock line="96">
          <description><![CDATA[Test the equality of two tokens]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="param" description="" type="boolean" variable="$case_insensitive">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="96" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$token</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="104">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="104">
          <name>$case_insensitive</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="120" package="Default">
        <name>scan</name>
        <full_name>scan</full_name>
        <docblock line="114">
          <description><![CDATA[Scan a SQL2 string a extract the tokens]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="param" description="" type="string" variable="$sql2">
            <type by_reference="false">string</type>
          </tag>
          <tag line="114" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$sql2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="139" package="Default">
        <name>tokenize</name>
        <full_name>tokenize</full_name>
        <docblock line="132">
          <description><![CDATA[Tokenize a string returned by strtok to split the string at '.', ',', '(', '='
and ')' characters.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="param" description="" type="array" variable="$tokens">
            <type by_reference="false">array</type>
          </tag>
          <tag line="132" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$tokens</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$token</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/Sql2Scanner.php</error>
      <critical line="10" code="50019">No short description for property $sql2</critical>
      <critical line="15" code="50019">No short description for property $tokens</critical>
      <critical line="20" code="50019">No short description for property $curpos</critical>
      <error line="36" code="50015">Argument $offset is missing from the Docblock of lookupNextToken()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/NotSupportedOperandException.php" hash="d70ac5436d6f645a5b61300db454529b" package="Default">
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="5" package="Default">
      <extends>\RuntimeException</extends>
      <name>NotSupportedOperandException</name>
      <full_name>\PHPCR\Util\QOM\NotSupportedOperandException</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="7" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="7">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/NotSupportedOperandException.php</error>
      <error line="5" code="50000">No DocBlock was found for \PHPCR\Util\QOM\NotSupportedOperandException</error>
      <error line="7" code="50010">No DocBlock was found for method __construct()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/QueryBuilder.php" hash="ae48d264d3dd07370f26c56f1de7dd6b" package="Default">
    <namespace-alias name="QueryObjectModelFactoryInterface">PHPCR\Query\QOM\QueryObjectModelFactoryInterface</namespace-alias>
    <namespace-alias name="DynamicOperandInterface">PHPCR\Query\QOM\DynamicOperandInterface</namespace-alias>
    <namespace-alias name="ConstraintInterface">PHPCR\Query\QOM\ConstraintInterface</namespace-alias>
    <namespace-alias name="SourceInterface">PHPCR\Query\QOM\SourceInterface</namespace-alias>
    <namespace-alias name="JoinConditionInterface">PHPCR\Query\QOM\JoinConditionInterface</namespace-alias>
    <namespace-alias name="QueryObjectModelConstantsInterface">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <namespace-alias name="QueryInterface">PHPCR\Query\QueryInterface</namespace-alias>
    <namespace-alias name="QueryObjectModelInterface">PHPCR\Query\QOM\QueryObjectModelInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="21" package="Default">
      <extends/>
      <name>QueryBuilder</name>
      <full_name>\PHPCR\Util\QOM\QueryBuilder</full_name>
      <docblock line="14">
        <description><![CDATA[QueryBuilder class is responsible for dynamically create QOM queries.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="author" description="Nacho Martín &lt;nitram.ohcan@gmail.com&gt;"/>
        <tag line="14" name="author" description="Guilherme Blanco &lt;guilhermeblanco@hotmail.com&gt;"/>
        <tag line="14" name="author" description="Benjamin Eberlei &lt;kontakt@beberlei.de&gt;"/>
      </docblock>
      <constant namespace="PHPCR\Util\QOM" line="24" package="Default">
        <name>STATE_DIRTY</name>
        <full_name>STATE_DIRTY</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="23">
          <description><![CDATA[The builder states.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="PHPCR\Util\QOM" line="25" package="Default">
        <name>STATE_CLEAN</name>
        <full_name>STATE_CLEAN</full_name>
        <value><![CDATA[1]]></value>
      </constant>
      <property final="false" static="false" visibility="private" line="30" namespace="PHPCR\Util\QOM" package="Default">
        <name>$state</name>
        <default><![CDATA[self::STATE_CLEAN]]></default>
        <docblock line="27">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="The state of the query object. Can be dirty or clean." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="35" namespace="PHPCR\Util\QOM" package="Default">
        <name>$qomFactory</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="QOMFactory" type="\PHPCR\Query\QOM\QueryObjectModelFactoryInterface">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="40" namespace="PHPCR\Util\QOM" package="Default">
        <name>$firstResult</name>
        <default><![CDATA[null]]></default>
        <docblock line="37">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="The maximum number of results to retrieve." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="45" namespace="PHPCR\Util\QOM" package="Default">
        <name>$maxResults</name>
        <default><![CDATA[null]]></default>
        <docblock line="42">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="The maximum number of results to retrieve." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="50" namespace="PHPCR\Util\QOM" package="Default">
        <name>$orderings</name>
        <default><![CDATA[array()]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="with the orderings that determine the order of the result" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="55" namespace="PHPCR\Util\QOM" package="Default">
        <name>$constraint</name>
        <default><![CDATA[null]]></default>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="to apply to the query." type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="60" namespace="PHPCR\Util\QOM" package="Default">
        <name>$columns</name>
        <default><![CDATA[array()]]></default>
        <docblock line="57">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="var" description="with the columns to be selected." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="65" namespace="PHPCR\Util\QOM" package="Default">
        <name>$source</name>
        <default><![CDATA[null]]></default>
        <docblock line="62">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="var" description="source of the query." type="\PHPCR\Query\QOM\SourceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="70" namespace="PHPCR\Util\QOM" package="Default">
        <name>$query</name>
        <default><![CDATA[null]]></default>
        <docblock line="67">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="var" description="" type="\PHPCR\Query\QueryObjectModelInterface">
            <type by_reference="false">\PHPCR\Query\QueryObjectModelInterface</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="75" namespace="PHPCR\Util\QOM" package="Default">
        <name>$params</name>
        <default><![CDATA[array()]]></default>
        <docblock line="72">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="var" description="The query parameters." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="82" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="77">
          <description><![CDATA[Initializes a new QueryBuilder]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="\PHPCR\Query\QOM\QueryObjectModelFactoryInterface" variable="$qomFactory">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$qomFactory</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="94" package="Default">
        <name>setFromQuery</name>
        <full_name>setFromQuery</full_name>
        <docblock line="87">
          <description><![CDATA[Get a query builder instance from an existing query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="param" description="the statement in the specified language" type="string" variable="$statement">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="the query language" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$statement</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="119" package="Default">
        <name>getQOMFactory</name>
        <full_name>getQOMFactory</full_name>
        <docblock line="114">
          <description><![CDATA[Get the associated QOMFactory for this query builder]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="return" description="" type="\PHPCR\Query\QOM\QueryObjectModelFactoryInterface">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelFactoryInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="130" package="Default">
        <name>setFirstResult</name>
        <full_name>setFirstResult</full_name>
        <docblock line="124">
          <description><![CDATA[sets the position of the first result to retrieve (the "offset").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="The First result to return." type="integer" variable="$firstResult">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="124" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$firstResult</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="143" package="Default">
        <name>getFirstResult</name>
        <full_name>getFirstResult</full_name>
        <docblock line="136">
          <description><![CDATA[getFirstResult
Gets the position of the first result the query object was set to retrieve (the "offset").]]></description>
          <long-description><![CDATA[<p>Returns NULL if {@link setFirstResult} was not applied to this QueryBuilder.</p>]]></long-description>
          <tag line="136" name="return" description="The position of the first result." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="155" package="Default">
        <name>setMaxResults</name>
        <full_name>setMaxResults</full_name>
        <docblock line="148">
          <description><![CDATA[Sets the maximum number of results to retrieve (the "limit").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="param" description="The maximum number of results to retrieve." type="integer" variable="$maxResults">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="148" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="155">
          <name>$maxResults</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="167" package="Default">
        <name>getMaxResults</name>
        <full_name>getMaxResults</full_name>
        <docblock line="161">
          <description><![CDATA[Gets the maximum number of results the query object was set to retrieve (the "limit").]]></description>
          <long-description><![CDATA[<p>Returns NULL if {@link setMaxResults} was not applied to this query builder.</p>]]></long-description>
          <tag line="161" name="return" description="Maximum number of results." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="178" package="Default">
        <name>getOrderings</name>
        <full_name>getOrderings</full_name>
        <docblock line="173">
          <description><![CDATA[Gets the array of orderings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="return" description="Orderings to apply." type="\PHPCR\Util\QOM\arrray">
            <type by_reference="false">\PHPCR\Util\QOM\arrray</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="190" package="Default">
        <name>addOrderBy</name>
        <full_name>addOrderBy</full_name>
        <docblock line="183">
          <description><![CDATA[Adds an ordering to the query results.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="183" name="param" description="The ordering expression." type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$sort">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="183" name="param" description="The ordering direction." type="string" variable="$order">
            <type by_reference="false">string</type>
          </tag>
          <tag line="183" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$sort</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
        <argument line="190">
          <name>$order</name>
          <default><![CDATA['ASC']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="210" package="Default">
        <name>orderBy</name>
        <full_name>orderBy</full_name>
        <docblock line="202">
          <description><![CDATA[Specifies an ordering for the query results.]]></description>
          <long-description><![CDATA[<p>Replaces any previously specified orderings, if any.</p>]]></long-description>
          <tag line="202" name="param" description="The ordering expression." type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$sort">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="202" name="param" description="The ordering direction." type="string" variable="$order">
            <type by_reference="false">string</type>
          </tag>
          <tag line="202" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$sort</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
        <argument line="210">
          <name>$order</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="229" package="Default">
        <name>where</name>
        <full_name>where</full_name>
        <docblock line="222">
          <description><![CDATA[Specifies one restriction (may be simple or composed).]]></description>
          <long-description><![CDATA[<p>Replaces any previously specified restrictions, if any.</p>]]></long-description>
          <tag line="222" name="param" description="" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="222" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="241" package="Default">
        <name>getConstraint</name>
        <full_name>getConstraint</full_name>
        <docblock line="236">
          <description><![CDATA[Returns the constraint to apply]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="236" name="return" description="the constraint to be applied" type="\PHPCR\Query\QOM\ConstraintInterface">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="262" package="Default">
        <name>andWhere</name>
        <full_name>andWhere</full_name>
        <docblock line="246">
          <description><![CDATA[Creates a new constraint formed by applying a logical AND to the
existing constraint and the new one]]></description>
          <long-description><![CDATA[<p>Order of ands is important:</p>

<p>Given $this->constraint = $constraint1
running andWhere($constraint2)
resulting constraint will be $constraint1 AND $constraint2</p>

<p>If there is no previous constraint then it will simply store the
provided one</p>]]></long-description>
          <tag line="246" name="param" description="" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="246" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="262">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="289" package="Default">
        <name>orWhere</name>
        <full_name>orWhere</full_name>
        <docblock line="273">
          <description><![CDATA[Creates a new constraint formed by applying a logical OR to the
existing constraint and the new one]]></description>
          <long-description><![CDATA[<p>Order of ands is important:</p>

<p>Given $this->constraint = $constraint1
running orWhere($constraint2)
resulting constraint will be $constraint1 OR $constraint2</p>

<p>If there is no previous constraint then it will simply store the
provided one</p>]]></long-description>
          <tag line="273" name="param" description="" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="273" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="289">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="305" package="Default">
        <name>getColumns</name>
        <full_name>getColumns</full_name>
        <docblock line="300">
          <description><![CDATA[Returns the columns to be selected]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="300" name="return" description="The columns to be selected" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="316" package="Default">
        <name>setColumns</name>
        <full_name>setColumns</full_name>
        <docblock line="310">
          <description><![CDATA[Sets the columns to be selected]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="310" name="param" description="The columns to be selected" type="array" variable="$columns">
            <type by_reference="false">array</type>
          </tag>
          <tag line="310" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="316">
          <name>$columns</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="332" package="Default">
        <name>select</name>
        <full_name>select</full_name>
        <docblock line="323">
          <description><![CDATA[Identifies a property in the specified or default selector to include in the tabular view of query results.]]></description>
          <long-description><![CDATA[<p>Replaces any previously specified columns to be selected if any.</p>]]></long-description>
          <tag line="323" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="323" name="param" description="" type="string" variable="$columnName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="323" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="323" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="332">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="332">
          <name>$columnName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="332">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="347" package="Default">
        <name>addSelect</name>
        <full_name>addSelect</full_name>
        <docblock line="339">
          <description><![CDATA[Adds a property in the specified or default selector to include in the tabular view of query results.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="339" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="339" name="param" description="" type="string" variable="$columnName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="339" name="param" description="" type="string" variable="$selectorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="339" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="347">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="347">
          <name>$columnName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="347">
          <name>$selectorName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="361" package="Default">
        <name>from</name>
        <full_name>from</full_name>
        <docblock line="354">
          <description><![CDATA[Sets the default Selector or the node-tuple Source.]]></description>
          <long-description><![CDATA[<p>Can be a selector
or a join.</p>]]></long-description>
          <tag line="354" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$source">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="354" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="361">
          <name>$source</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="373" package="Default">
        <name>getSource</name>
        <full_name>getSource</full_name>
        <docblock line="368">
          <description><![CDATA[Gets the default Selector.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="368" name="return" description="The default selector." type="\PHPCR\Query\QOM\SourceInterface">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="386" package="Default">
        <name>join</name>
        <full_name>join</full_name>
        <docblock line="378">
          <description><![CDATA[Performs an inner join between the stored source and the supplied source.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="378" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$rightSource">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="378" name="param" description="" type="\PHPCR\Query\QOM\JoinConditionInterface" variable="$joinCondition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
          <tag line="378" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
          <tag line="378" name="trows" description="RuntimeException if there is not an existing source."/>
        </docblock>
        <argument line="386">
          <name>$rightSource</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="386">
          <name>$joinCondition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="399" package="Default">
        <name>innerJoin</name>
        <full_name>innerJoin</full_name>
        <docblock line="391">
          <description><![CDATA[Performs an inner join between the stored source and the supplied source.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="391" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$rightSource">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="391" name="param" description="" type="\PHPCR\Query\QOM\JoinConditionInterface" variable="$joinCondition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
          <tag line="391" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
          <tag line="391" name="trows" description="RuntimeException if there is not an existing source."/>
        </docblock>
        <argument line="399">
          <name>$rightSource</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="399">
          <name>$joinCondition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="412" package="Default">
        <name>leftJoin</name>
        <full_name>leftJoin</full_name>
        <docblock line="404">
          <description><![CDATA[Performs an left outer join between the stored source and the supplied source.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="404" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$rightSource">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="404" name="param" description="" type="\PHPCR\Query\QOM\JoinConditionInterface" variable="$joinCondition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
          <tag line="404" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
          <tag line="404" name="trows" description="RuntimeException if there is not an existing source."/>
        </docblock>
        <argument line="412">
          <name>$rightSource</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="412">
          <name>$joinCondition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="425" package="Default">
        <name>rightJoin</name>
        <full_name>rightJoin</full_name>
        <docblock line="417">
          <description><![CDATA[Performs a right outer join between the stored source and the supplied source.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="417" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$rightSource">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="417" name="param" description="" type="\PHPCR\Query\QOM\JoinConditionInterface" variable="$joinCondition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
          <tag line="417" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
          <tag line="417" name="trows" description="RuntimeException if there is not an existing source."/>
        </docblock>
        <argument line="425">
          <name>$rightSource</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="425">
          <name>$joinCondition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="439" package="Default">
        <name>joinWithType</name>
        <full_name>joinWithType</full_name>
        <docblock line="430">
          <description><![CDATA[Performs an join between the stored source and the supplied source.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="430" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$rightSource">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="430" name="param" description="as specified in PHPCR\Query\QOM\QueryObjectModelConstantsInterface" type="string" variable="$joinType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="430" name="param" description="" type="\PHPCR\Query\QOM\JoinConditionInterface" variable="$joinCondition">
            <type by_reference="false">\PHPCR\Query\QOM\JoinConditionInterface</type>
          </tag>
          <tag line="430" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
          <tag line="430" name="trows" description="RuntimeException if there is not an existing source."/>
        </docblock>
        <argument line="439">
          <name>$rightSource</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
        <argument line="439">
          <name>$joinType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="439">
          <name>$joinCondition</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\JoinConditionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="454" package="Default">
        <name>getQuery</name>
        <full_name>getQuery</full_name>
        <docblock line="449">
          <description><![CDATA[Gets the query built]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="449" name="return" description="" type="\PHPCR\Query\QueryObjectModelInterface">
            <type by_reference="false">\PHPCR\Query\QueryObjectModelInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="478" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="473">
          <description><![CDATA[Executes the query setting firstResult and maxResults.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="473" name="return" description="" type="\PHPCR\Query\QueryResultInterface">
            <type by_reference="false">\PHPCR\Query\QueryResultInterface</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="500" package="Default">
        <name>setParameter</name>
        <full_name>setParameter</full_name>
        <docblock line="493">
          <description><![CDATA[Sets a query parameter for the query being constructed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="493" name="param" description="The parameter name." type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="493" name="param" description="The parameter value." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="493" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="500">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="500">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="512" package="Default">
        <name>getParameter</name>
        <full_name>getParameter</full_name>
        <docblock line="506">
          <description><![CDATA[Gets a (previously set) query parameter of the query being constructed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="506" name="param" description="The key (name) of the bound parameter." type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="506" name="return" description="The value of the bound parameter." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="512">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="523" package="Default">
        <name>setParameters</name>
        <full_name>setParameters</full_name>
        <docblock line="517">
          <description><![CDATA[Sets a collection of query parameters for the query being constructed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="517" name="param" description="The query parameters to set." type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="517" name="return" description="This QueryBuilder instance." type="\PHPCR\Util\QOM\QueryBuilder">
            <type by_reference="false">\PHPCR\Util\QOM\QueryBuilder</type>
          </tag>
        </docblock>
        <argument line="523">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="535" package="Default">
        <name>getParameters</name>
        <full_name>getParameters</full_name>
        <docblock line="530">
          <description><![CDATA[Gets all defined query parameters for the query being constructed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="530" name="return" description="The currently defined query parameters." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/QueryBuilder.php</error>
      <critical line="67" code="50019">No short description for property $query</critical>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/NotSupportedConstraintException.php" hash="cec6c9084b49ad8fe3d7fcbd719ebcc1" package="Default">
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="5" package="Default">
      <extends>\RuntimeException</extends>
      <name>NotSupportedConstraintException</name>
      <full_name>\PHPCR\Util\QOM\NotSupportedConstraintException</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="7" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="7">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/NotSupportedConstraintException.php</error>
      <error line="5" code="50000">No DocBlock was found for \PHPCR\Util\QOM\NotSupportedConstraintException</error>
      <error line="7" code="50010">No DocBlock was found for method __construct()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/BaseQomToSqlQueryConverter.php" hash="1d9444d091426b8e0348c239e1bc0f8e" package="Default">
    <namespace-alias name="QOM">PHPCR\Query\QOM</namespace-alias>
    <namespace-alias name="Constants">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <class final="true" abstract="true" namespace="PHPCR\Util\QOM" line="8" package="Default">
      <extends/>
      <name>BaseQomToSqlQueryConverter</name>
      <full_name>\PHPCR\Util\QOM\BaseQomToSqlQueryConverter</full_name>
      <property final="false" static="false" visibility="protected" line="13" namespace="PHPCR\Util\QOM" package="Default">
        <name>$generator</name>
        <default><![CDATA[]]></default>
        <docblock line="10">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="10" name="var" description="" type="\PHPCR\Util\QOM\Sql2Generator">
            <type by_reference="false">\PHPCR\Util\QOM\Sql2Generator</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="15" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="15">
          <name>$generator</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Util\QOM\BaseSqlGenerator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util\QOM" line="29" package="Default">
        <name>convert</name>
        <full_name>convert</full_name>
        <docblock line="20">
          <description><![CDATA[Query ::= 'SELECT' columns
    'FROM' Source
    ['WHERE' Constraint]
    ['ORDER BY' orderings]]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="\PHPCR\Query\QOM\QueryObjectModelInterface" variable="$query">
            <type by_reference="false">\PHPCR\Query\QOM\QueryObjectModelInterface</type>
          </tag>
          <tag line="20" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\QueryObjectModelInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="54" package="Default">
        <name>convertSelector</name>
        <full_name>convertSelector</full_name>
        <docblock line="47">
          <description><![CDATA[Selector ::= nodeTypeName ['AS' selectorName]
nodeTypeName ::= Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="" type="\PHPCR\Query\QOM\SelectorInterface" variable="$selector">
            <type by_reference="false">\PHPCR\Query\QOM\SelectorInterface</type>
          </tag>
          <tag line="47" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$selector</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SelectorInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="76" package="Default">
        <name>convertComparison</name>
        <full_name>convertComparison</full_name>
        <docblock line="59">
          <description><![CDATA[Comparison ::= DynamicOperand Operator StaticOperand]]></description>
          <long-description><![CDATA[<p>Operator ::= EqualTo | NotEqualTo | LessThan |
       LessThanOrEqualTo | GreaterThan |
       GreaterThanOrEqualTo | Like
EqualTo ::= '='
NotEqualTo ::= '&lt;>'
LessThan ::= '&lt;'
LessThanOrEqualTo ::= '&lt;='
GreaterThan ::= '>'
GreaterThanOrEqualTo ::= '>='
Like ::= 'LIKE'</p>]]></long-description>
          <tag line="59" name="param" description="" type="\PHPCR\Query\QOM\ComparisonInterface" variable="$comparison">
            <type by_reference="false">\PHPCR\Query\QOM\ComparisonInterface</type>
          </tag>
          <tag line="59" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$comparison</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ComparisonInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="98" package="Default">
        <name>convertPropertyExistence</name>
        <full_name>convertPropertyExistence</full_name>
        <docblock line="85">
          <description><![CDATA[PropertyExistence ::=
  selectorName'.'propertyName 'IS NOT NULL' |
  propertyName 'IS NOT NULL'    If only one
                                selector exists in
                                this query]]></description>
          <long-description><![CDATA[<p>Note: The negation, 'NOT x IS NOT NULL'
     can be written 'x IS NULL'</p>]]></long-description>
          <tag line="85" name="param" description="" type="\PHPCR\Query\QOM\PropertyExistenceInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyExistenceInterface</type>
          </tag>
          <tag line="85" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\PropertyExistenceInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="117" package="Default">
        <name>convertFullTextSearch</name>
        <full_name>convertFullTextSearch</full_name>
        <docblock line="105">
          <description><![CDATA[FullTextSearch ::=
      'CONTAINS(' ([selectorName'.']propertyName |
                   selectorName'.*') ','
                   FullTextSearchExpression ')'
                     // If only one selector exists in this query,
                        explicit specification of the selectorName
                        preceding the propertyName is optional]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="" type="\PHPCR\Query\QOM\FullTextSearchInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\FullTextSearchInterface</type>
          </tag>
          <tag line="105" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\FullTextSearchInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="129" package="Default">
        <name>convertFullTextSearchExpression</name>
        <full_name>convertFullTextSearchExpression</full_name>
        <docblock line="123">
          <description><![CDATA[FullTextSearchExpression ::= BindVariable | ''' FullTextSearchLiteral ''']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="param" description="" type="string" variable="$expr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="123" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$literal</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="160" package="Default">
        <name>convertStaticOperand</name>
        <full_name>convertStaticOperand</full_name>
        <docblock line="142">
          <description><![CDATA[StaticOperand ::= Literal | BindVariableValue]]></description>
          <long-description><![CDATA[<p>Literal ::= CastLiteral | UncastLiteral
CastLiteral ::= 'CAST(' UncastLiteral ' AS ' PropertyType ')'</p>

<p>PropertyType ::= 'STRING' | 'BINARY' | 'DATE' | 'LONG' | 'DOUBLE' |
                 'DECIMAL' | 'BOOLEAN' | 'NAME' | 'PATH' |
                 'REFERENCE' | 'WEAKREFERENCE' | 'URI'
UncastLiteral ::= UnquotedLiteral | ''' UnquotedLiteral ''' | '“' UnquotedLiteral '“'
UnquotedLiteral ::= // String form of a JCR Value</p>

<p>BindVariableValue ::= '$'bindVariableName
bindVariableName ::= Prefix</p>]]></long-description>
          <tag line="142" name="param" description="" type="\PHPCR\Query\QOM\StaticOperandInterface" variable="$operand">
            <type by_reference="false">\PHPCR\Query\QOM\StaticOperandInterface</type>
          </tag>
          <tag line="142" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\StaticOperandInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="179" package="Default">
        <name>convertPropertyValue</name>
        <full_name>convertPropertyValue</full_name>
        <docblock line="173">
          <description><![CDATA[PropertyValue ::= [selectorName'.'] propertyName     // If only one selector exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="" type="\PHPCR\Query\QOM\PropertyValueInterface" variable="$value">
            <type by_reference="false">\PHPCR\Query\QOM\PropertyValueInterface</type>
          </tag>
          <tag line="173" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\PropertyValueInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="197" package="Default">
        <name>convertOrderings</name>
        <full_name>convertOrderings</full_name>
        <docblock line="187">
          <description><![CDATA[orderings ::= Ordering {',' Ordering}
Ordering ::= DynamicOperand [Order]
Order ::= Ascending | Descending
Ascending ::= 'ASC'
Descending ::= 'DESC']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="param" description="" type="array" variable="$orderings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="187" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$orderings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="209" package="Default">
        <name>convertPath</name>
        <full_name>convertPath</full_name>
        <argument line="209">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="214" package="Default">
        <name>convertBindVariable</name>
        <full_name>convertBindVariable</full_name>
        <argument line="214">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="219" package="Default">
        <name>convertLiteral</name>
        <full_name>convertLiteral</full_name>
        <argument line="219">
          <name>$literal</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="236" package="Default">
        <name>convertColumns</name>
        <full_name>convertColumns</full_name>
        <docblock line="224">
          <description><![CDATA[columns ::= (Column ',' {Column}) | '*'
Column ::= ([selectorName'.']propertyName
            ['AS' columnName]) |
           (selectorName'.*')    // If only one selector exists
selectorName ::= Name
propertyName ::= Name
columnName ::= Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="224" name="param" description="" type="array" variable="$columns">
            <type by_reference="false">array</type>
          </tag>
          <tag line="224" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="236">
          <name>$columns</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/BaseQomToSqlQueryConverter.php</error>
      <error line="8" code="50000">No DocBlock was found for \PHPCR\Util\QOM\BaseQomToSqlQueryConverter</error>
      <critical line="10" code="50019">No short description for property $generator</critical>
      <error line="15" code="50010">No DocBlock was found for method __construct()</error>
      <error line="123" code="50014">Name of argument $literal does not match with the DocBlock's name $expr in convertFullTextSearchExpression()</error>
      <notice line="123" code="50013">Parameter $expr could not be found in convertFullTextSearchExpression()</notice>
      <error line="173" code="50014">Name of argument $operand does not match with the DocBlock's name $value in convertPropertyValue()</error>
      <notice line="173" code="50013">Parameter $value could not be found in convertPropertyValue()</notice>
      <error line="209" code="50010">No DocBlock was found for method convertPath()</error>
      <error line="214" code="50010">No DocBlock was found for method convertBindVariable()</error>
      <error line="219" code="50010">No DocBlock was found for method convertLiteral()</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/QOM/QomToSql1QueryConverter.php" hash="68c224122a653ca285ab0aa88bd7b4ea" package="Default">
    <namespace-alias name="QOM">PHPCR\Query\QOM</namespace-alias>
    <namespace-alias name="Constants">PHPCR\Query\QOM\QueryObjectModelConstantsInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util\QOM" line="11" package="Default">
      <extends>\PHPCR\Util\QOM\BaseQomToSqlQueryConverter</extends>
      <name>QomToSql1QueryConverter</name>
      <full_name>\PHPCR\Util\QOM\QomToSql1QueryConverter</full_name>
      <docblock line="8">
        <description><![CDATA[Convert a QOM query into an SQL2 statement]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="19" package="Default">
        <name>convertSource</name>
        <full_name>convertSource</full_name>
        <docblock line="13">
          <description><![CDATA[Source ::= Selector]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="param" description="" type="\PHPCR\Query\QOM\SourceInterface" variable="$source">
            <type by_reference="false">\PHPCR\Query\QOM\SourceInterface</type>
          </tag>
          <tag line="13" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="19">
          <name>$source</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\SourceInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="40" package="Default">
        <name>convertConstraint</name>
        <full_name>convertConstraint</full_name>
        <docblock line="28">
          <description><![CDATA[Constraint ::= And | Or | Not | Comparison |
         PropertyExistence | FullTextSearch |
         SameNode | ChildNode | DescendantNode]]></description>
          <long-description><![CDATA[<p>And ::= constraint1 'AND' constraint2
Or ::= constraint1 'OR' constraint2
Not ::= 'NOT' Constraint</p>]]></long-description>
          <tag line="28" name="param" description="" type="\PHPCR\Query\QOM\ConstraintInterface" variable="$constraint">
            <type by_reference="false">\PHPCR\Query\QOM\ConstraintInterface</type>
          </tag>
          <tag line="28" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$constraint</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\ConstraintInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPCR\Util\QOM" line="91" package="Default">
        <name>convertDynamicOperand</name>
        <full_name>convertDynamicOperand</full_name>
        <docblock line="82">
          <description><![CDATA[DynamicOperand ::= PropertyValue | LowerCase | UpperCase]]></description>
          <long-description><![CDATA[<p>LowerCase ::= 'LOWER(' DynamicOperand ')'
UpperCase ::= 'UPPER(' DynamicOperand ')'</p>]]></long-description>
          <tag line="82" name="param" description="" type="\PHPCR\Query\QOM\DynamicOperandInterface" variable="$operand">
            <type by_reference="false">\PHPCR\Query\QOM\DynamicOperandInterface</type>
          </tag>
          <tag line="82" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$operand</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\Query\QOM\DynamicOperandInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/QOM/QomToSql1QueryConverter.php</error>
    </parse_markers>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/TraversingItemVisitor.php" hash="cce7d85815481e1a845991f245a107c8" package="Default">
    <docblock line="3">
      <description><![CDATA[This file is part of the PHPCR API and was originally ported from the Java
JCR API to PHP by Karsten Dambekalns for the FLOW3 project.]]></description>
      <long-description><![CDATA[<p>Copyright 2008-2011 Karsten Dambekalns <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;">&#107;&#x61;&#114;&#115;&#x74;e&#110;&#x40;&#x74;&#121;&#x70;&#x6f;&#51;&#46;&#x6f;&#114;&#103;</a></p>

<p>Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at</p>

<pre><code>http://www.apache.org/licenses/LICENSE-2.0
</code></pre>

<p>Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.</p>]]></long-description>
      <tag line="3" name="license" description="http://www.apache.org/licenses/LICENSE-2.0 Apache Software License 2.0"/>
      <tag line="3" name="link" description="http://phpcr.github.com/" link="http://phpcr.github.com/"/>
    </docblock>
    <class final="true" abstract="true" namespace="PHPCR\Util" line="46" package="phpcr\interfaces">
      <extends/>
      <implements>\PHPCR\ItemVisitorInterface</implements>
      <name>TraversingItemVisitor</name>
      <full_name>\PHPCR\Util\TraversingItemVisitor</full_name>
      <docblock line="27">
        <description><![CDATA[An implementation of ItemVisitor.]]></description>
        <long-description><![CDATA[<p>TraversingItemVisitor is an abstract utility class which allows to easily
traverse an Item hierarchy.
You overwrite entering and leaving methods that get called for all
properties encountered</p>

<p>TraversingItemVisitor makes use of the Visitor Pattern as described in the
book 'Design Patterns' by the Gang Of Four (Gamma et al.).
Tree traversal is done observing the left-to-right order of child Items if
such an order is supported and exists.</p>]]></long-description>
        <tag line="27" name="author" description="Karsten Dambekalns &lt;karsten@typo3.org&gt;"/>
        <tag line="27" name="author" description="Day Management AG, Switzerland"/>
        <tag line="27" name="package" description="phpcr"/>
        <tag line="27" name="subpackage" description="interfaces"/>
        <tag line="27" name="api" description=""/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="54" namespace="PHPCR\Util" package="Default">
        <name>$breadthFirst</name>
        <default><![CDATA[false]]></default>
        <docblock line="48">
          <description><![CDATA[Indicates if traversal should be done in a breadth-first manner rather
than depth-first (which is the default).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" namespace="PHPCR\Util" package="Default">
        <name>$maxDepth</name>
        <default><![CDATA[-1]]></default>
        <docblock line="56">
          <description><![CDATA[The 0-based depth up to which the hierarchy should be traversed (if it's
-1, the hierarchy will be traversed until there are no more children of
the current item).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="70" namespace="PHPCR\Util" package="Default">
        <name>$currentQueue</name>
        <default><![CDATA[]]></default>
        <docblock line="65">
          <description><![CDATA[Queue used to implement breadth-first traversal.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="\SplQueue">
            <type by_reference="false">\SplQueue</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" namespace="PHPCR\Util" package="Default">
        <name>$nextQueue</name>
        <default><![CDATA[]]></default>
        <docblock line="72">
          <description><![CDATA[Queue used to implement breadth-first traversal.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="var" description="" type="\SplQueue">
            <type by_reference="false">\SplQueue</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="84" namespace="PHPCR\Util" package="Default">
        <name>$currentDepth</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[Used to track hierarchy depth of item currently being processed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util" line="99" package="phpcr\interfaces">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="86">
          <description><![CDATA[Constructs a new instance of this class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="param" description="if $breadthFirst is true then traversal is done in a breadth-first manner; otherwise it is done in a depth-first manner (which is the default behavior)." type="boolean" variable="$breadthFirst">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="86" name="param" description="the 0-based depth relative to the root node up to which the hierarchy should be traversed (if it's -1, the hierarchy will be traversed until there are no more children of the current item)." type="integer" variable="$maxDepth">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="86" name="api" description=""/>
        </docblock>
        <argument line="99">
          <name>$breadthFirst</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="99">
          <name>$maxDepth</name>
          <default><![CDATA[-1]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="PHPCR\Util" line="126" package="phpcr\interfaces">
        <name>entering</name>
        <full_name>entering</full_name>
        <docblock line="111">
          <description><![CDATA[Implement this method to add behavior performed before a Property is
visited.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="param" description="the Item that is accepting this visitor." type="\PHPCR\ItemInterface" variable="$item">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="111" name="param" description="hierarchy level of this node (the root node starts at depth 0)." type="integer" variable="$depth">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="111" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="111" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="111" name="api" description=""/>
        </docblock>
        <argument line="126">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
        <argument line="126">
          <name>$depth</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="PHPCR\Util" line="143" package="phpcr\interfaces">
        <name>leaving</name>
        <full_name>leaving</full_name>
        <docblock line="128">
          <description><![CDATA[Implement this method to add behavior performed after a Property is
visited.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="128" name="param" description="the Item that is accepting this visitor." type="\PHPCR\ItemInterface" variable="$item">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="128" name="param" description="hierarchy level of this property (the root node starts at depth 0)." type="integer" variable="$depth">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="128" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="128" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="128" name="api" description=""/>
        </docblock>
        <argument line="143">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
        <argument line="143">
          <name>$depth</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPCR\Util" line="163" package="phpcr\interfaces">
        <name>visit</name>
        <full_name>visit</full_name>
        <docblock line="145">
          <description><![CDATA[Called when the Visitor is passed to an Item.]]></description>
          <long-description><![CDATA[<p>It calls TraversingItemVisitor::entering() followed by
TraversingItemVisitor::leaving(). Implement these abstract methods to
specify behavior on 'arrival at' and 'after leaving' the $item.</p>

<p>If this method throws, the visiting process is aborted.</p>]]></long-description>
          <tag line="145" name="param" description="the Node or Property that is accepting this visitor." type="\PHPCR\ItemInterface" variable="$item">
            <type by_reference="false">\PHPCR\ItemInterface</type>
          </tag>
          <tag line="145" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="145" name="throws" description="if an error occurs." type="\PHPCR\RepositoryException">
            <type by_reference="false">\PHPCR\RepositoryException</type>
          </tag>
          <tag line="145" name="api" description=""/>
        </docblock>
        <argument line="163">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="phpcr-utils/src/PHPCR/Util/NodeHelper.php" hash="8e664b5d1bd4252f426e44aaf2179627" package="Default">
    <namespace-alias name="SessionInterface">PHPCR\SessionInterface</namespace-alias>
    <namespace-alias name="ItemInterface">PHPCR\ItemInterface</namespace-alias>
    <class final="false" abstract="false" namespace="PHPCR\Util" line="14" package="Default">
      <extends/>
      <name>NodeHelper</name>
      <full_name>\PHPCR\Util\NodeHelper</full_name>
      <docblock line="8">
        <description><![CDATA[Helper with only static methods to work with PHPCR nodes]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="8" name="author" description="Daniel Barsotti &lt;daniel.barsotti@liip.ch&gt;"/>
        <tag line="8" name="author" description="David Buchmann &lt;david@liip.ch&gt;"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="private" namespace="PHPCR\Util" line="19" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="16">
          <description><![CDATA[Do not create an instance of this class]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Util" line="31" package="Default">
        <name>createPath</name>
        <full_name>createPath</full_name>
        <docblock line="23">
          <description><![CDATA[Create a node and it's parents, if necessary.]]></description>
          <long-description><![CDATA[<p>Like mkdir -p.</p>]]></long-description>
          <tag line="23" name="param" description="the phpcr session to create the path" type="\PHPCR\SessionInterface" variable="$session">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
          <tag line="23" name="param" description="full path, like /content/jobs/data" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="return" description="the last node of the path, i.e. data" type="\PHPCR\Util\PHPCR\NodeInterface">
            <type by_reference="false">\PHPCR\Util\PHPCR\NodeInterface</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$session</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\SessionInterface</type>
        </argument>
        <argument line="31">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Util" line="60" package="Default">
        <name>deleteAllNodes</name>
        <full_name>deleteAllNodes</full_name>
        <docblock line="47">
          <description><![CDATA[Delete all the nodes in the repository which are not in a system namespace]]></description>
          <long-description><![CDATA[<p>Note that if you want to delete a node under your root node, you can just
use the remove method on that node. This method is just here to help you
because the implemenation might add nodes like jcr:system to the root
node which you are not allowed to remove.</p>]]></long-description>
          <tag line="47" name="param" description="the session to remove all children of the root node" type="\PHPCR\SessionInterface" variable="$session">
            <type by_reference="false">\PHPCR\SessionInterface</type>
          </tag>
          <tag line="47" name="see" description="\PHPCR\Util\isSystemItem" refers="\PHPCR\Util\isSystemItem"/>
        </docblock>
        <argument line="60">
          <name>$session</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\SessionInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPCR\Util" line="79" package="Default">
        <name>isSystemItem</name>
        <full_name>isSystemItem</full_name>
        <docblock line="75">
          <description><![CDATA[Determine whether this item has a namespace that is to be considered
a system namespace]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="79">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>\PHPCR\ItemInterface</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file phpcr-utils/src/PHPCR/Util/NodeHelper.php</error>
      <error line="75" code="50015">Argument $item is missing from the Docblock of isSystemItem()</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="phpcr" full_name="phpcr">
    <package name="exceptions" full_name="phpcr\exceptions"/>
    <package name="interfaces" full_name="phpcr\interfaces"/>
    <package name="prototypes" full_name="phpcr\prototypes"/>
  </package>
  <namespace name="PHPCR" full_name="PHPCR">
    <namespace name="Lock" full_name="PHPCR\Lock"/>
    <namespace name="NodeType" full_name="PHPCR\NodeType"/>
    <namespace name="Observation" full_name="PHPCR\Observation"/>
    <namespace name="Query" full_name="PHPCR\Query">
      <namespace name="QOM" full_name="PHPCR\Query\QOM"/>
    </namespace>
    <namespace name="Retention" full_name="PHPCR\Retention"/>
    <namespace name="Security" full_name="PHPCR\Security"/>
    <namespace name="Transaction" full_name="PHPCR\Transaction"/>
    <namespace name="Util" full_name="PHPCR\Util">
      <namespace name="Console" full_name="PHPCR\Util\Console">
        <namespace name="Command" full_name="PHPCR\Util\Console\Command"/>
        <namespace name="Helper" full_name="PHPCR\Util\Console\Helper">
          <namespace name="TreeDumper" full_name="PHPCR\Util\Console\Helper\TreeDumper"/>
        </namespace>
      </namespace>
      <namespace name="QOM" full_name="PHPCR\Util\QOM"/>
    </namespace>
    <namespace name="Version" full_name="PHPCR\Version"/>
  </namespace>
  <marker count="12">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
